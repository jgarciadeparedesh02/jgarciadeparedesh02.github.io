{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u00a1Bienvenidos al M\u00f3dulo de Desarrollo Web en Entorno Cliente!","text":"<p>\u00a1Hola! Nos complace darte la bienvenida a este emocionante m\u00f3dulo sobre Desarrollo Web en Entorno Cliente. A lo largo de este curso, aprender\u00e1s las herramientas, lenguajes y t\u00e9cnicas fundamentales para crear aplicaciones web din\u00e1micas, interactivas y funcionales que funcionen en el navegador de tus usuarios.</p>"},{"location":"#que-aprenderas","title":"\u00bfQu\u00e9 aprender\u00e1s?","text":"<p>En este m\u00f3dulo, exploraremos una amplia gama de temas esenciales para el desarrollo en el lado del cliente, incluyendo:</p> <ul> <li>HTML y CSS: La estructura y estilo de las p\u00e1ginas web.</li> <li>JavaScript: El lenguaje de programaci\u00f3n que da vida a las aplicaciones en el navegador.</li> <li>DOM (Document Object Model): C\u00f3mo manipular din\u00e1micamente el contenido de una p\u00e1gina web.</li> <li>Eventos y Formularios: Interacci\u00f3n entre la web y el usuario.</li> <li>Ajax y Comunicaci\u00f3n As\u00edncrona: T\u00e9cnicas para actualizar el contenido de las p\u00e1ginas web sin recargar.</li> <li>Frameworks de Desarrollo: Como React, Angular, y Vue.js, que te permitir\u00e1n construir interfaces m\u00e1s complejas y eficientes.</li> <li>Herramientas de Desarrollo: Uso de entornos como Visual Studio Code, WebStorm y herramientas de depuraci\u00f3n de navegadores.</li> </ul>"},{"location":"#objetivos-del-modulo","title":"Objetivos del M\u00f3dulo","text":"<p>Al final del curso, ser\u00e1s capaz de:</p> <ul> <li>Desarrollar aplicaciones web funcionales y atractivas.</li> <li>Utilizar frameworks de JavaScript como React o Angular para crear interfaces de usuario din\u00e1micas y escalables.</li> <li>Comprender el ciclo de vida del desarrollo en el entorno cliente.</li> <li>Manipular elementos del DOM y gestionar eventos de forma eficiente.</li> <li>Utilizar t\u00e9cnicas de programaci\u00f3n modernas como el manejo de promesas, funciones as\u00edncronas, y llamadas a APIs.</li> <li>Implementar componentes reutilizables y gestionar el estado de una aplicaci\u00f3n con frameworks modernos.</li> </ul>"},{"location":"#recursos-disponibles","title":"Recursos Disponibles","text":"<p>Para ayudarte a lo largo del m\u00f3dulo, tendr\u00e1s acceso a:</p> <ul> <li>Documentaci\u00f3n: Gu\u00edas y ejemplos pr\u00e1cticos de HTML, CSS, JavaScript, React, Angular, y m\u00e1s.</li> <li>Foros de Discusi\u00f3n: Espacios para resolver dudas con tus compa\u00f1eros y profesores.</li> <li>Ejercicios y Proyectos: Actividades pr\u00e1cticas para poner en uso lo aprendido.</li> <li>Revisiones de C\u00f3digo: Comentarios sobre tus trabajos para mejorar continuamente.</li> </ul>"},{"location":"#que-necesitas","title":"\u00bfQu\u00e9 necesitas?","text":"<ul> <li>Conocimientos b\u00e1sicos de programaci\u00f3n en cualquier lenguaje (deseable).</li> <li>Un editor de c\u00f3digo como Visual Studio Code.</li> <li>Un navegador moderno como Google Chrome o Mozilla Firefox.</li> <li>Ganas de aprender y explorar el mundo del desarrollo web, incluyendo frameworks como React y Angular.</li> </ul>"},{"location":"#comencemos","title":"\u00a1Comencemos!","text":"<p>Estamos entusiasmados de acompa\u00f1arte en este viaje hacia convertirte en un desarrollador web m\u00e1s competente. Aprovecha los recursos, participa activamente, y sobre todo, divi\u00e9rtete programando. </p> <p>\u00a1El futuro del desarrollo web comienza aqu\u00ed!</p> <p>Info</p> <p>No olvides consultar regularmente el calendario de actividades y las fechas de entrega para mantenerte al d\u00eda con el curso.</p>"},{"location":"clase-git/","title":"Clase git","text":"<p>\u00a1Vamos a darle un toque animado y m\u00e1s visual a esos apuntes sobre Git y GitHub! A\u00f1adiremos emojis, un tono m\u00e1s amigable, y explicaremos la instalaci\u00f3n de Git en Windows, la carpeta <code>.git</code>, y c\u00f3mo crear un flujo de trabajo con Git y GitHub. \u00a1All\u00e1 vamos! \ud83d\ude80</p>"},{"location":"clase-git/#apuntes-introduccion-a-git-y-github","title":"\ud83d\udcdd Apuntes: Introducci\u00f3n a Git y GitHub","text":""},{"location":"clase-git/#1-que-es-git","title":"1\ufe0f\u20e3 \u00bfQu\u00e9 es Git? \ud83e\udd14","text":"<ul> <li>Git es un sistema de control de versiones distribuido que te permite llevar un seguimiento de los cambios en tu c\u00f3digo, colaborar con otros desarrolladores, \u00a1y hasta retroceder en el tiempo si algo sale mal! \ud83d\udd70\ufe0f</li> <li>Un Repositorio (repo) es como una caja fuerte para tu c\u00f3digo y sus versiones. Puede ser local (en tu propia m\u00e1quina) o remoto (en un servidor como GitHub).</li> </ul>"},{"location":"clase-git/#2-que-es-github","title":"2\ufe0f\u20e3 \u00bfQu\u00e9 es GitHub? \ud83c\udf10","text":"<ul> <li>GitHub es una plataforma basada en la web que utiliza Git para gestionar versiones de tu c\u00f3digo. \u00a1Pero GitHub es mucho m\u00e1s! Puedes gestionar proyectos, realizar integraciones continuas (CI/CD), publicar tu web con GitHub Pages, \u00a1y mucho m\u00e1s! \ud83c\udf89</li> </ul>"},{"location":"clase-git/#3-instalacion-de-git-en-windows","title":"3\ufe0f\u20e3 Instalaci\u00f3n de Git en Windows \ud83d\udda5\ufe0f","text":"<p>Para empezar a usar Git, necesitamos instalarlo:</p> <ol> <li>Descarga Git para Windows: Busca \"Descargar Git para Windows\" y sigue el asistente de instalaci\u00f3n. \ud83d\udc68\u200d\ud83d\udcbb</li> <li>Verifica la Instalaci\u00f3n: Abre la terminal de Git (Git Bash) y escribe:</li> </ol> <pre><code>git --version\n</code></pre> <p>Si ves un n\u00famero de versi\u00f3n, \u00a1est\u00e1s listo! \ud83c\udf8a</p>"},{"location":"clase-git/#4-primeros-pasos-con-git-crea-tu-primer-repositorio","title":"4\ufe0f\u20e3 Primeros Pasos con Git: \u00a1Crea tu Primer Repositorio! \ud83d\udcc2","text":""},{"location":"clase-git/#41-inicializacion-del-repositorio-local","title":"4.1. Inicializaci\u00f3n del Repositorio Local \ud83d\uddc3\ufe0f","text":"<ol> <li>Abre Git Bash y navega hasta la carpeta donde quieres crear tu proyecto.</li> <li>Ejecuta <code>git init</code> para inicializar un nuevo repositorio:</li> </ol> <pre><code>git init\n</code></pre> <p>\u00a1Voila! Ahora tu carpeta es un repositorio de Git. Esto crea una carpeta oculta <code>.git</code> que contiene todos los archivos de configuraci\u00f3n y el historial de cambios. \u00a1No toques esa carpeta directamente! \ud83d\uded1</p>"},{"location":"clase-git/#42-anadir-archivos-al-repositorio","title":"4.2. A\u00f1adir Archivos al Repositorio \ud83d\udcc4","text":"<ol> <li>A\u00f1ade archivos al \u00e1rea de preparaci\u00f3n (staging area) con:</li> </ol> <pre><code>git add nombre_del_archivo  # A\u00f1ade un archivo espec\u00edfico\ngit add .  # A\u00f1ade todos los archivos en el directorio actual\n</code></pre> <p>Pro Tip: Usa <code>git add .</code> para a\u00f1adir todos los cambios de una vez. \ud83d\ude80</p>"},{"location":"clase-git/#43-confirmar-cambios-commit","title":"4.3. Confirmar Cambios (Commit) \u2705","text":"<p>\u00a1Es hora de confirmar tus cambios! Esto guarda un \"snapshot\" de tu c\u00f3digo:</p> <pre><code>git commit -m \"Mensaje describiendo los cambios\"\n</code></pre> <p>Aseg\u00farate de que el mensaje de tu commit sea descriptivo. Por ejemplo, <code>git commit -m \"A\u00f1adir funci\u00f3n de suma para el carrito de compras\"</code>.</p>"},{"location":"clase-git/#5-conecta-tu-repositorio-local-a-github","title":"5\ufe0f\u20e3 Conecta tu Repositorio Local a GitHub \ud83d\ude80","text":"<ol> <li>Crea un Nuevo Repositorio en GitHub:</li> <li>Ve a GitHub, inicia sesi\u00f3n y haz clic en New repository.</li> <li>Dale un nombre y elige si ser\u00e1 p\u00fablico o privado. \u00a1No olvides iniciar el repo sin un README si ya tienes uno local! \ud83d\udcdd</li> <li>Vincula tu Repositorio Local al Remoto:</li> </ol> <p>Copia la URL del repositorio que acabas de crear en GitHub y usa el siguiente comando:</p> <pre><code>git remote add origin https://github.com/usuario/nombre-del-repositorio.git\n</code></pre> <p>Nota: <code>origin</code> es el nombre del enlace al repositorio remoto, y puedes cambiarlo si lo prefieres.</p> <ol> <li>Empuja tus Cambios al Repositorio Remoto (Push):</li> </ol> <p>Finalmente, sube tus cambios confirmados a GitHub:</p> <pre><code>git push origin main\n</code></pre> <p>\u00a1Y listo! Tus archivos ahora est\u00e1n en GitHub, listos para ser compartidos con el mundo. \ud83c\udf0d</p>"},{"location":"clase-git/#6-como-funciona-todo-junto-diagrama-de-flujo","title":"6\ufe0f\u20e3 \u00a1C\u00f3mo Funciona Todo Junto! Diagrama de Flujo \ud83d\udea6","text":"<p>Aqu\u00ed tienes un diagrama visual de c\u00f3mo se ve el flujo de trabajo t\u00edpico en Git:</p> <ol> <li>Crear un Repositorio Local (<code>git init</code>)</li> <li>A\u00f1adir Archivos (<code>git add</code>)</li> <li>Confirmar Cambios (<code>git commit</code>)</li> <li>Conectar con GitHub (<code>git remote add origin</code>)</li> <li>Subir Cambios (<code>git push</code>)</li> </ol> <pre><code>(Trabaja en tu Proyecto)\n        |\n      git init\n        |\n    (A\u00f1adir archivos)\n        |\n      git add .\n        |\n   (Confirmar cambios)\n        |\n    git commit -m \"Mensaje\"\n        |\n(Conectar a GitHub Repo)\n        |\ngit remote add origin URL\n        |\n   (Subir cambios a GitHub)\n        |\n     git push origin main\n</code></pre>"},{"location":"clase-git/#7-github-pages-publica-tu-web","title":"7\ufe0f\u20e3 GitHub Pages: \u00a1Publica Tu Web! \ud83c\udf10","text":"<p>GitHub Pages es perfecto para publicar p\u00e1ginas web est\u00e1ticas directamente desde un repositorio de GitHub.</p> <ol> <li>Crea un Repositorio en GitHub.</li> <li>Clona el Repositorio en tu M\u00e1quina:    <pre><code>git clone https://github.com/usuario/nombre-del-repositorio.git\ncd nombre-del-repositorio\n</code></pre></li> <li>Crea tu Web B\u00e1sica (<code>index.html</code>) y s\u00fabela a GitHub:    <pre><code>git add .\ngit commit -m \"A\u00f1adir mi web\"\ngit push origin main\n</code></pre></li> <li>Configura GitHub Pages en la secci\u00f3n Settings de tu repo, \u00a1y listo!</li> </ol>"},{"location":"clase-git/#8-situaciones-comunes-y-soluciones","title":"8\ufe0f\u20e3 Situaciones Comunes y Soluciones \ud83d\udee0\ufe0f","text":""},{"location":"clase-git/#81-no-se-muestran-los-cambios-en-github-pages","title":"8.1. No se Muestran los Cambios en GitHub Pages \ud83e\udd14","text":"<ul> <li>Espera unos minutos y actualiza la p\u00e1gina.</li> </ul>"},{"location":"clase-git/#82-error-404-al-acceder-a-la-web","title":"8.2. Error 404 al Acceder a la Web \ud83d\udeab","text":"<ul> <li>Aseg\u00farate de tener un <code>index.html</code> en la ra\u00edz del repositorio.</li> </ul>"},{"location":"clase-git/#83-rechazo-de-git-push-por-conflictos","title":"8.3. Rechazo de <code>git push</code> por Conflictos \u26a0\ufe0f","text":"<ol> <li>Realiza <code>git pull origin main</code> para bajar los cambios.</li> <li>Resuelve conflictos y confirma los cambios con <code>git commit</code>.</li> <li>Intenta <code>git push</code> de nuevo.</li> </ol>"},{"location":"clase-git/#9-buenas-practicas","title":"9\ufe0f\u20e3 Buenas Pr\u00e1cticas \ud83d\ude80","text":"<ul> <li>Commits peque\u00f1os y frecuentes con mensajes claros.</li> <li>Usa ramas (<code>branches</code>) para desarrollar nuevas caracter\u00edsticas y fusi\u00f3nalas a <code>main</code>.</li> <li>Documenta tu c\u00f3digo y mant\u00e9n tu repo limpio y organizado. \ud83d\udcda</li> </ul>"},{"location":"clase-git/#conclusion","title":"\ud83d\udd1f Conclusi\u00f3n \ud83c\udf89","text":"<p>Git y GitHub son herramientas fundamentales para cualquier desarrollador. Con esta gu\u00eda, ahora sabes c\u00f3mo crear un repositorio local, conectarlo a GitHub, y publicar tu web con GitHub Pages. \u00a1Empieza a colaborar y compartir tu c\u00f3digo como un profesional! \ud83d\udcaa</p> <p>\u00a1Espero que esta gu\u00eda te haya dado una base s\u00f3lida y emocionante para comenzar a usar Git y GitHub! \ud83d\ude0a</p>"},{"location":"planificacion/","title":"Planificaci\u00f3n","text":"Tema Horas Descripci\u00f3n 1. Selecci\u00f3n de arquitecturas y herramientas de programaci\u00f3n 7 Introducci\u00f3n a los mecanismos de ejecuci\u00f3n, lenguajes de programaci\u00f3n, integraci\u00f3n con HTML, y herramientas de desarrollo. 2. Manejo de la sintaxis del lenguaje 28 Fundamentos del lenguaje: variables, tipos de datos, operadores, comentarios, y estructuras de control. 3. Utilizaci\u00f3n de los objetos predefinidos del lenguaje 28 Uso de objetos predefinidos, interacci\u00f3n con el navegador, y gesti\u00f3n de ventanas y cookies. 4. Programaci\u00f3n con \u201carrays\u201d, funciones y objetos definidos por el usuario 21 Trabajar con arrays, funciones y objetos definidos por el usuario. 5. Interacci\u00f3n con el usuario: eventos y formularios 14 Manejo de eventos y formularios para mejorar la interacci\u00f3n con el usuario. 6. Utilizaci\u00f3n del modelo de objetos del documento (DOM) 21 Manipulaci\u00f3n del DOM para interactuar y modificar el contenido del documento. 7. Utilizaci\u00f3n de mecanismos de comunicaci\u00f3n as\u00edncrona 21 T\u00e9cnicas para realizar comunicaciones as\u00edncronas y actualizaci\u00f3n din\u00e1mica del contenido. Tema Contenidos 1. Selecci\u00f3n de arquitecturas y herramientas de programaci\u00f3n - Mecanismos de ejecuci\u00f3n de c\u00f3digo en un navegador web.  - Capacidades y limitaciones de ejecuci\u00f3n.  - Lenguajes de programaci\u00f3n en entorno cliente. Caracter\u00edsticas.  - Tecnolog\u00edas y lenguajes asociados.  - Integraci\u00f3n del c\u00f3digo con las etiquetas HTML. C\u00f3digo en l\u00ednea y en ficheros externos.  - Entornos y herramientas de desarrollo de c\u00f3digo en el cliente web. 2. Manejo de la sintaxis del lenguaje - Variables. Declaraci\u00f3n. Inicializaci\u00f3n. \u00c1mbito.  - Tipos de datos. Conversi\u00f3n de tipos de datos.  - Asignaciones.  - Operadores.  - Comentarios al c\u00f3digo.  - Sentencias.  - Decisiones. Sentencias condicionales.  - Bucles. Tipos. Sentencias de ruptura de bucle. 3. Utilizaci\u00f3n de los objetos predefinidos del lenguaje - Utilizaci\u00f3n de objetos. Objetos nativos del lenguaje.  - Interacci\u00f3n con el navegador. Objetos predefinidos asociados.  - Generaci\u00f3n de texto y elementos HTML desde c\u00f3digo.  - Aplicaciones pr\u00e1cticas de los marcos.  - Gesti\u00f3n de la apariencia de la ventana.  - Creaci\u00f3n de nuevas ventanas. Comunicaci\u00f3n entre ventanas.  - Cookies. Definici\u00f3n, creaci\u00f3n, almacenamiento y recuperaci\u00f3n. 4. Programaci\u00f3n con \u201carrays\u201d, funciones y objetos definidos por el usuario - Funciones predefinidas del lenguaje.  - Llamadas a funciones. Definici\u00f3n de funciones.  - \u201cArrays\u201d. Definici\u00f3n, creaci\u00f3n y uso.  - Creaci\u00f3n de objetos.  - Definici\u00f3n de m\u00e9todos y propiedades. 5. Interacci\u00f3n con el usuario: eventos y formularios - Modelo de gesti\u00f3n de eventos.  - Utilizaci\u00f3n de formularios desde c\u00f3digo.  - Modificaci\u00f3n de apariencia y comportamiento.  - Validaci\u00f3n y env\u00edo.  - Expresiones regulares. 6. Utilizaci\u00f3n del modelo de objetos del documento (DOM) - El modelo de objetos del documento (DOM).  - Objetos del modelo. Propiedades y m\u00e9todos de los objetos.  - Acceso al documento desde c\u00f3digo.  - Programaci\u00f3n de eventos.  - Diferencias en las implementaciones del modelo. 7. Utilizaci\u00f3n de mecanismos de comunicaci\u00f3n as\u00edncrona - Mecanismos de comunicaci\u00f3n as\u00edncrona.  - Modificaci\u00f3n din\u00e1mica del documento utilizando comunicaci\u00f3n as\u00edncrona.  - Formatos para el env\u00edo y recepci\u00f3n de informaci\u00f3n.  - Librer\u00edas de actualizaci\u00f3n din\u00e1mica."},{"location":"actividades/simulaciondesarrollosoftware/","title":"Simulaci\u00f3n de Etapas de Desarrollo de Software","text":""},{"location":"actividades/simulaciondesarrollosoftware/#1-empresa-techzone-store","title":"1. Empresa: TechZone Store","text":"<ul> <li>Entrevista con cliente inicial</li> <li>Fases Resueltas</li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/entrevista_inicial/","title":"Entrevista inicial","text":""},{"location":"actividades/simulaciondesarrollosoftware/situacion1/entrevista_inicial/#techzone-store","title":"TechZone Store","text":"<p>Entrevista entre desarrollador y encargado de TechZone Store</p> <p>Desarrollador: Hola, soy el encargado de desarrollar su aplicaci\u00f3n. \u00bfPuede explicarme qu\u00e9 funcionalidades necesita para su tienda en l\u00ednea?</p> <p>Encargado: Claro, lo que quiero es que los clientes puedan ver f\u00e1cilmente todos los productos que vendemos, organizados en diferentes categor\u00edas. Quiero que puedan hacer clic en un producto, ver detalles como la descripci\u00f3n, el precio, y, si les interesa, poder a\u00f1adirlo a un carrito de compras.</p> <p>Desarrollador: Perfecto, entonces los usuarios deber\u00edan poder navegar por un cat\u00e1logo y tener un carrito de compras. \u00bfQu\u00e9 m\u00e1s le gustar\u00eda?</p> <p>Encargado: Quiero que puedan registrarse con su correo electr\u00f3nico o iniciar sesi\u00f3n si ya tienen cuenta. Una vez en su cuenta, deben poder revisar sus compras anteriores y actualizar su direcci\u00f3n de env\u00edo.</p> <p>Desarrollador: Entonces, adem\u00e1s de las compras, tendr\u00edamos un sistema de cuentas de usuario y un historial de pedidos. \u00bfC\u00f3mo le gustar\u00eda que fuera el proceso de pago?</p> <p>Encargado: Para el pago, me gustar\u00eda que puedan elegir entre diferentes m\u00e9todos, como tarjeta de cr\u00e9dito o PayPal. Tambi\u00e9n ser\u00eda \u00fatil que pudieran ver el costo del env\u00edo antes de pagar y tener una confirmaci\u00f3n clara de su compra.</p> <p>Desarrollador: Perfecto, ofrecer\u00edamos opciones de pago y calcular\u00edamos el env\u00edo. \u00bfHay algo m\u00e1s que considere importante?</p> <p>Encargado: S\u00ed, ser\u00eda genial que recibieran notificaciones por correo electr\u00f3nico cuando su pedido se haya enviado, y que puedan hacer un seguimiento de d\u00f3nde est\u00e1 su pedido en tiempo real.</p> <p>Desarrollador: Muy bien, entonces integrar\u00edamos una funcionalidad para notificaciones y seguimiento del env\u00edo. Con esta informaci\u00f3n ya puedo tener una idea clara de lo que necesita.</p> <p>Desarrollador: Ahora que tenemos claro qu\u00e9 funcionalidades quiere, hablemos sobre los plazos de entrega. \u00bfTiene alguna fecha l\u00edmite en mente para el lanzamiento de la tienda en l\u00ednea?</p> <p>Encargado: Nos gustar\u00eda lanzar la tienda en unos tres meses. Queremos estar listos para la temporada de compras navide\u00f1as, por lo que ser\u00eda ideal tener algo funcional y en marcha antes de noviembre.</p> <p>Desarrollador: Entendido, con tres meses de margen trabajaremos en una primera fase que incluya el cat\u00e1logo de productos, el carrito de compras y el sistema de pagos. Despu\u00e9s, podremos a\u00f1adir las funcionalidades m\u00e1s avanzadas, como las notificaciones y el seguimiento de env\u00edos.</p> <p>Encargado: Me parece bien, mientras podamos tener algo listo para los clientes antes de las fiestas.</p> <p>Desarrollador: Perfecto, con eso en mente ajustaremos el calendario de desarrollo para cumplir con ese plazo. \u00a1Muchas gracias por la informaci\u00f3n!</p>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/","title":"Fases Resueltas","text":""},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#planificacion-y-analisis-de-requisitos","title":"Planificaci\u00f3n y An\u00e1lisis de Requisitos","text":"Requisito Plazo de entrega Cat\u00e1logo de productos 2 semanas Carrito de compras 1 semana Registro e inicio de sesi\u00f3n de usuarios 2 semanas Historial de pedidos y gesti\u00f3n de cuentas 1 semana Proceso de pago y opciones (Stripe y Coinbase) 2 semanas Notificaciones por correo electr\u00f3nico 1 semana Seguimiento de pedidos en tiempo real 1 semana Rendimiento y escalabilidad En paralelo con la implementaci\u00f3n Seguridad (SSL, cifrado, protecci\u00f3n XSS/CSRF) En paralelo con la integraci\u00f3n de pagos Compatibilidad (dise\u00f1o responsivo) Durante todo el desarrollo Mantenimiento (c\u00f3digo limpio, plan de actualizaciones) Al final del proyecto Pruebas de rendimiento, seguridad y escalabilidad 2 semanas Pruebas de compatibilidad 1 semana Despliegue y puesta en producci\u00f3n 1 semana <p>Este cronograma distribuye el trabajo a lo largo de los 3 meses de desarrollo, con tiempos dedicados a cada uno de los requisitos esenciales.</p>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#definicion-de-requisitos","title":"Definici\u00f3n de Requisitos","text":""},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#requisitos-funcionales","title":"Requisitos Funcionales","text":"<ul> <li> <p>Cat\u00e1logo de productos: Los usuarios podr\u00e1n ver todos los productos organizados por categor\u00edas.</p> <ul> <li>Subfunci\u00f3n: Los usuarios pueden hacer clic en un producto para ver detalles como la descripci\u00f3n, el precio y caracter\u00edsticas adicionales.</li> </ul> </li> <li> <p>Carrito de compras: Los usuarios podr\u00e1n a\u00f1adir productos a un carrito de compras.</p> <ul> <li>Subfunci\u00f3n: El carrito debe poder actualizarse con cambios de cantidad y eliminaci\u00f3n de productos.</li> </ul> </li> <li> <p>Registro e inicio de sesi\u00f3n: Los usuarios podr\u00e1n registrarse con su correo electr\u00f3nico y gestionar su cuenta.</p> <ul> <li>Subfunci\u00f3n: Los usuarios podr\u00e1n iniciar sesi\u00f3n, revisar sus compras anteriores y actualizar informaci\u00f3n personal como la direcci\u00f3n de env\u00edo.</li> </ul> </li> <li> <p>Historial de compras: Los usuarios tendr\u00e1n acceso a un historial de pedidos anteriores, donde podr\u00e1n ver detalles de cada compra.</p> </li> <li> <p>Proceso de pago: Los usuarios podr\u00e1n pagar usando varios m\u00e9todos, como tarjeta de cr\u00e9dito o PayPal.</p> <ul> <li>Subfunci\u00f3n: Verificar el costo del env\u00edo antes del pago y confirmar el pedido.</li> </ul> </li> <li> <p>Notificaciones de pedidos: Los usuarios recibir\u00e1n notificaciones por correo electr\u00f3nico sobre el estado de su pedido, como confirmaci\u00f3n de compra y env\u00edo.</p> </li> <li> <p>Seguimiento de pedidos: Los usuarios podr\u00e1n seguir el estado de sus pedidos en tiempo real una vez que hayan sido enviados.</p> </li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#requisitos-no-funcionales","title":"Requisitos No Funcionales","text":"<ul> <li> <p>Usabilidad: La interfaz debe ser f\u00e1cil de usar e intuitiva, con una navegaci\u00f3n fluida entre las secciones del cat\u00e1logo, carrito de compras y gesti\u00f3n de cuentas.</p> </li> <li> <p>Rendimiento: La aplicaci\u00f3n debe poder soportar m\u00faltiples usuarios simult\u00e1neamente, manteniendo tiempos de respuesta r\u00e1pidos, especialmente durante el proceso de pago.</p> </li> <li> <p>Seguridad: El sistema debe manejar de manera segura los datos de los usuarios y sus transacciones, asegurando la privacidad de la informaci\u00f3n personal y los datos financieros.</p> </li> <li> <p>Disponibilidad: La plataforma debe estar disponible 24/7, con un m\u00ednimo de tiempo de inactividad durante actualizaciones o mantenimiento.</p> </li> <li> <p>Escalabilidad: El sistema debe ser capaz de manejar el crecimiento en la cantidad de productos, usuarios y transacciones sin degradar el rendimiento.</p> </li> <li> <p>Compatibilidad: La aplicaci\u00f3n debe ser accesible en distintos dispositivos (m\u00f3viles, tablets, desktops) y navegadores modernos.</p> </li> <li> <p>Mantenibilidad: El c\u00f3digo de la aplicaci\u00f3n debe estar bien documentado para facilitar futuras actualizaciones o correcciones.</p> </li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#diseno-de-la-arquitectura","title":"Dise\u00f1o de la Arquitectura","text":"<ul> <li>Frontend desarrollado en React para una interfaz \u00e1gil y responsiva, adaptada a m\u00f3viles y tablets.</li> <li>Backend con Node.js y una API REST para manejar operaciones de usuario, carrito y pagos.</li> <li>Base de datos MongoDB para gestionar los productos, usuarios y pedidos.</li> <li>Integraci\u00f3n de la pasarela de pago Stripe para tarjetas y Coinbase Commerce para criptomonedas.</li> </ul> <pre><code>graph TD\n    A[Usuario] --&gt;|Usa interfaz| B[Frontend React]\n    B --&gt;|Solicita datos| C[API REST Node.js]\n    C --&gt;|Consulta/Modifica| D[Base de datos MongoDB]\n\n    subgraph Backend\n        C\n        D\n    end\n\n    B --&gt;|Pagos| E[Stripe]\n    B --&gt;|Pagos con Criptomonedas| F[Coinbase Commerce]</code></pre>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#implementacion","title":"Implementaci\u00f3n","text":"<ul> <li>Configurar la API REST para gestionar el cat\u00e1logo de productos, el carrito y los pagos.</li> <li>Crear interfaces atractivas con React, incluyendo un sistema de recomendaci\u00f3n de productos.</li> <li>Integrar las opciones de pago y configurar los cupones de descuento en tiempo real.</li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#pruebas","title":"Pruebas","text":"<ul> <li>Realizar pruebas de carga con herramientas como JMeter para ver c\u00f3mo responde la plataforma bajo la demanda de m\u00faltiples usuarios.</li> <li>Testear todos los flujos de compra y la funcionalidad del carrito con diferentes dispositivos y navegadores.</li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#despliegue-y-mantenimiento","title":"Despliegue y Mantenimiento","text":"<ul> <li>Desplegar la aplicaci\u00f3n en AWS para asegurar escalabilidad, con balanceadores de carga y respaldo automatizado.</li> <li>Monitorear el rendimiento de la aplicaci\u00f3n usando CloudWatch, y establecer ciclos de actualizaci\u00f3n peri\u00f3dicos para mejoras y nuevos lanzamientos de productos.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/","title":"1. Desarrollo de Software","text":"<p>El desarrollo de software puede parecer simple en un inicio: \"Solo necesito una idea\", pensamos. Sin embargo, en cuanto comenzamos a trabajar en un proyecto, nos damos cuenta de que surgen cientos de inconvenientes. El principal problema suele ser la falta de organizaci\u00f3n. Cuando un proyecto requiere varias pantallas o m\u00f3dulos, terminamos perdiendo mucho tiempo haciendo ajustes sobre la marcha. </p> <p>Para evitar esto, es fundamental seguir una serie de fases de desarrollo que nos ayuden a minimizar estos problemas desde el principio. A continuaci\u00f3n, te presento las etapas clave del desarrollo de software, que suelen ser el pilar para cualquier proyecto bien gestionado.</p> <pre><code>graph TD\n    A[Planificaci\u00f3n y An\u00e1lisis de Requisitos] --&gt; B[Definici\u00f3n de Requisitos]\n    B --&gt; C[Dise\u00f1o de la Arquitectura]\n    C --&gt; D[Implementaci\u00f3n]\n    D --&gt; E[Pruebas]\n    E --&gt; F[Despliegue y Mantenimiento]\n\n    F --&gt;|Soporte y actualizaciones| A</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#etapas-del-desarrollo-de-software","title":"Etapas del Desarrollo de Software","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#1-planificacion-y-analisis-de-requisitos","title":"1. Planificaci\u00f3n y An\u00e1lisis de Requisitos","text":"<p>Aqu\u00ed es donde todo comienza. Junto al cliente, analizamos sus necesidades y definimos los objetivos del proyecto. Se trata de comprender a fondo qu\u00e9 funcionalidades debe tener el software y c\u00f3mo estas se alinean con las expectativas del usuario. Esta etapa es crucial porque una buena planificaci\u00f3n previene sorpresas y problemas m\u00e1s adelante.</p> <p>Si no hacemos este trabajo a conciencia, es probable que durante las revisiones posteriores, el cliente mencione caracter\u00edsticas que pensaba que ya estaban incluidas. Esto puede generar retrasos importantes en el proyecto.</p> <p>Ojo con los cambios</p> <p>Los clientes suelen ser caprichosos, y la mayor\u00eda no tiene conocimientos t\u00e9cnicos. A menudo, a mitad del proyecto o al ver el avance del producto, se les ocurre alguna nueva funcionalidad que desean implementar. Aqu\u00ed es donde debes negociar con ellos para obtener m\u00e1s tiempo si esa nueva idea se va a llevar a cabo.</p> <p>Aqu\u00ed tienes la secci\u00f3n revisada con la explicaci\u00f3n ampliada sobre los requisitos funcionales y no funcionales:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#2-definicion-de-requisitos","title":"2. Definici\u00f3n de Requisitos","text":"<p>Despu\u00e9s de entender lo que el cliente necesita, se procede a documentar los requisitos espec\u00edficos del sistema. Aqu\u00ed definimos dos tipos principales de requisitos que guiar\u00e1n el desarrollo del software:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#requisitos-funcionales","title":"Requisitos Funcionales","text":"<p>Definici\u00f3n: Los requisitos funcionales describen qu\u00e9 debe hacer el software. Estos requisitos especifican las funcionalidades, caracter\u00edsticas y comportamientos que el sistema debe implementar para cumplir con las necesidades del usuario. En otras palabras, definen las acciones que el sistema debe ser capaz de realizar.</p> <ul> <li>Ejemplos:<ul> <li>El sistema debe permitir a los usuarios registrarse con una direcci\u00f3n de correo electr\u00f3nico.</li> <li>El software debe permitir la b\u00fasqueda de productos por categor\u00eda y palabras clave.</li> <li>Los usuarios deben poder realizar pagos utilizando tarjetas de cr\u00e9dito y PayPal.</li> </ul> </li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#requisitos-no-funcionales","title":"Requisitos No Funcionales","text":"<p>Definici\u00f3n: Los requisitos no funcionales se centran en c\u00f3mo debe comportarse el software en t\u00e9rminos de rendimiento, seguridad, usabilidad y otras caracter\u00edsticas cualitativas. Estos requisitos son cruciales para garantizar que el sistema funcione de manera eficiente y satisfactoria en el entorno real.</p> <ul> <li>Ejemplos:<ul> <li>El sistema debe ser capaz de manejar al menos 1000 usuarios simult\u00e1neamente sin degradar el rendimiento.</li> <li>La aplicaci\u00f3n debe cumplir con los est\u00e1ndares de accesibilidad para usuarios con discapacidades.</li> <li>Las transacciones deben ser seguras y cumplir con las normativas de protecci\u00f3n de datos.</li> </ul> </li> </ul> <p>Esta documentaci\u00f3n de requisitos funcionales y no funcionales ser\u00e1 nuestra gu\u00eda durante el desarrollo para asegurarnos de que todos estemos alineados y que el software cumpla con las expectativas del cliente.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#3-diseno-de-la-arquitectura","title":"3. Dise\u00f1o de la Arquitectura","text":"<p>En esta fase, se define c\u00f3mo se va a organizar el software, qu\u00e9 componentes tendr\u00e1 y c\u00f3mo interactuar\u00e1n entre s\u00ed. Un buen dise\u00f1o de arquitectura facilita la implementaci\u00f3n y, m\u00e1s adelante, el mantenimiento. </p> <p>Eligiendo la arquitectura adecuada</p> <p>Existen muchas arquitecturas de software. Las m\u00e1s tradicionales, como las arquitecturas monol\u00edticas, han ido dando paso a arquitecturas de microservicios, donde cada parte del software se maneja de forma independiente. Esto facilita las modificaciones y la gesti\u00f3n de errores.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#4-implementacion","title":"4. Implementaci\u00f3n","text":"<p>Aqu\u00ed es donde realmente nos ponemos manos a la obra con la codificaci\u00f3n. Tomamos los requisitos y el dise\u00f1o que ya hemos definido y los convertimos en c\u00f3digo. Es fundamental seguir buenas pr\u00e1cticas de programaci\u00f3n para garantizar que el software sea de calidad y no presente problemas en el futuro.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#5-pruebas","title":"5. Pruebas","text":"<p>Una vez que hemos desarrollado el software, es el momento de probarlo. Las pruebas son esenciales para verificar que el producto cumple con los requisitos que definimos al principio. Incluyen pruebas unitarias, de integraci\u00f3n y de sistema, y nos ayudan a identificar y corregir errores antes de que el software sea lanzado al cliente.</p> <p>No escatimes en pruebas</p> <p>En algunos enfoques \u00e1giles, se minimiza la fase de pruebas, pero cuando el software crece en tama\u00f1o y complejidad, esta fase es crucial para evitar errores que nos costar\u00e1n mucho m\u00e1s tiempo arreglar despu\u00e9s.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#entornos-de-pruebas","title":"Entornos de Pruebas","text":"<p>Para una evaluaci\u00f3n efectiva del software, se utilizan varios entornos de pruebas, cada uno con un prop\u00f3sito espec\u00edfico:</p> <ol> <li> <p>Entorno de Desarrollo:</p> <ul> <li>Descripci\u00f3n: Espacio donde los desarrolladores crean y modifican el c\u00f3digo. Aqu\u00ed se realizan pruebas unitarias y b\u00e1sicas de integraci\u00f3n.</li> <li>Caracter\u00edsticas: Facilita el desarrollo y pruebas iniciales del c\u00f3digo.</li> </ul> </li> <li> <p>Entorno de Pruebas (QA):</p> <ul> <li>Descripci\u00f3n: Entorno dedicado a la ejecuci\u00f3n de pruebas exhaustivas del software, incluyendo pruebas de sistema y de aceptaci\u00f3n del usuario.</li> <li>Caracter\u00edsticas: Replica el entorno de producci\u00f3n, sin afectar a los usuarios finales.</li> </ul> </li> <li> <p>Entorno de Preproducci\u00f3n:</p> <ul> <li>Descripci\u00f3n: \u00daltimo entorno antes del despliegue en producci\u00f3n, usado para la validaci\u00f3n final del sistema en condiciones similares a producci\u00f3n.</li> <li>Caracter\u00edsticas: Permite pruebas finales de carga y rendimiento.</li> </ul> </li> <li> <p>Entorno de Producci\u00f3n:</p> <ul> <li>Descripci\u00f3n: El entorno real donde el software es utilizado por los usuarios finales.</li> <li>Caracter\u00edsticas: Los errores en este entorno pueden tener un impacto significativo, por lo que se deben hacer pruebas exhaustivas en los entornos anteriores.</li> </ul> </li> </ol>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#qa-quality-assurance","title":"QA (Quality Assurance)","text":"<p>El aseguramiento de la calidad (QA) es un proceso integral que asegura que el software cumpla con los est\u00e1ndares de calidad. Incluye:</p> <ul> <li>Prevenci\u00f3n de Defectos: Implementaci\u00f3n de pr\u00e1cticas y procesos para evitar errores.</li> <li>Pruebas Sistem\u00e1ticas: Ejecuci\u00f3n de pruebas para identificar y corregir defectos antes del lanzamiento.</li> <li>Documentaci\u00f3n y Gesti\u00f3n: Registro y seguimiento de defectos encontrados y su resoluci\u00f3n.</li> </ul> <p>QA es crucial no solo para encontrar errores, sino para garantizar que el software sea robusto y fiable desde el principio hasta el final del ciclo de desarrollo.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#6-despliegue-y-mantenimiento","title":"6. Despliegue y Mantenimiento","text":"<p>Finalmente, llega el momento de poner el software en funcionamiento en el entorno de producci\u00f3n. Esto puede incluir la instalaci\u00f3n del software en los sistemas del cliente y capacitar a los usuarios. Despu\u00e9s de la entrega, el mantenimiento es una actividad continua que abarca la correcci\u00f3n de errores y la actualizaci\u00f3n del sistema conforme el cliente lo requiera. En esta fase, el desarrollador suele seguir recibiendo una remuneraci\u00f3n por el soporte y las mejoras del software.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#metodologias-agiles","title":"Metodolog\u00edas \u00c1giles","text":"<p>Las metodolog\u00edas \u00e1giles son un conjunto de principios y pr\u00e1cticas para gestionar proyectos de desarrollo de software. Se centran en la colaboraci\u00f3n continua con el cliente, la flexibilidad para adaptarse a cambios, y la entrega frecuente de software funcional.</p> <p>Una de las metodolog\u00edas \u00e1giles m\u00e1s populares es Scrum, que organiza el desarrollo en ciclos cortos e iterativos llamados sprints.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#metodologia-scrum","title":"Metodolog\u00eda Scrum","text":"<p>Scrum es una metodolog\u00eda \u00e1gil que se enfoca en la entrega r\u00e1pida y continua de software funcional. Cada sprint suele durar entre 1 y 4 semanas, y en ese tiempo se desarrollan caracter\u00edsticas completas que pueden ser probadas y revisadas. El equipo de Scrum se organiza en tres roles principales:</p> Rol Descripci\u00f3n Product Owner Define la visi\u00f3n del producto y prioriza las caracter\u00edsticas. Scrum Master Facilita el proceso Scrum, asegurando que se siga el marco metodol\u00f3gico. Equipo de Desarrollo Desarrolla, prueba y entrega las funcionalidades acordadas en cada sprint."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#ciclo-scrum","title":"Ciclo Scrum","text":"<pre><code>graph TD\n    A[Product Backlog] --&gt; B[Sprint Planning]\n    B --&gt; C(Sprint Backlog)\n    C --&gt; D[Daily Scrum]\n    D --&gt; E(Incremento de Software)\n    E --&gt; F[Revisi\u00f3n del Sprint]\n    F --&gt; G[Retrospectiva]\n    G --&gt; B\n\n    subgraph Ciclo de un Sprint\n        C --&gt; E\n    end</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#fases-del-ciclo-scrum","title":"Fases del Ciclo Scrum:","text":"<ol> <li> <p>Product Backlog: Es una lista priorizada de todas las caracter\u00edsticas o tareas que el producto debe incluir. El Product Owner es el responsable de mantener y priorizar este backlog.</p> </li> <li> <p>Sprint Planning: El equipo selecciona las tareas m\u00e1s importantes del backlog que puedan completarse durante el sprint. Estas tareas forman el Sprint Backlog.</p> </li> <li> <p>Sprint: El equipo trabaja en las tareas seleccionadas durante el tiempo del sprint, realizando Daily Scrums (reuniones diarias de seguimiento) para discutir el progreso y resolver impedimentos.</p> </li> <li> <p>Incremento de Software: Al final del sprint, el equipo debe entregar un incremento de software funcional que puede ser revisado.</p> </li> <li> <p>Revisi\u00f3n del Sprint: El equipo muestra lo que se ha desarrollado durante el sprint a los interesados y obtiene feedback.</p> </li> <li> <p>Retrospectiva del Sprint: El equipo analiza lo que funcion\u00f3 bien y lo que no, y define acciones de mejora para futuros sprints.</p> </li> </ol>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#beneficios-de-scrum","title":"Beneficios de Scrum","text":"<ul> <li>Adaptabilidad: Permite cambios y ajustes en funci\u00f3n de los comentarios del cliente o del mercado.</li> <li>Colaboraci\u00f3n: Fomenta la interacci\u00f3n constante entre el equipo de desarrollo y los interesados.</li> <li>Entrega r\u00e1pida: Los sprints cortos garantizan entregas frecuentes de software funcional.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#sprints","title":"Sprints","text":"<p>Cada sprint tiene una duraci\u00f3n fija y produce un resultado que se puede mostrar al cliente. Esto asegura que se ve progreso de manera constante y que el producto se desarrolla de manera iterativa. El equipo tiene la libertad de ajustar la carga de trabajo en funci\u00f3n del feedback recibido al final de cada sprint.</p> <ul> <li>Duraci\u00f3n: De 1 a 4 semanas.</li> <li>Objetivo: Completar una serie de tareas del Sprint Backlog que tengan valor para el usuario final.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#ciclo-de-retroalimentacion-continua","title":"Ciclo de Retroalimentaci\u00f3n Continua","text":"<p>Scrum est\u00e1 dise\u00f1ado para recibir y procesar retroalimentaci\u00f3n de forma continua, lo que permite mejorar tanto el producto como el proceso de desarrollo. La retroalimentaci\u00f3n constante durante y al final de cada sprint ayuda a asegurar que el software se ajuste a las necesidades del cliente.</p> <p>Scrum es ideal para proyectos donde los requisitos no est\u00e1n completamente definidos desde el principio y donde se espera que haya muchos cambios a lo largo del tiempo.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/2tiposdeaplicaciones/","title":"2. Tipos de aplicaciones","text":"<p>En el desarrollo web, las aplicaciones se pueden clasificar en varios tipos seg\u00fan su funcionalidad y el entorno en el que operan. Cada tipo tiene caracter\u00edsticas espec\u00edficas y se utiliza en diferentes contextos para satisfacer diversas necesidades.</p> Tipo de Aplicaci\u00f3n Descripci\u00f3n Ejemplos Comunes Aplicaciones Web Aplicaciones dise\u00f1adas para ser accedidas a trav\u00e9s de un navegador web. Estas aplicaciones requieren conexi\u00f3n a Internet y son accesibles desde cualquier dispositivo con un navegador. Ofrecen versatilidad y pueden adaptarse a diferentes tama\u00f1os de pantalla. Google Docs, Facebook, Amazon Aplicaciones Web Progresivas (PWA) Aplicaciones web que ofrecen una experiencia similar a la de las aplicaciones nativas en dispositivos m\u00f3viles. Pueden funcionar offline y se pueden instalar en la pantalla de inicio del dispositivo. Twitter Lite, Pinterest, Starbucks Aplicaciones de Una P\u00e1gina (SPA) Aplicaciones web que cargan una sola p\u00e1gina HTML y actualizan el contenido din\u00e1micamente sin recargar la p\u00e1gina completa. Mejoran la experiencia del usuario al ofrecer una navegaci\u00f3n m\u00e1s fluida. Gmail, Netflix, Trello Aplicaciones M\u00f3viles Web Aplicaciones optimizadas para dispositivos m\u00f3viles, accesibles a trav\u00e9s del navegador del dispositivo. Est\u00e1n dise\u00f1adas para adaptarse a pantallas m\u00e1s peque\u00f1as y pueden ofrecer una experiencia de usuario optimizada. eBay, Wikipedia, LinkedIn Aplicaciones de Backend Aplicaciones que operan en el servidor y gestionan la l\u00f3gica del negocio, el almacenamiento de datos y la autenticaci\u00f3n de usuarios. Se comunican con las aplicaciones front-end a trav\u00e9s de APIs. Firebase, AWS Lambda, Stripe Frameworks y Bibliotecas de Desarrollo Herramientas y conjuntos de c\u00f3digo que facilitan el desarrollo web al proporcionar funcionalidades predefinidas y estructuras de c\u00f3digo. Ayudan a acelerar el proceso de desarrollo y asegurar la calidad del software. React, Angular, Vue.js, Bootstrap <p>Cada tipo de aplicaci\u00f3n tiene caracter\u00edsticas distintas que influyen en su dise\u00f1o y desarrollo, permitiendo a los desarrolladores web elegir la mejor opci\u00f3n seg\u00fan las necesidades espec\u00edficas del proyecto y del usuario final.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/","title":"3. Desarrollo de aplicaciones Web","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#desarrollo-de-aplicaciones-web","title":"Desarrollo de Aplicaciones Web","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#navegadores","title":"Navegadores","text":"<p>Los navegadores son software que permite a los usuarios acceder y visualizar contenido en la web. Algunos de los navegadores m\u00e1s populares son Google Chrome, Mozilla Firefox, Safari, Microsoft Edge y Opera. Cada navegador tiene sus propias caracter\u00edsticas y motores de renderizado, lo que puede afectar la forma en que se muestra el contenido web y c\u00f3mo se ejecutan los scripts.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#funcionamiento-de-los-navegadores-protocolo-http","title":"Funcionamiento de los Navegadores. Protocolo HTTP","text":"<p>El funcionamiento de un navegador se basa en el Protocolo de Transferencia de Hipertexto (HTTP), que es el protocolo fundamental para la comunicaci\u00f3n en la web. Cuando un usuario ingresa una URL o hace clic en un enlace, el navegador env\u00eda una petici\u00f3n HTTP al servidor que aloja el recurso solicitado. Esta petici\u00f3n incluye informaci\u00f3n sobre el tipo de recurso que se desea obtener y el navegador que la est\u00e1 realizando. El servidor, a su vez, responde con el contenido solicitado, que puede ser un documento HTML, im\u00e1genes, o archivos CSS y JavaScript.</p> <pre><code>sequenceDiagram\n    participant User as Usuario\n    participant Browser as Navegador\n    participant Server as Servidor\n\n    User-&gt;&gt;Browser: Ingresa URL\n    Browser-&gt;&gt;Server: Solicitud HTTP (GET)\n    Server--&gt;&gt;Browser: Respuesta HTTP (HTML, CSS, JS)\n    Browser-&gt;&gt;Browser: Renderiza contenido\n    Browser--&gt;&gt;User: Muestra p\u00e1gina web</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#arquitectura-cliente-y-servidor","title":"Arquitectura Cliente y Servidor","text":"<p>La arquitectura de las aplicaciones web se basa en un modelo cliente-servidor. En este modelo, el cliente (generalmente un navegador web) realiza solicitudes al servidor, que es donde se almacenan y procesan los datos. El servidor responde a las solicitudes del cliente enviando los recursos necesarios. Esta interacci\u00f3n permite que los usuarios accedan a aplicaciones y servicios en l\u00ednea desde cualquier lugar con conexi\u00f3n a Internet.</p> <pre><code>graph TD\n    A[Cliente] --&gt;|Solicita recurso| B[Servidor]\n    B --&gt;|Env\u00eda recurso| A\n    B --&gt;|Accede a base de datos| C[Base de Datos]\n    C --&gt;|Devuelve datos| B</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#interprete-de-codigo-web","title":"Int\u00e9rprete de C\u00f3digo Web","text":"<p>Los navegadores incluyen int\u00e9rpretes que procesan diferentes tipos de c\u00f3digo. Por ejemplo, el motor de renderizado interpreta el HTML y CSS para mostrar la p\u00e1gina, mientras que el int\u00e9rprete de JavaScript ejecuta scripts que pueden modificar el contenido de la p\u00e1gina de manera din\u00e1mica. Cada navegador utiliza diferentes motores e int\u00e9rpretes; por ejemplo, Chrome utiliza el motor Blink y el int\u00e9rprete V8, mientras que Firefox utiliza Gecko y SpiderMonkey.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#todos-los-navegadores-son-iguales","title":"\u00bfTodos los Navegadores son Iguales?","text":"<p>No, no todos los navegadores son iguales. Aunque todos cumplen la funci\u00f3n b\u00e1sica de mostrar contenido web, pueden diferir en su rendimiento, compatibilidad con est\u00e1ndares web, y caracter\u00edsticas adicionales. Algunos navegadores pueden manejar ciertas tecnolog\u00edas web de manera m\u00e1s eficiente que otros, lo que puede afectar la experiencia del usuario. Adem\u00e1s, la forma en que cada navegador interpreta y ejecuta el c\u00f3digo puede variar, lo que puede llevar a diferencias en la visualizaci\u00f3n de las p\u00e1ginas web.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#tecnologias-de-desarrollo-web","title":"Tecnolog\u00edas de Desarrollo Web","text":"Tecnolog\u00eda Descripci\u00f3n Logo HTML HTML (HyperText Markup Language) es el lenguaje de marcado est\u00e1ndar para crear p\u00e1ginas web. Permite estructurar el contenido en la web mediante el uso de etiquetas que definen elementos como encabezados, p\u00e1rrafos, enlaces, im\u00e1genes, y m\u00e1s. Es fundamental para cualquier desarrollo web, ya que proporciona la base sobre la cual se construyen las aplicaciones y sitios web. CSS CSS (Cascading Style Sheets) es el lenguaje utilizado para describir la presentaci\u00f3n de un documento HTML. Permite aplicar estilos a los elementos HTML, como colores, fuentes, m\u00e1rgenes y dise\u00f1o en general. CSS es esencial para crear interfaces atractivas y responsivas que mejoren la experiencia del usuario. JavaScript JavaScript es un lenguaje de programaci\u00f3n que permite implementar funcionalidades complejas en las p\u00e1ginas web. Con JavaScript, se pueden crear interacciones din\u00e1micas, manipular el DOM (Document Object Model), y realizar solicitudes as\u00edncronas a servidores, lo que permite la creaci\u00f3n de aplicaciones web m\u00e1s interactivas y din\u00e1micas."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#frameworks-de-desarrollo-del-lado-cliente","title":"Frameworks de desarrollo del lado Cliente","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#diseno","title":"Dise\u00f1o","text":"Framework Descripci\u00f3n Logo Bootstrap Es un framework CSS que proporciona un conjunto de herramientas predefinidas para el dise\u00f1o web responsivo. Facilita la creaci\u00f3n de interfaces atractivas y adaptables a diferentes dispositivos. Tailwind CSS Es un framework CSS de utilidad que permite a los desarrolladores crear dise\u00f1os personalizados de manera r\u00e1pida y eficiente, utilizando clases predefinidas."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#desarrollo","title":"Desarrollo","text":"Tecnolog\u00eda Descripci\u00f3n Logo Angular Un framework de JavaScript desarrollado por Google, ideal para construir aplicaciones web de una sola p\u00e1gina (SPA). Proporciona una estructura robusta y herramientas para el desarrollo de aplicaciones complejas. React Una biblioteca de JavaScript para construir interfaces de usuario, desarrollada por Facebook. Es muy popular por su enfoque en componentes reutilizables y su eficiencia en la actualizaci\u00f3n del DOM. Vue.js Un framework progresivo para construir interfaces de usuario. Es conocido por su simplicidad y flexibilidad, permitiendo a los desarrolladores adoptar sus caracter\u00edsticas de manera gradual."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/","title":"4. Entorno de desarrollo","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#entorno-de-desarrollo","title":"Entorno de Desarrollo","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#control-de-versiones","title":"Control de Versiones","text":"<p>Git es un sistema de control de versiones distribuido que permite a los desarrolladores rastrear, gestionar y revertir cambios en el c\u00f3digo fuente a lo largo del tiempo. Es una herramienta fundamental para la colaboraci\u00f3n eficiente en proyectos de software, ya que permite que varios desarrolladores trabajen simult\u00e1neamente sin conflictos. Git tambi\u00e9n facilita la creaci\u00f3n de ramas (branches) para desarrollar nuevas caracter\u00edsticas de manera independiente, permitiendo luego fusionarlas (merge) de manera controlada.</p> <p>Git permite a los desarrolladores tener su propia copia local del c\u00f3digo, trabajar en diferentes caracter\u00edsticas o soluciones de errores sin interferir con el trabajo de otros. Una vez finalizados los cambios, pueden ser integrados en la rama principal (generalmente \"main\" o \"master\"). Esto asegura que el desarrollo sea modular y escalable.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#repositorios-remotos","title":"Repositorios remotos","text":"<p>Los repositorios remotos permiten almacenar y gestionar el c\u00f3digo de manera centralizada en servidores remotos o en la nube. Estas plataformas no solo proporcionan almacenamiento, sino tambi\u00e9n herramientas colaborativas como control de permisos, revisiones de c\u00f3digo (pull requests) y CI/CD (Integraci\u00f3n y Entrega Continua). Algunas de las plataformas m\u00e1s populares incluyen:</p> Plataforma Descripci\u00f3n Logo GitHub GitHub es una de las plataformas m\u00e1s populares para alojar repositorios Git. Proporciona caracter\u00edsticas como control de versiones, colaboraci\u00f3n, gesti\u00f3n de proyectos y CI/CD. Permite repositorios p\u00fablicos y privados, con una interfaz amigable para equipos de todo el mundo. GitLab GitLab es una soluci\u00f3n integral que ofrece alojamiento de repositorios Git, CI/CD y herramientas de gesti\u00f3n de proyectos. Su c\u00f3digo abierto y la posibilidad de instalarlo en servidores privados lo hacen popular en grandes organizaciones. Bitbucket Bitbucket permite almacenar repositorios de Git (y Mercurial) en la nube, con un enfoque fuerte en la integraci\u00f3n con Jira y otras herramientas de Atlassian. Ideal para equipos que ya utilizan la suite de Atlassian. Ofrece tanto repositorios privados como p\u00fablicos. Azure Repos Parte de Azure DevOps, Azure Repos ofrece alojamiento de repositorios Git con integraci\u00f3n directa con otros servicios de Microsoft, ideal para empresas que ya utilizan el ecosistema Azure. Permite la automatizaci\u00f3n de flujos de trabajo mediante pipelines CI/CD. AWS CodeCommit AWS CodeCommit es un servicio de control de versiones privado y seguro que se integra con otras herramientas de AWS. Ofrece una soluci\u00f3n completamente gestionada y escalable, lo que lo convierte en una opci\u00f3n popular entre empresas que ya operan en la nube de Amazon."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#ciclo-de-trabajo-con-git","title":"Ciclo de trabajo con Git","text":"<pre><code>sequenceDiagram\n    participant WD as Working Directory\n    participant SA as Staging Area\n    participant LR as Local Repository\n    participant RR as Remote Repository\n\n    WD-&gt;&gt;WD: Editar archivos\n    WD-&gt;&gt;SA: git add\n    SA-&gt;&gt;LR: git commit\n    LR-&gt;&gt;RR: git push\n    RR--&gt;&gt;LR: git pull\n    LR-&gt;&gt;WD: git checkout\n    WD-&gt;&gt;WD: git status</code></pre> <p>Este diagrama es claro y muestra el flujo de trabajo de Git, desde que haces cambios en el Working Directory, los a\u00f1ades al Staging Area, los confirmas en el Local Repository, y finalmente los subes al Remote Repository para colaborar con otros.</p> Etapa Descripci\u00f3n Comando importante Working Directory Zona donde trabajas en tus archivos localmente. Aqu\u00ed editas el c\u00f3digo y haces los cambios. <code>git status</code>: Revisar el estado de los archivos (modificados, nuevos o eliminados). Staging Area Los archivozzzzs que deseas incluir en el pr\u00f3ximo commit son a\u00f1adidos aqu\u00ed mediante el comando <code>git add</code>. <code>git add [archivo]</code>: Mover archivos al \u00e1rea de preparaci\u00f3n. Local Repository Una vez que los archivos est\u00e1n en el Staging Area, los confirmas al repositorio local con <code>git commit</code>. Esto guarda el historial de cambios localmente. <code>git commit -m \"mensaje del commit\"</code>: Confirmar los cambios en el repositorio local. Remote Repository Despu\u00e9s de confirmar tus cambios localmente, puedes sincronizarlos con un repositorio remoto (como GitHub, GitLab o Bitbucket) mediante el comando <code>git push</code>. <code>git push</code>: Enviar los cambios al repositorio remoto. git pull Trae los cambios realizados en el repositorio remoto hacia el repositorio local, manteniendo tu trabajo sincronizado con el de otros colaboradores. <code>git pull</code>: Obtener y fusionar cambios del repositorio remoto. git checkout Cambia entre ramas o versiones del c\u00f3digo, llevando el contenido de la rama seleccionada a tu Working Directory. <code>git checkout [rama]</code>: Cambiar a otra rama del c\u00f3digo."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#ides","title":"IDEs","text":"<p>Los IDEs (Entornos de Desarrollo Integrados) son herramientas que proporcionan un entorno completo para el desarrollo de software. Adem\u00e1s de un editor de c\u00f3digo, muchos incluyen herramientas para depurar, gestionar versiones y ejecutar proyectos. A continuaci\u00f3n, se enumeran algunos de los principales IDEs utilizados en desarrollo web y otras \u00e1reas:</p> IDE Descripci\u00f3n Popularidad Costo Logo Visual Studio Code Un editor de c\u00f3digo ligero pero potente de Microsoft, con soporte para m\u00faltiples lenguajes de programaci\u00f3n mediante extensiones. Incluye depurador, terminal integrado y soporte para Git. Muy alto, uno de los m\u00e1s populares Gratuito WebStorm IDE especializado en JavaScript y tecnolog\u00edas web modernas, desarrollado por JetBrains. Ofrece soporte avanzado para frameworks como React, Angular y Node.js. Alto, muy popular entre desarrolladores web Pago (con prueba gratuita) o Versi\u00f3n Community Sublime Text Un editor de texto muy r\u00e1pido y minimalista que puede ser ampliado con m\u00faltiples extensiones para soportar diversos lenguajes de programaci\u00f3n. Ideal para desarrolladores que prefieren un editor ligero. Alto, muy usado en desarrollo ligero Pago (con prueba gratuita) o Versi\u00f3n Community Atom Editor de c\u00f3digo de GitHub, conocido por su alta personalizaci\u00f3n y su fuerte integraci\u00f3n con Git. Es una opci\u00f3n flexible para desarrolladores web y cuenta con una gran variedad de extensiones. Moderado, popular entre desarrolladores de GitHub Gratuito"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/","title":"5. Integrar c\u00f3digo JavaScript en HTML","text":"<p>Integrar c\u00f3digo JavaScript en un documento HTML es una pr\u00e1ctica fundamental en el desarrollo web. JavaScript se utiliza para hacer que las p\u00e1ginas web sean interactivas y din\u00e1micas. A continuaci\u00f3n, se detalla c\u00f3mo se puede integrar JavaScript en HTML, abordando los m\u00e9todos m\u00e1s comunes y sus particularidades.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#formas-de-integrar-codigo-javascript","title":"Formas de integrar c\u00f3digo JavaScript","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#1-codigo-javascript-en-linea","title":"1. C\u00f3digo JavaScript en L\u00ednea","text":"<p>Puedes incluir c\u00f3digo JavaScript directamente dentro de una etiqueta HTML usando el atributo <code>onclick</code>, <code>onmouseover</code>, o cualquier otro evento. Este m\u00e9todo se utiliza para peque\u00f1os fragmentos de c\u00f3digo o para manejar eventos espec\u00edficos.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;JavaScript en L\u00ednea&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button onclick=\"alert('\u00a1Hola, mundo!')\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En este ejemplo, el c\u00f3digo JavaScript <code>alert('\u00a1Hola, mundo!')</code> se ejecutar\u00e1 cuando el usuario haga clic en el bot\u00f3n.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#2-codigo-javascript-interno","title":"2. C\u00f3digo JavaScript Interno","text":"<p>Para incluir JavaScript directamente en el archivo HTML pero en una secci\u00f3n separada, utiliza la etiqueta <code>&lt;script&gt;</code> en la secci\u00f3n <code>&lt;head&gt;</code> o al final del <code>&lt;body&gt;</code>. Este m\u00e9todo es \u00fatil para scripts que son espec\u00edficos de una sola p\u00e1gina.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;JavaScript Interno&lt;/title&gt;\n    &lt;script&gt;\n        function saludar() {\n            alert('\u00a1Hola, mundo!');\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button onclick=\"saludar()\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En este caso, el script definido dentro de la etiqueta <code>&lt;script&gt;</code> puede ser llamado desde el HTML. Este enfoque permite que el c\u00f3digo JavaScript sea m\u00e1s organizado y reutilizable dentro de la misma p\u00e1gina.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#3-codigo-javascript-externo","title":"3. C\u00f3digo JavaScript Externo","text":"<p>Para proyectos m\u00e1s grandes y para mantener el c\u00f3digo HTML m\u00e1s limpio, es recomendable usar archivos JavaScript externos. El c\u00f3digo JavaScript se coloca en un archivo separado con extensi\u00f3n <code>.js</code>, que luego se enlaza en el HTML usando la etiqueta <code>&lt;script&gt;</code> con el atributo <code>src</code>.</p> <p>Ejemplo de archivo HTML (<code>index.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;JavaScript Externo&lt;/title&gt;\n    &lt;script src=\"script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"myButton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ejemplo de archivo JavaScript (<code>script.js</code>):</p> <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n    document.getElementById('myButton').addEventListener('click', () =&gt; {\n        alert('\u00a1Hola, mundo!');\n    });\n});\n</code></pre> <p>En este ejemplo, el archivo <code>script.js</code> contiene el c\u00f3digo JavaScript, y se enlaza a trav\u00e9s del atributo <code>src</code> en la etiqueta <code>&lt;script&gt;</code>. El atributo <code>defer</code> asegura que el script se ejecute solo despu\u00e9s de que el documento HTML se haya cargado completamente.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#4-buenas-practicas","title":"4. Buenas Pr\u00e1cticas","text":"<ul> <li>Separaci\u00f3n de Responsabilidades: Mant\u00e9n el c\u00f3digo JavaScript en archivos separados para facilitar la organizaci\u00f3n y mantenimiento.</li> <li>Carga Diferida (<code>defer</code> y <code>async</code>): Utiliza los atributos <code>defer</code> o <code>async</code> en la etiqueta <code>&lt;script&gt;</code> para controlar la carga y ejecuci\u00f3n del JavaScript sin bloquear la carga de la p\u00e1gina.</li> <li><code>defer</code>: El script se ejecuta en el orden en que aparece en el HTML despu\u00e9s de que el documento se haya cargado.</li> <li><code>async</code>: El script se descarga en paralelo con el HTML y se ejecuta tan pronto como est\u00e9 disponible.</li> <li>Evita el JavaScript en L\u00ednea: Para proyectos m\u00e1s grandes, es preferible evitar el JavaScript en l\u00ednea por razones de seguridad y mantenimiento.</li> </ul> <p>Integrar JavaScript en HTML puede mejorar significativamente la interactividad y funcionalidad de una p\u00e1gina web. Utilizar estos m\u00e9todos y buenas pr\u00e1cticas ayudar\u00e1 a mantener tu c\u00f3digo organizado y eficiente.</p> <p>Claro, aqu\u00ed tienes un ejemplo de c\u00f3mo usar los atributos <code>async</code> y <code>defer</code> en la etiqueta <code>&lt;script&gt;</code> para controlar la carga y ejecuci\u00f3n de scripts en un documento HTML:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#defer-y-async","title":"Defer y Async","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#1-uso-de-defer","title":"1. Uso de <code>defer</code>","text":"<p>El atributo <code>defer</code> se utiliza para garantizar que el script se ejecute en el orden en que aparece en el HTML, pero solo despu\u00e9s de que el documento HTML haya sido completamente cargado. Esto es \u00fatil para scripts que necesitan interactuar con el DOM.</p> <p>Ejemplo con <code>defer</code>:</p> <p>Archivo HTML (<code>index.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Uso de defer&lt;/title&gt;\n    &lt;!-- Cargar el script con defer --&gt;\n    &lt;script src=\"deferred-script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hola Mundo&lt;/h1&gt;\n    &lt;button id=\"deferButton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Archivo JavaScript (<code>deferred-script.js</code>):</p> <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n    document.getElementById('deferButton').addEventListener('click', () =&gt; {\n        alert('\u00a1Bot\u00f3n con defer clicado!');\n    });\n});\n</code></pre> <p>En este ejemplo, el script <code>deferred-script.js</code> se cargar\u00e1 en el orden en que aparece en el HTML, pero solo despu\u00e9s de que el documento se haya cargado completamente. Esto asegura que el bot\u00f3n exista en el DOM antes de que el script intente a\u00f1adir un manejador de eventos.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#2-uso-de-async","title":"2. Uso de <code>async</code>","text":"<p>El atributo <code>async</code> se utiliza para cargar el script en paralelo con la carga del HTML y ejecutarlo tan pronto como est\u00e9 disponible. Esto es \u00fatil para scripts que no dependen del DOM o de otros scripts y pueden ejecutarse de forma independiente.</p> <p>Ejemplo con <code>async</code>:</p> <p>*Archivo HTML (<code>index.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Uso de async&lt;/title&gt;\n    &lt;!-- Cargar el script con async --&gt;\n    &lt;script src=\"async-script.js\" async&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hola Mundo&lt;/h1&gt;\n    &lt;button id=\"asyncButton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Archivo JavaScript (<code>async-script.js</code>):</p> <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n    // Este script se ejecutar\u00e1 tan pronto como est\u00e9 disponible\n    alert('\u00a1Script con async ejecutado!');\n});\n</code></pre> <p>En este caso, el script <code>async-script.js</code> se cargar\u00e1 de forma as\u00edncrona y se ejecutar\u00e1 tan pronto como est\u00e9 disponible, sin esperar a que el documento se haya cargado completamente. Esto puede ser adecuado para scripts que no afectan a la estructura del DOM o que no dependen de otros scripts.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#comparacion-de-async-y-defer","title":"Comparaci\u00f3n de <code>async</code> y <code>defer</code>","text":"Atributo Caracter\u00edsticas Uso Ideal <code>defer</code> - Carga el script en paralelo con el HTML.- Ejecuta el script en el orden en que aparece en el HTML despu\u00e9s de que el documento se haya cargado completamente. Ideal para scripts que interact\u00faan con el DOM. <code>async</code> - Carga el script en paralelo con el HTML.- Ejecuta el script tan pronto como est\u00e9 disponible, sin esperar a que el HTML se haya cargado completamente. Ideal para scripts independientes que no dependen del DOM ni de otros scripts. <p>Utilizar <code>defer</code> y <code>async</code> correctamente puede ayudar a optimizar la carga de tu p\u00e1gina web y mejorar la experiencia del usuario al garantizar que los scripts no bloqueen el renderizado de la p\u00e1gina.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/","title":"Recursos y Preguntas Frecuentes","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#recursos","title":"Recursos","text":"<p>A continuaci\u00f3n, te dejo una lista de recursos \u00fatiles para profundizar en los temas clave de este m\u00f3dulo:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#entornos-y-herramientas-de-desarrollo-de-codigo-en-el-cliente-web","title":"Entornos y herramientas de desarrollo de c\u00f3digo en el cliente web","text":"<ul> <li>Visual Studio Code: Uno de los entornos de desarrollo m\u00e1s utilizados para trabajar con JavaScript y HTML.</li> <li>CodePen: Plataforma para probar c\u00f3digo en HTML, CSS y JavaScript en tiempo real.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#preguntas-frecuentes-faq","title":"Preguntas Frecuentes (FAQ)","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#1-que-es-un-mecanismo-de-ejecucion-de-codigo-en-un-navegador-web","title":"1. \u00bfQu\u00e9 es un mecanismo de ejecuci\u00f3n de c\u00f3digo en un navegador web?","text":"<p>El mecanismo de ejecuci\u00f3n de c\u00f3digo se refiere a c\u00f3mo los navegadores interpretan y ejecutan el c\u00f3digo, como JavaScript, para crear interactividad en una p\u00e1gina web. Esto incluye el proceso de descarga, an\u00e1lisis y ejecuci\u00f3n de scripts.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#2-cuales-son-las-limitaciones-de-ejecutar-codigo-en-el-navegador","title":"2. \u00bfCu\u00e1les son las limitaciones de ejecutar c\u00f3digo en el navegador?","text":"<p>El c\u00f3digo que se ejecuta en el navegador est\u00e1 limitado por el entorno del cliente, es decir, depende del rendimiento del dispositivo del usuario y de la compatibilidad del navegador. No puede acceder directamente a los recursos del sistema operativo por razones de seguridad.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#3-que-lenguajes-de-programacion-se-utilizan-comunmente-en-el-entorno-cliente","title":"3. \u00bfQu\u00e9 lenguajes de programaci\u00f3n se utilizan com\u00fanmente en el entorno cliente?","text":"<p>JavaScript es el lenguaje m\u00e1s com\u00fanmente utilizado en el lado del cliente. Adem\u00e1s, tecnolog\u00edas como HTML y CSS son fundamentales para el desarrollo web en el cliente, ya que definen la estructura y el estilo del contenido.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#4-cual-es-la-diferencia-entre-un-script-en-linea-y-un-script-externo","title":"4. \u00bfCu\u00e1l es la diferencia entre un script en l\u00ednea y un script externo?","text":"<ul> <li>Un script en l\u00ednea es el c\u00f3digo JavaScript que se incluye directamente en el archivo HTML mediante la etiqueta <code>&lt;script&gt;</code>.</li> <li>Un script externo se aloja en un archivo separado con la extensi\u00f3n <code>.js</code> y se referencia en el HTML con <code>&lt;script src=\"archivo.js\"&gt;&lt;/script&gt;</code>.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#5-que-ventajas-tiene-utilizar-frameworks-como-react-o-angular","title":"5. \u00bfQu\u00e9 ventajas tiene utilizar frameworks como React o Angular?","text":"<p>Los frameworks de JavaScript como React y Angular simplifican el desarrollo de aplicaciones web complejas. Ofrecen herramientas y bibliotecas que facilitan la creaci\u00f3n de componentes reutilizables, optimizan el rendimiento y mejoran la organizaci\u00f3n del c\u00f3digo.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#6-cuales-son-los-entornos-de-desarrollo-mas-recomendados-para-trabajar-en-el-cliente-web","title":"6. \u00bfCu\u00e1les son los entornos de desarrollo m\u00e1s recomendados para trabajar en el cliente web?","text":"<p>Algunas de las mejores herramientas para el desarrollo en el cliente web son Visual Studio Code (un editor de c\u00f3digo potente y con muchas extensiones) y CodePen (una plataforma en l\u00ednea para experimentar con HTML, CSS y JavaScript).</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#7-que-es-la-etiqueta-defer-y-como-se-utiliza-en-los-scripts","title":"7. \u00bfQu\u00e9 es la etiqueta <code>defer</code> y c\u00f3mo se utiliza en los scripts?","text":"<p>La etiqueta <code>defer</code> permite que el navegador descargue el script mientras contin\u00faa procesando el HTML. El script se ejecuta solo despu\u00e9s de que el documento HTML est\u00e9 completamente cargado. Esto es \u00fatil cuando tu script depende del contenido HTML.</p> <pre><code>&lt;script src=\"script.js\" defer&gt;&lt;/script&gt;\n</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#8-cuando-deberia-usar-async-en-lugar-de-defer","title":"8. \u00bfCu\u00e1ndo deber\u00eda usar <code>async</code> en lugar de <code>defer</code>?","text":"<p><code>async</code> es \u00fatil cuando el script no depende del DOM ni de otros scripts. Con <code>async</code>, el script se ejecuta tan pronto como est\u00e9 disponible, sin esperar a que el HTML termine de cargarse.</p> <pre><code>&lt;script src=\"script.js\" async&gt;&lt;/script&gt;\n</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#9-como-elegir-la-arquitectura-adecuada-para-mi-proyecto","title":"9. \u00bfC\u00f3mo elegir la arquitectura adecuada para mi proyecto?","text":"<p>La elecci\u00f3n de la arquitectura depende del tama\u00f1o y los requisitos del proyecto. Por ejemplo, una arquitectura monol\u00edtica puede ser suficiente para una aplicaci\u00f3n peque\u00f1a, pero si el proyecto crece, podr\u00eda ser mejor adoptar una arquitectura de microservicios para facilitar el mantenimiento y la escalabilidad.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#10-que-herramientas-son-recomendables-para-probar-codigo-en-el-cliente","title":"10. \u00bfQu\u00e9 herramientas son recomendables para probar c\u00f3digo en el cliente?","text":"<p>Herramientas como Chrome DevTools, Firefox Developer Tools y plataformas como CodePen son muy \u00fatiles para depurar y probar tu c\u00f3digo JavaScript en tiempo real.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/","title":"Index","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#recursos-y-faq-de-javascript-todo-lo-que-necesitas-saber","title":"Recursos y FAQ de JavaScript: \u00a1Todo lo que Necesitas Saber! \ud83d\ude80\ud83d\udcda","text":"<p>Bienvenido a tu gu\u00eda definitiva de Recursos y Preguntas Frecuentes sobre JavaScript. Aqu\u00ed encontrar\u00e1s desde las mejores herramientas para aprender hasta respuestas a las dudas m\u00e1s comunes. Adem\u00e1s, te ense\u00f1aremos c\u00f3mo ejecutar un script de JavaScript usando Node.js, paso a paso, con diagramas interactivos y ejemplos de c\u00f3digo. \u00a1Vamos a sumergirnos en el fascinante mundo de JavaScript! \ud83c\udf10\u2728</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#recursos-imprescindibles-para-aprender-javascript","title":"\ud83d\udcda Recursos Imprescindibles para Aprender JavaScript","text":"<p>Para dominar JavaScript, necesitas los mejores recursos. Aqu\u00ed te comparto los m\u00e1s \u00fatiles y recomendados:</p> <ul> <li>MDN Web Docs: La referencia definitiva para JavaScript. Detalles sobre funciones, m\u00e9todos y buenas pr\u00e1cticas.</li> <li>JavaScript.info: Una gu\u00eda completa y did\u00e1ctica que va desde lo b\u00e1sico hasta conceptos avanzados.</li> <li>Eloquent JavaScript: Un libro interactivo y gratuito que te lleva a explorar JavaScript a profundidad con ejercicios pr\u00e1cticos.</li> <li>Codecademy y freeCodeCamp: Plataformas interactivas para aprender a programar JavaScript mientras escribes c\u00f3digo.</li> <li>Stack Overflow: Resuelve todas tus dudas viendo c\u00f3mo otros desarrolladores solucionan problemas similares.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#guia-para-ejecutar-un-script-de-javascript-con-nodejs","title":"\ud83d\udcbb Gu\u00eda para Ejecutar un Script de JavaScript con Node.js","text":"<p>Node.js es la herramienta perfecta para ejecutar JavaScript en tu computadora fuera del navegador. Esto te permite desarrollar aplicaciones backend, automatizar procesos y probar scripts de manera sencilla. A continuaci\u00f3n, te explicamos c\u00f3mo hacerlo paso a paso.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#paso-1-instalar-nodejs","title":"\ud83d\udee0\ufe0f Paso 1: Instalar Node.js","text":"<p>Primero, debes instalar Node.js en tu computadora. Dir\u00edgete al sitio oficial de Node.js y descarga la versi\u00f3n m\u00e1s reciente. Una vez instalada, verifica la instalaci\u00f3n con los siguientes comandos en tu terminal:</p> <pre><code>node -v  # Verifica la versi\u00f3n de Node.js\nnpm -v   # Verifica la versi\u00f3n de npm (Node Package Manager)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#paso-2-crear-tu-primer-script-en-javascript","title":"\ud83d\udcdc Paso 2: Crear tu Primer Script en JavaScript","text":"<p>Usa tu editor de c\u00f3digo favorito (como Visual Studio Code) y crea un archivo llamado <code>app.js</code>. Dentro de este archivo, escribe tu primer script de JavaScript, por ejemplo:</p> <pre><code>// app.js\nconsole.log(\"\u00a1Hola, Node.js! \ud83d\ude80\"); // Este mensaje se mostrar\u00e1 en la terminal\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#paso-3-ejecutar-tu-script-con-nodejs","title":"\u25b6\ufe0f Paso 3: Ejecutar tu Script con Node.js","text":"<p>Ahora, abre tu terminal, navega hasta la carpeta donde guardaste <code>app.js</code> y escribe el siguiente comando:</p> <pre><code>node app.js\n</code></pre> <p>Si todo ha ido bien, ver\u00e1s el mensaje <code>\u00a1Hola, Node.js! \ud83d\ude80</code> aparecer en tu terminal. \u00a1Felicidades, acabas de ejecutar tu primer script con Node.js! \ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#diagrama-de-ejecucion-con-mermaid","title":"\ud83d\udcca Diagrama de Ejecuci\u00f3n con Mermaid","text":"<pre><code>graph TD\n    A[Crear archivo app.js] --&gt; B[Escribir c\u00f3digo JavaScript]\n    B --&gt; C[Abrir terminal]\n    C --&gt; D{Ejecutar comando: node app.js}\n    D --&gt; E[Mostrar resultado en terminal]\n    E --&gt; F[\u00a1Felicidades! \ud83c\udf89]</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#preguntas-frecuentes-sobre-javascript","title":"\u2753 Preguntas Frecuentes sobre JavaScript","text":"<p>1. \u00bfQu\u00e9 es JavaScript? JavaScript es un lenguaje de programaci\u00f3n utilizado principalmente para crear p\u00e1ginas web din\u00e1micas e interactivas. Adem\u00e1s, gracias a Node.js, tambi\u00e9n se puede usar en el servidor para desarrollo backend.</p> <p>2. \u00bfPara qu\u00e9 sirve Node.js? Node.js permite ejecutar JavaScript en el servidor, lo cual es ideal para crear aplicaciones web r\u00e1pidas, APIs, y realizar tareas automatizadas.</p> <p>3. \u00bfCu\u00e1l es la diferencia entre <code>let</code>, <code>const</code> y <code>var</code>?</p> <ul> <li><code>let</code>: Permite declarar variables que pueden cambiar de valor y tiene un alcance de bloque.</li> <li><code>const</code>: Declara variables cuyo valor no puede cambiar una vez asignado.</li> <li><code>var</code>: Similar a <code>let</code>, pero tiene un alcance global o de funci\u00f3n, lo que puede causar problemas de \u00e1mbito.</li> </ul> <p>4. \u00bfQu\u00e9 es una Promesa en JavaScript? Una Promesa es un objeto que representa la eventual finalizaci\u00f3n o falla de una operaci\u00f3n as\u00edncrona. Es ideal para manejar tareas como llamadas a APIs y otras operaciones que toman tiempo.</p> <p>5. \u00bfC\u00f3mo manejo errores en JavaScript? Utiliza <code>try...catch</code> para capturar y manejar errores en tu c\u00f3digo:</p> <pre><code>try {\n  // C\u00f3digo que puede fallar\n  let resultado = 10 / 0;\n  console.log(resultado);\n} catch (error) {\n  console.error(\"\u00a1Ups! Algo sali\u00f3 mal: \", error);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#consejos-y-buenas-practicas","title":"\ud83c\udf1f Consejos y Buenas Pr\u00e1cticas","text":"<ul> <li>Escribe c\u00f3digo limpio y comentado: Facilita la lectura y mantenimiento del c\u00f3digo.</li> <li>Practica a diario: La pr\u00e1ctica constante es clave para dominar JavaScript.</li> <li>Explora y comparte c\u00f3digo: Revisar el c\u00f3digo de otros y colaborar con la comunidad es una excelente forma de aprender.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/","title":"Clases y Objetos en JavaScript","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#que-son-las-clases-en-javascript","title":"\ud83e\uddd1\u200d\ud83d\udcbb \u00bfQu\u00e9 son las Clases en JavaScript?","text":"<p>Las clases en JavaScript son plantillas para crear objetos que encapsulan datos y comportamientos. Introducidas en ECMAScript 6 (ES6), las clases hacen que la programaci\u00f3n orientada a objetos sea m\u00e1s intuitiva y f\u00e1cil de implementar.</p> <pre><code>// Definici\u00f3n de una clase simple\nclass Persona {\n    constructor(nombre, edad) {\n        this.nombre = nombre;\n        this.edad = edad;\n    }\n\n    // M\u00e9todo de la clase\n    saludar() {\n        console.log(`\u00a1Hola! Me llamo ${this.nombre} y tengo ${this.edad} a\u00f1os.`);\n    }\n}\n\n// Crear un objeto (instancia) de la clase\nconst persona1 = new Persona('Carlos', 30);\npersona1.saludar(); // Output: \u00a1Hola! Me llamo Carlos y tengo 30 a\u00f1os.\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#componentes-de-una-clase","title":"\ud83c\udfd7\ufe0f Componentes de una Clase","text":"<ol> <li> <p>Constructor: Es un m\u00e9todo especial para inicializar los objetos creados con la clase. Se ejecuta autom\u00e1ticamente al crear una nueva instancia.</p> <pre><code>class Animal {\n    constructor(nombre) {\n        this.nombre = nombre; // Propiedad del objeto\n    }\n}\n\nconst perro = new Animal('Rex');\nconsole.log(perro.nombre); // Output: Rex\n</code></pre> </li> <li> <p>Propiedades: Son las variables definidas dentro de la clase y se asignan dentro del constructor.</p> </li> <li> <p>M\u00e9todos: Son funciones asociadas a los objetos creados por la clase. Pueden realizar acciones o manipular las propiedades del objeto.</p> <pre><code>class Coche {\n    constructor(marca, modelo) {\n        this.marca = marca;\n        this.modelo = modelo;\n    }\n\n    detalles() {\n        return `Este coche es un ${this.marca} ${this.modelo}.`;\n    }\n}\n\nconst miCoche = new Coche('Toyota', 'Corolla');\nconsole.log(miCoche.detalles()); // Output: Este coche es un Toyota Corolla.\n</code></pre> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#objetos-en-javascript","title":"\ud83e\udde9 Objetos en JavaScript","text":"<p>Los objetos son instancias de las clases, representando entidades del mundo real con propiedades (atributos) y m\u00e9todos (funcionalidades).</p> <pre><code>// Definici\u00f3n de un objeto usando una clase\nconst gato = new Animal('Miau');\nconsole.log(gato.nombre); // Output: Miau\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#herencia-en-clases","title":"\ud83d\udcda Herencia en Clases","text":"<p>La herencia permite crear nuevas clases basadas en clases existentes, reutilizando c\u00f3digo y agregando nuevas funcionalidades. Para ello, se utiliza la palabra clave <code>extends</code>.</p> <pre><code>// Clase base\nclass Vehiculo {\n    constructor(marca) {\n        this.marca = marca;\n    }\n\n    mostrarMarca() {\n        console.log(`Veh\u00edculo de marca: ${this.marca}`);\n    }\n}\n\n// Clase derivada\nclass Moto extends Vehiculo {\n    constructor(marca, tipo) {\n        super(marca); // Llama al constructor de la clase padre\n        this.tipo = tipo;\n    }\n\n    mostrarTipo() {\n        console.log(`Esta moto es de tipo: ${this.tipo}`);\n    }\n}\n\nconst miMoto = new Moto('Honda', 'Deportiva');\nmiMoto.mostrarMarca(); // Output: Veh\u00edculo de marca: Honda\nmiMoto.mostrarTipo(); // Output: Esta moto es de tipo: Deportiva\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#encapsulamiento-y-metodos-privados","title":"\ud83d\udee0\ufe0f Encapsulamiento y M\u00e9todos Privados","text":"<p>El encapsulamiento permite controlar el acceso a los datos de un objeto. En JavaScript, se puede utilizar el s\u00edmbolo <code>#</code> para definir propiedades y m\u00e9todos privados.</p> <pre><code>class CuentaBancaria {\n    #saldo = 0; // Propiedad privada\n\n    depositar(cantidad) {\n        this.#saldo += cantidad;\n        console.log(`Dep\u00f3sito exitoso. Saldo actual: ${this.#saldo}`);\n    }\n\n    retirar(cantidad) {\n        if (cantidad &lt;= this.#saldo) {\n            this.#saldo -= cantidad;\n            console.log(`Retiro exitoso. Saldo actual: ${this.#saldo}`);\n        } else {\n            console.log('Saldo insuficiente.');\n        }\n    }\n}\n\nconst miCuenta = new CuentaBancaria();\nmiCuenta.depositar(100); // Output: Dep\u00f3sito exitoso. Saldo actual: 100\nmiCuenta.retirar(50);    // Output: Retiro exitoso. Saldo actual: 50\n// miCuenta.#saldo;       // Error: No se puede acceder a una propiedad privada\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#polimorfismo-flexibilidad-en-la-orientacion-a-objetos","title":"\ud83c\udfa8 Polimorfismo: Flexibilidad en la Orientaci\u00f3n a Objetos","text":"<p>El polimorfismo permite que las clases hijas redefinan m\u00e9todos de la clase padre. Esto hace que el comportamiento de los m\u00e9todos cambie dependiendo del objeto que los invoque.</p> <pre><code>class Animal {\n    hacerSonido() {\n        console.log('El animal hace un sonido.');\n    }\n}\n\nclass Perro extends Animal {\n    hacerSonido() {\n        console.log('El perro ladra: \u00a1Guau!');\n    }\n}\n\nconst animal = new Animal();\nconst perro = new Perro();\n\nanimal.hacerSonido(); // Output: El animal hace un sonido.\nperro.hacerSonido();  // Output: El perro ladra: \u00a1Guau!\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/","title":"Recursos y FAQ de JavaScript: \u00a1Todo lo que Necesitas Saber! \ud83d\ude80\ud83d\udcda","text":"<p>Bienvenido a tu gu\u00eda definitiva de Recursos y Preguntas Frecuentes sobre JavaScript. Aqu\u00ed encontrar\u00e1s desde las mejores herramientas para aprender hasta respuestas a las dudas m\u00e1s comunes. Adem\u00e1s, te ense\u00f1aremos c\u00f3mo ejecutar un script de JavaScript usando Node.js, paso a paso, con diagramas interactivos y ejemplos de c\u00f3digo. \u00a1Vamos a sumergirnos en el fascinante mundo de JavaScript! \ud83c\udf10\u2728</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#recursos-imprescindibles-para-aprender-javascript","title":"\ud83d\udcda Recursos Imprescindibles para Aprender JavaScript","text":"<p>Para dominar JavaScript, necesitas los mejores recursos. Aqu\u00ed te comparto los m\u00e1s \u00fatiles y recomendados:</p> <ul> <li>MDN Web Docs: La referencia definitiva para JavaScript. Detalles sobre funciones, m\u00e9todos y buenas pr\u00e1cticas.</li> <li>JavaScript.info: Una gu\u00eda completa y did\u00e1ctica que va desde lo b\u00e1sico hasta conceptos avanzados.</li> <li>Eloquent JavaScript: Un libro interactivo y gratuito que te lleva a explorar JavaScript a profundidad con ejercicios pr\u00e1cticos.</li> <li>Codecademy y freeCodeCamp: Plataformas interactivas para aprender a programar JavaScript mientras escribes c\u00f3digo.</li> <li>Stack Overflow: Resuelve todas tus dudas viendo c\u00f3mo otros desarrolladores solucionan problemas similares.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#guia-para-ejecutar-un-script-de-javascript-con-nodejs","title":"\ud83d\udcbb Gu\u00eda para Ejecutar un Script de JavaScript con Node.js","text":"<p>Node.js es la herramienta perfecta para ejecutar JavaScript en tu computadora fuera del navegador. Esto te permite desarrollar aplicaciones backend, automatizar procesos y probar scripts de manera sencilla. A continuaci\u00f3n, te explicamos c\u00f3mo hacerlo paso a paso.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#paso-1-instalar-nodejs","title":"\ud83d\udee0\ufe0f Paso 1: Instalar Node.js","text":"<p>Primero, debes instalar Node.js en tu computadora. Dir\u00edgete al sitio oficial de Node.js y descarga la versi\u00f3n m\u00e1s reciente. Una vez instalada, verifica la instalaci\u00f3n con los siguientes comandos en tu terminal:</p> <pre><code>node -v  # Verifica la versi\u00f3n de Node.js\nnpm -v   # Verifica la versi\u00f3n de npm (Node Package Manager)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#paso-2-crear-tu-primer-script-en-javascript","title":"\ud83d\udcdc Paso 2: Crear tu Primer Script en JavaScript","text":"<p>Usa tu editor de c\u00f3digo favorito (como Visual Studio Code) y crea un archivo llamado <code>app.js</code>. Dentro de este archivo, escribe tu primer script de JavaScript, por ejemplo:</p> <pre><code>// app.js\nconsole.log(\"\u00a1Hola, Node.js! \ud83d\ude80\"); // Este mensaje se mostrar\u00e1 en la terminal\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#paso-3-ejecutar-tu-script-con-nodejs","title":"\u25b6\ufe0f Paso 3: Ejecutar tu Script con Node.js","text":"<p>Ahora, abre tu terminal, navega hasta la carpeta donde guardaste <code>app.js</code> y escribe el siguiente comando:</p> <pre><code>node app.js\n</code></pre> <p>Si todo ha ido bien, ver\u00e1s el mensaje <code>\u00a1Hola, Node.js! \ud83d\ude80</code> aparecer en tu terminal. \u00a1Felicidades, acabas de ejecutar tu primer script con Node.js! \ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#diagrama-de-ejecucion-con-mermaid","title":"\ud83d\udcca Diagrama de Ejecuci\u00f3n con Mermaid","text":"<pre><code>graph TD\n    A[Crear archivo app.js] --&gt; B[Escribir c\u00f3digo JavaScript]\n    B --&gt; C[Abrir terminal]\n    C --&gt; D{Ejecutar comando: node app.js}\n    D --&gt; E[Mostrar resultado en terminal]\n    E --&gt; F[\u00a1Felicidades! \ud83c\udf89]</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#guia-para-leer-variables-por-consola-en-javascript","title":"\ud83d\udce5 Gu\u00eda para Leer Variables por Consola en JavaScript","text":"<p>Cuando trabajamos con JavaScript en entornos de l\u00ednea de comandos, es com\u00fan necesitar capturar entradas del usuario. Para esto, podemos usar la librer\u00eda <code>readline-sync</code>, que permite interactuar f\u00e1cilmente con el usuario desde la consola.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#instalacion-de-readline-sync","title":"\ud83d\udee0\ufe0f Instalaci\u00f3n de <code>readline-sync</code>","text":"<p>Antes de comenzar, es necesario instalar la librer\u00eda usando npm:</p> <pre><code>npm install readline-sync\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#ejemplo-de-uso-de-readline-sync","title":"\ud83d\ude80 Ejemplo de Uso de <code>readline-sync</code>","text":"<p>A continuaci\u00f3n, te muestro un ejemplo b\u00e1sico de c\u00f3mo usar <code>readline-sync</code> para capturar la entrada del usuario:</p> <pre><code>// Importamos la librer\u00eda readline-sync\nvar readlineSync = require('readline-sync');\n\n// Esperamos la respuesta del usuario.\nvar userName = readlineSync.question('\u00bfPuedo conocer tu nombre? ');\nconsole.log('Hi ' + userName + '!');\n\n// Manejo de texto secreto (por ejemplo, contrase\u00f1as).\nvar favFood = readlineSync.question('\u00bfCu\u00e1l es tu comida favorita? ', {\n    hideEchoBack: true // El texto introducido se oculta en pantalla.\n});\nconsole.log('\u00a1A ' + userName + ' le gusta ' + favFood + '!');\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#explicacion-del-codigo","title":"\ud83d\udcd6 Explicaci\u00f3n del C\u00f3digo","text":"<ol> <li>Instalaci\u00f3n: <code>readline-sync</code> se instala ejecutando el comando <code>npm install readline-sync</code>.</li> <li>Importaci\u00f3n de la Librer\u00eda: Utilizamos <code>require('readline-sync')</code> para importar la librer\u00eda y poder usar sus funcionalidades.</li> <li>Captura de Datos: </li> <li><code>question()</code> se usa para mostrar un mensaje y capturar la respuesta del usuario.</li> <li>En el ejemplo, pedimos el nombre del usuario y lo saludamos.</li> <li>Entrada Oculta:</li> <li>La opci\u00f3n <code>{ hideEchoBack: true }</code> se usa para ocultar lo que escribe el usuario, \u00fatil para contrase\u00f1as o informaci\u00f3n sensible.</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#aplicaciones-comunes","title":"\ud83d\udd27 Aplicaciones Comunes","text":"<ul> <li>Captura de Datos en Aplicaciones CLI: Ideal para aplicaciones de l\u00ednea de comandos que requieren interacci\u00f3n del usuario.</li> <li>Formularios y Encuestas Simples: Se puede usar para crear formularios simples y recopilar datos sin una interfaz gr\u00e1fica.</li> <li>Prototipos y Pruebas R\u00e1pidas: \u00datil para prototipar r\u00e1pidamente funciones que requieren entrada del usuario.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#preguntas-frecuentes-sobre-javascript","title":"\u2753 Preguntas Frecuentes sobre JavaScript","text":"<p>1. \u00bfQu\u00e9 es JavaScript? JavaScript es un lenguaje de programaci\u00f3n utilizado principalmente para crear p\u00e1ginas web din\u00e1micas e interactivas. Adem\u00e1s, gracias a Node.js, tambi\u00e9n se puede usar en el servidor para desarrollo backend.</p> <p>2. \u00bfPara qu\u00e9 sirve Node.js? Node.js permite ejecutar JavaScript en el servidor, lo cual es ideal para crear aplicaciones web r\u00e1pidas, APIs, y realizar tareas automatizadas.</p> <p>3. \u00bfCu\u00e1l es la diferencia entre <code>let</code>, <code>const</code> y <code>var</code>?</p> <ul> <li><code>let</code>: Permite declarar variables que pueden cambiar de valor y tiene un alcance de bloque.</li> <li><code>const</code>: Declara variables cuyo valor no puede cambiar una vez asignado.</li> <li><code>var</code>: Similar a <code>let</code>, pero tiene un alcance global o de funci\u00f3n, lo que puede causar problemas de \u00e1mbito.</li> </ul> <p>4. \u00bfQu\u00e9 es una Promesa en JavaScript? Una Promesa es un objeto que representa la eventual finalizaci\u00f3n o falla de una operaci\u00f3n as\u00edncrona. Es ideal para manejar tareas como llamadas a APIs y otras operaciones que toman tiempo.</p> <p>5. \u00bfC\u00f3mo manejo errores en JavaScript? Utiliza <code>try...catch</code> para capturar y manejar errores en tu c\u00f3digo:</p> <pre><code>try {\n  // C\u00f3digo que puede fallar\n  let resultado = 10 / 0;\n  console.log(resultado);\n} catch (error) {\n  console.error(\"\u00a1Ups! Algo sali\u00f3 mal: \", error);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#consejos-y-buenas-practicas","title":"\ud83c\udf1f Consejos y Buenas Pr\u00e1cticas","text":"<ul> <li>Escribe c\u00f3digo limpio y comentado: Facilita la lectura y mantenimiento del c\u00f3digo.</li> <li>Practica a diario: La pr\u00e1ctica constante es clave para dominar JavaScript.</li> <li>Explora y comparte c\u00f3digo: Revisar el c\u00f3digo de otros y colaborar con la comunidad es una excelente forma de aprender.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/","title":"\ud83c\udf1f Variables en JavaScript: Declaraci\u00f3n, Inicializaci\u00f3n y \u00c1mbito","text":"<p>Las variables son uno de los conceptos m\u00e1s fundamentales en cualquier lenguaje de programaci\u00f3n, \u00a1y JavaScript no es la excepci\u00f3n! Nos permiten almacenar datos que podemos usar y manipular a lo largo de nuestro c\u00f3digo. Vamos a explorar c\u00f3mo declarar, inicializar y trabajar con variables en JavaScript, adem\u00e1s de comprender los diferentes \u00e1mbitos. \u00a1Vamos all\u00e1! \ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#1-declaracion-de-variables","title":"1\ufe0f\u20e3 Declaraci\u00f3n de Variables","text":"<p>En JavaScript, hay tres formas principales de declarar variables: <code>var</code>, <code>let</code>, y <code>const</code>. Cada una tiene sus particularidades y es importante saber cu\u00e1ndo usar cada una.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#var","title":"\ud83d\udd39 <code>var</code>","text":"<p><code>var</code> es la forma m\u00e1s antigua de declarar variables en JavaScript. Antes de ES6, <code>var</code> era la \u00fanica forma de declarar variables, pero tiene algunos problemas con el \u00e1mbito que veremos m\u00e1s adelante.</p> <p>Ejemplo de Declaraci\u00f3n con <code>var</code>:</p> <pre><code>var nombre = \"Juan\";\nconsole.log(nombre); // Output: Juan\n</code></pre> <ul> <li>\u00bfCu\u00e1ndo usar <code>var</code>?: Actualmente, se recomienda evitar <code>var</code> debido a problemas de \u00e1mbito y hoisting (m\u00e1s sobre esto despu\u00e9s). \u00a1Mejor usa <code>let</code> o <code>const</code>! \ud83d\udeab</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#let","title":"\ud83d\udd39 <code>let</code>","text":"<p><code>let</code> es la forma moderna y recomendada para declarar variables que pueden cambiar su valor.</p> <p>Ejemplo de Declaraci\u00f3n con <code>let</code>:</p> <pre><code>let edad = 25;\nedad = 26; // Cambiamos el valor\nconsole.log(edad); // Output: 26\n</code></pre> <ul> <li>\u00bfCu\u00e1ndo usar <code>let</code>?: Usa <code>let</code> cuando necesitas que una variable cambie su valor a lo largo del tiempo.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#const","title":"\ud83d\udd39 <code>const</code>","text":"<p><code>const</code> se utiliza para declarar variables cuyo valor no cambiar\u00e1. Es perfecta para valores que sabes que permanecer\u00e1n constantes, como configuraciones, nombres que no cambian, o referencias a objetos.</p> <p>Ejemplo de Declaraci\u00f3n con <code>const</code>:</p> <pre><code>const PI = 3.14;\nconsole.log(PI); // Output: 3.14\n\n// PI = 3.1416; // \u274c Error: No puedes reasignar una variable declarada con const\n</code></pre> <ul> <li>\u00bfCu\u00e1ndo usar <code>const</code>?: Usa <code>const</code> siempre que declares algo que no deber\u00eda cambiar su valor. Es una buena pr\u00e1ctica preferir <code>const</code> para hacer tu c\u00f3digo m\u00e1s seguro y claro.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#2-inicializacion-de-variables","title":"2\ufe0f\u20e3 Inicializaci\u00f3n de Variables","text":"<p>Inicializar una variable significa asignarle un valor en el momento de su declaraci\u00f3n. En JavaScript, puedes declarar una variable sin inicializarla, y luego asignarle un valor m\u00e1s adelante.</p> <p>Ejemplos de Declaraci\u00f3n e Inicializaci\u00f3n:</p> <pre><code>let nombre; // Declaraci\u00f3n sin inicializaci\u00f3n\nconsole.log(nombre); // Output: undefined\n\nnombre = \"Carlos\"; // Inicializaci\u00f3n\nconsole.log(nombre); // Output: Carlos\n</code></pre> <ul> <li>Nota: Si declaras una variable sin inicializarla, su valor ser\u00e1 <code>undefined</code>. \u00a1Aseg\u00farate de asignar un valor antes de usarla para evitar errores inesperados! \ud83d\uded1</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#3-ambito-scope-de-variables","title":"3\ufe0f\u20e3 \u00c1mbito (Scope) de Variables","text":"<p>El \u00e1mbito determina d\u00f3nde puede accederse a una variable en tu c\u00f3digo. Hay tres tipos principales de \u00e1mbito en JavaScript: global, local (funci\u00f3n) y bloque.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#ambito-global","title":"\ud83d\udd39 \u00c1mbito Global \ud83c\udf0d","text":"<p>Las variables declaradas fuera de cualquier funci\u00f3n o bloque tienen un \u00e1mbito global y pueden ser accedidas desde cualquier parte del c\u00f3digo.</p> <p>Ejemplo de \u00c1mbito Global:</p> <pre><code>let saludo = \"\u00a1Hola a todos!\"; // \u00c1mbito global\n\nfunction mostrarSaludo() {\n  console.log(saludo); // Puede acceder a 'saludo' porque es global\n}\n\nmostrarSaludo(); // Output: \u00a1Hola a todos!\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#ambito-local-funcion","title":"\ud83d\udd39 \u00c1mbito Local (Funci\u00f3n) \ud83d\udee0\ufe0f","text":"<p>Las variables declaradas dentro de una funci\u00f3n tienen un \u00e1mbito local y solo pueden ser accedidas dentro de esa funci\u00f3n.</p> <p>Ejemplo de \u00c1mbito Local:</p> <pre><code>function calcular() {\n  let resultado = 42; // \u00c1mbito local dentro de la funci\u00f3n\n  console.log(resultado); // Output: 42\n}\n\ncalcular();\n// console.log(resultado); // \u274c Error: 'resultado' no est\u00e1 definida fuera de la funci\u00f3n\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#ambito-de-bloque","title":"\ud83d\udd39 \u00c1mbito de Bloque \ud83d\udea7","text":"<p>Las variables declaradas con <code>let</code> y <code>const</code> dentro de un bloque (por ejemplo, dentro de <code>{}</code>) tienen un \u00e1mbito de bloque, lo que significa que solo son accesibles dentro de ese bloque.</p> <p>Ejemplo de \u00c1mbito de Bloque:</p> <pre><code>if (true) {\n  let mensaje = \"\u00a1Esto es un bloque!\";\n  console.log(mensaje); // Output: \u00a1Esto es un bloque!\n}\n\n// console.log(mensaje); // \u274c Error: 'mensaje' no est\u00e1 definido fuera del bloque\n</code></pre> <ul> <li>Importante: <code>var</code> no respeta el \u00e1mbito de bloque y puede llevar a comportamientos inesperados, por lo que es mejor usar <code>let</code> o <code>const</code>.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#resumen-de-ambitos","title":"\ud83d\udea6 Resumen de \u00c1mbitos","text":"<ul> <li>Global: Accesible desde cualquier parte del c\u00f3digo.</li> <li>Local (Funci\u00f3n): Solo accesible dentro de la funci\u00f3n en la que se declara.</li> <li>Bloque: Solo accesible dentro del bloque <code>{}</code> en el que se declara (con <code>let</code> y <code>const</code>).</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#buenas-practicas-con-variables-en-javascript","title":"\ud83c\udf1f Buenas Pr\u00e1cticas con Variables en JavaScript","text":"<ol> <li>Usa <code>const</code> siempre que sea posible para definir valores constantes y evitar errores de reasignaci\u00f3n.</li> <li>Usa <code>let</code> cuando necesites reasignar un valor.</li> <li>Evita <code>var</code> para prevenir problemas de hoisting y \u00e1mbito no deseado.</li> <li>Nombra tus variables de manera descriptiva para hacer tu c\u00f3digo m\u00e1s legible y f\u00e1cil de entender.</li> <li>Mant\u00e9n las variables dentro del \u00e1mbito m\u00e1s peque\u00f1o posible para evitar efectos secundarios y mejorar la claridad del c\u00f3digo.</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/","title":"\ud83e\udde9 Tipos de Datos en JavaScript","text":"<p>En JavaScript, los tipos de datos son fundamentales para manejar y manipular la informaci\u00f3n. Conocerlos te ayudar\u00e1 a escribir c\u00f3digo m\u00e1s robusto y comprender mejor c\u00f3mo funcionan las variables en tu programa. JavaScript tiene tipos de datos primitivos y tipos de datos complejos. \u00a1Vamos a explorarlos! \ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#1-tipos-de-datos-primitivos","title":"1\ufe0f\u20e3 Tipos de Datos Primitivos","text":"<p>Los tipos de datos primitivos son los m\u00e1s b\u00e1sicos y no tienen m\u00e9todos ni propiedades. Estos incluyen:</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#string-cadenas-de-texto","title":"\ud83d\udd39 <code>string</code> (Cadenas de texto)","text":"<p>Las cadenas son secuencias de caracteres, y se definen entre comillas simples (<code>' '</code>) o dobles (<code>\" \"</code>).</p> <p>Ejemplo:</p> <pre><code>let nombre = \"JavaScript\"; // String\nconsole.log(nombre); // Output: JavaScript\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#number-numeros","title":"\ud83d\udd39 <code>number</code> (N\u00fameros)","text":"<p>En JavaScript, todos los n\u00fameros (enteros y decimales) son del mismo tipo: <code>number</code>.</p> <p>Ejemplo:</p> <pre><code>let edad = 30; // Entero\nlet precio = 19.99; // Decimal\nconsole.log(edad, precio); // Output: 30 19.99\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#boolean-booleanos","title":"\ud83d\udd39 <code>boolean</code> (Booleanos)","text":"<p>Un booleano solo puede tener dos valores: <code>true</code> (verdadero) o <code>false</code> (falso).</p> <p>Ejemplo:</p> <pre><code>let esMayor = true;\nlet esMenor = false;\nconsole.log(esMayor); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#undefined","title":"\ud83d\udd39 <code>undefined</code>","text":"<p>Una variable sin un valor asignado autom\u00e1ticamente tiene el tipo <code>undefined</code>.</p> <p>Ejemplo:</p> <pre><code>let sinDefinir;\nconsole.log(sinDefinir); // Output: undefined\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#null","title":"\ud83d\udd39 <code>null</code>","text":"<p><code>null</code> representa la ausencia intencionada de cualquier valor.</p> <p>Ejemplo:</p> <pre><code>let vacio = null;\nconsole.log(vacio); // Output: null\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#symbol-simbolos","title":"\ud83d\udd39 <code>symbol</code> (S\u00edmbolos)","text":"<p>Los <code>symbol</code> son valores \u00fanicos e inmutables, \u00fatiles para identificar propiedades de objetos.</p> <p>Ejemplo:</p> <pre><code>let simbolo1 = Symbol(\"miSimbolo\");\nconsole.log(simbolo1); // Output: Symbol(miSimbolo)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#bigint-numeros-grandes","title":"\ud83d\udd39 <code>bigint</code> (N\u00fameros Grandes)","text":"<p><code>bigint</code> permite manejar n\u00fameros enteros extremadamente grandes, m\u00e1s all\u00e1 del l\u00edmite de <code>number</code>.</p> <p>Ejemplo:</p> <pre><code>let numeroGrande = 1234567890123456789012345678901234567890n; // Usa 'n' al final\nconsole.log(numeroGrande); // Output: 1234567890123456789012345678901234567890n\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#2-tipos-de-datos-complejos-objetos","title":"2\ufe0f\u20e3 Tipos de Datos Complejos (Objetos)","text":"<p>Los objetos son colecciones de pares clave-valor y pueden contener m\u00faltiples tipos de datos, incluso otros objetos.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#object","title":"\ud83d\udd39 <code>Object</code>","text":"<p>Un objeto es una colecci\u00f3n de datos y funciones relacionadas.</p> <p>Ejemplo:</p> <pre><code>let persona = {\n  nombre: \"Ana\",\n  edad: 28,\n  esProgramador: true,\n};\n\nconsole.log(persona); // Output: { nombre: 'Ana', edad: 28, esProgramador: true }\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#array-arreglos","title":"\ud83d\udd39 <code>Array</code> (Arreglos)","text":"<p>Un array es un tipo especial de objeto que almacena valores en forma de lista ordenada.</p> <p>Ejemplo:</p> <pre><code>let colores = [\"rojo\", \"verde\", \"azul\"];\nconsole.log(colores); // Output: [ 'rojo', 'verde', 'azul' ]\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#conversion-de-tipos-de-datos","title":"\ud83d\udee0\ufe0f Conversi\u00f3n de Tipos de Datos","text":"<p>La conversi\u00f3n de tipos (type casting) es el proceso de cambiar un tipo de dato a otro. Esto es \u00fatil cuando necesitas manipular datos de diferentes formas en tu programa.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#1-conversion-de-numeros-a-cadenas-number-string","title":"1\ufe0f\u20e3 Conversi\u00f3n de N\u00fameros a Cadenas (<code>number</code> \u27a1\ufe0f <code>string</code>)","text":"<p>Para convertir un n\u00famero a una cadena, puedes usar <code>String()</code> o el m\u00e9todo <code>.toString()</code>.</p> <p>Ejemplo:</p> <pre><code>let numero = 123;\nlet cadenaNumero = String(numero); // Conversi\u00f3n usando String()\nlet cadenaNumero2 = numero.toString(); // Conversi\u00f3n usando .toString()\nconsole.log(cadenaNumero, cadenaNumero2); // Output: \"123\" \"123\"\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#2-conversion-de-cadenas-a-numeros-string-number","title":"2\ufe0f\u20e3 Conversi\u00f3n de Cadenas a N\u00fameros (<code>string</code> \u27a1\ufe0f <code>number</code>)","text":"<p>Para convertir una cadena a un n\u00famero, usa <code>Number()</code>, <code>parseInt()</code>, o <code>parseFloat()</code>.</p> <p>Ejemplo:</p> <pre><code>let cadena = \"456\";\nlet numeroEntero = Number(cadena); // Conversi\u00f3n a n\u00famero\nlet numeroEntero2 = parseInt(cadena); // Conversi\u00f3n a n\u00famero entero\nlet numeroDecimal = parseFloat(\"456.78\"); // Conversi\u00f3n a n\u00famero decimal\nconsole.log(numeroEntero, numeroEntero2, numeroDecimal); // Output: 456 456 456.78\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#3-conversion-a-booleanos-boolean","title":"3\ufe0f\u20e3 Conversi\u00f3n a Booleanos (<code>boolean</code>)","text":"<p>Puedes convertir otros tipos a <code>boolean</code> usando <code>Boolean()</code>.</p> <p>Ejemplo:</p> <pre><code>let valor = 1; // Cualquier n\u00famero distinto de 0 es true\nlet cadenaVacia = \"\"; // Cadenas vac\u00edas son false\nconsole.log(Boolean(valor)); // Output: true\nconsole.log(Boolean(cadenaVacia)); // Output: false\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#4-conversion-automatica-coercion-de-tipos","title":"4\ufe0f\u20e3 Conversi\u00f3n Autom\u00e1tica (Coerci\u00f3n de Tipos)","text":"<p>JavaScript a menudo convierte tipos autom\u00e1ticamente en segundo plano, \u00a1lo que puede llevar a algunos comportamientos inesperados! \u26a0\ufe0f</p> <p>Ejemplo:</p> <pre><code>console.log(\"5\" + 2); // Output: \"52\" (convierte 2 a string)\nconsole.log(\"5\" - 2); // Output: 3 (convierte \"5\" a n\u00famero)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#buenas-practicas-al-trabajar-con-tipos-de-datos","title":"\ud83c\udf1f Buenas Pr\u00e1cticas al Trabajar con Tipos de Datos","text":"<ol> <li>Evita Coerciones Inesperadas: S\u00e9 expl\u00edcito con las conversiones para evitar errores.</li> <li>Usa <code>===</code> para Comparaciones Estrictas: Esto evita comparaciones con coerci\u00f3n de tipo, asegurando que tanto el tipo como el valor coincidan.</li> <li>Prefiere <code>Number()</code>, <code>String()</code> y <code>Boolean()</code> para conversiones claras y predecibles.</li> <li>Verifica Tipos con <code>typeof</code>: Usa <code>typeof</code> para asegurarte del tipo de una variable antes de manipularla.</li> </ol> <pre><code>let valor = \"123\";\nconsole.log(typeof valor); // Output: string\n</code></pre> <p>\u00a1Y eso es todo sobre los tipos de datos y la conversi\u00f3n de tipos en JavaScript! Ahora tienes el conocimiento para manipular y cambiar tipos de datos como un profesional. \u00a1Aseg\u00farate de usar estas herramientas sabiamente para evitar errores inesperados en tu c\u00f3digo! \ud83c\udfaf\u2728</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/","title":"\ud83d\udcdd Asignaciones en JavaScript","text":"<p>Las asignaciones son fundamentales en JavaScript; es como decirle a una variable cu\u00e1l es su valor. Pero, \u00a1JavaScript va m\u00e1s all\u00e1 de solo usar el signo igual <code>=</code>! Existen muchos operadores de asignaci\u00f3n que nos ayudan a trabajar con los valores de manera m\u00e1s eficiente. \u00a1Vamos a verlos todos! \ud83c\udfaf</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#1-asignacion-basica","title":"1\ufe0f\u20e3 Asignaci\u00f3n B\u00e1sica (<code>=</code>)","text":"<p>El operador de asignaci\u00f3n b\u00e1sica <code>=</code> se usa para asignar un valor a una variable. Es el operador de asignaci\u00f3n m\u00e1s sencillo y com\u00fan.</p> <p>Ejemplo:</p> <pre><code>let nombre = \"JavaScript\"; // Asigna la cadena \"JavaScript\" a la variable nombre\nlet numero = 42; // Asigna el n\u00famero 42 a la variable numero\nconsole.log(nombre); // Output: JavaScript\nconsole.log(numero); // Output: 42\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#2-asignacion-combinada-con-operadores-matematicos","title":"2\ufe0f\u20e3 Asignaci\u00f3n Combinada con Operadores Matem\u00e1ticos","text":"<p>En JavaScript, puedes combinar la asignaci\u00f3n con operadores matem\u00e1ticos para hacer el c\u00f3digo m\u00e1s compacto y legible. \u00a1Veamos algunos de los operadores m\u00e1s comunes!</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-suma","title":"\ud83d\udd39 Asignaci\u00f3n de Suma (<code>+=</code>)","text":"<p>Este operador suma un valor a la variable y asigna el resultado a esa misma variable.</p> <p>Ejemplo:</p> <pre><code>let x = 10;\nx += 5; // Es lo mismo que x = x + 5\nconsole.log(x); // Output: 15\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-resta-","title":"\ud83d\udd39 Asignaci\u00f3n de Resta (<code>-=</code>)","text":"<p>Este operador resta un valor a la variable y asigna el resultado.</p> <p>Ejemplo:</p> <pre><code>let y = 20;\ny -= 8; // Es lo mismo que y = y - 8\nconsole.log(y); // Output: 12\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-multiplicacion","title":"\ud83d\udd39 Asignaci\u00f3n de Multiplicaci\u00f3n (<code>*=</code>)","text":"<p>Multiplica la variable por un valor y asigna el resultado.</p> <p>Ejemplo:</p> <pre><code>let z = 7;\nz *= 3; // Es lo mismo que z = z * 3\nconsole.log(z); // Output: 21\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-division","title":"\ud83d\udd39 Asignaci\u00f3n de Divisi\u00f3n (<code>/=</code>)","text":"<p>Divide la variable por un valor y asigna el resultado.</p> <p>Ejemplo:</p> <pre><code>let a = 50;\na /= 10; // Es lo mismo que a = a / 10\nconsole.log(a); // Output: 5\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-modulo","title":"\ud83d\udd39 Asignaci\u00f3n de M\u00f3dulo (<code>%=</code>)","text":"<p>Calcula el resto de la divisi\u00f3n de la variable y un valor, y asigna el resultado.</p> <p>Ejemplo:</p> <pre><code>let b = 29;\nb %= 5; // Es lo mismo que b = b % 5\nconsole.log(b); // Output: 4\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-exponenciacion","title":"\ud83d\udd39 Asignaci\u00f3n de Exponenciaci\u00f3n (<code>**=</code>)","text":"<p>Eleva la variable a la potencia de un valor y asigna el resultado.</p> <p>Ejemplo:</p> <pre><code>let c = 4;\nc **= 2; // Es lo mismo que c = c ** 2 (4 elevado a la potencia 2)\nconsole.log(c); // Output: 16\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#3-asignacion-con-desestructuracion","title":"3\ufe0f\u20e3 Asignaci\u00f3n con Desestructuraci\u00f3n \u2728","text":"<p>La desestructuraci\u00f3n es una forma avanzada de asignar valores de arreglos o propiedades de objetos a variables de manera m\u00e1s compacta y legible. \u00a1Es una herramienta poderosa!</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#desestructuracion-de-arreglos","title":"\ud83d\udd39 Desestructuraci\u00f3n de Arreglos","text":"<p>Puedes extraer valores de un arreglo y asignarlos a variables individuales.</p> <p>Ejemplo:</p> <pre><code>let [primero, segundo, tercero] = [\"\ud83c\udf4e\", \"\ud83c\udf4c\", \"\ud83c\udf53\"];\nconsole.log(primero); // Output: \ud83c\udf4e\nconsole.log(segundo); // Output: \ud83c\udf4c\nconsole.log(tercero); // Output: \ud83c\udf53\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#desestructuracion-de-objetos","title":"\ud83d\udd39 Desestructuraci\u00f3n de Objetos","text":"<p>Extrae propiedades de un objeto y as\u00edgnalas a variables.</p> <p>Ejemplo:</p> <pre><code>let persona = { nombre: \"Carlos\", edad: 30, pais: \"Espa\u00f1a\" };\nlet { nombre, edad, pais } = persona;\nconsole.log(nombre); // Output: Carlos\nconsole.log(edad); // Output: 30\nconsole.log(pais); // Output: Espa\u00f1a\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#desestructuracion-con-alias","title":"\ud83d\udd39 Desestructuraci\u00f3n con Alias","text":"<p>Puedes asignar propiedades a variables con nombres diferentes usando alias.</p> <p>Ejemplo:</p> <pre><code>let usuario = { nombreUsuario: \"Ana\", rol: \"admin\" };\nlet { nombreUsuario: nombre, rol: puesto } = usuario;\nconsole.log(nombre); // Output: Ana\nconsole.log(puesto); // Output: admin\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#4-operador-de-asignacion-logica","title":"4\ufe0f\u20e3 Operador de Asignaci\u00f3n L\u00f3gica","text":"<p>JavaScript tambi\u00e9n permite asignaciones con operadores l\u00f3gicos (<code>&amp;&amp;=</code>, <code>||=</code>, <code>??=</code>) que hacen tu c\u00f3digo m\u00e1s compacto y expresivo.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-con","title":"\ud83d\udd39 Asignaci\u00f3n con <code>&amp;&amp;=</code>","text":"<p>Asigna el valor solo si la condici\u00f3n previa es verdadera (<code>true</code>).</p> <p>Ejemplo:</p> <pre><code>let isActive = true;\nlet status = \"offline\";\nisActive &amp;&amp;= \"online\"; // Solo asigna \"online\" si isActive es true\nconsole.log(isActive); // Output: online\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-con_1","title":"\ud83d\udd39 Asignaci\u00f3n con <code>||=</code>","text":"<p>Asigna el valor solo si la variable previa es <code>falsy</code> (por ejemplo, <code>null</code>, <code>undefined</code>, <code>0</code>, <code>false</code>).</p> <p>Ejemplo:</p> <pre><code>let nombreUsuario = \"\";\nnombreUsuario ||= \"Invitado\"; // Si nombreUsuario es vac\u00edo, asigna \"Invitado\"\nconsole.log(nombreUsuario); // Output: Invitado\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-con_2","title":"\ud83d\udd39 Asignaci\u00f3n con <code>??=</code>","text":"<p>Asigna el valor solo si la variable es <code>null</code> o <code>undefined</code>.</p> <p>Ejemplo:</p> <pre><code>let valor = null;\nvalor ??= 10; // Solo asigna 10 si valor es null o undefined\nconsole.log(valor); // Output: 10\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#buenas-practicas-al-usar-asignaciones","title":"\ud83c\udf1f Buenas Pr\u00e1cticas al Usar Asignaciones","text":"<ol> <li>Utiliza operadores combinados (<code>+=</code>, <code>-=</code>) para simplificar tu c\u00f3digo.</li> <li>Desestructura objetos y arreglos para asignar m\u00faltiples valores de una forma m\u00e1s legible.</li> <li>Verifica los tipos de datos antes de asignar valores para evitar errores inesperados.</li> <li>Usa <code>const</code> y <code>let</code> adecuadamente para evitar reasignaciones no deseadas.</li> </ol> <p>Con estas t\u00e9cnicas de asignaci\u00f3n, tu c\u00f3digo ser\u00e1 m\u00e1s compacto, claro y eficiente. \u00a1Ahora tienes todas las herramientas para manejar las asignaciones en JavaScript como un verdadero ninja del c\u00f3digo! \u26a1\ud83d\udda5\ufe0f</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/","title":"\ud83e\uddee Operadores en JavaScript","text":"<p>Los operadores en JavaScript son s\u00edmbolos especiales que realizan operaciones sobre datos. Son como herramientas m\u00e1gicas que nos permiten sumar, restar, comparar, asignar, y mucho m\u00e1s. \u00a1Explor\u00e9moslos uno a uno! \u2728</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#1-operadores-aritmeticos","title":"1\ufe0f\u20e3 Operadores Aritm\u00e9ticos \ud83e\uddee","text":"<p>Los operadores aritm\u00e9ticos se utilizan para realizar c\u00e1lculos matem\u00e1ticos b\u00e1sicos como suma, resta, multiplicaci\u00f3n y divisi\u00f3n.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#suma","title":"\ud83d\udd39 Suma (<code>+</code>)","text":"<p>Suma dos valores. Tambi\u00e9n se usa para concatenar cadenas de texto.</p> <p>Ejemplo:</p> <pre><code>let a = 10;\nlet b = 5;\nconsole.log(a + b); // Output: 15\n\nlet saludo = \"Hola, \";\nlet nombre = \"Mundo!\";\nconsole.log(saludo + nombre); // Output: Hola, Mundo!\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#resta-","title":"\ud83d\udd39 Resta (<code>-</code>)","text":"<p>Resta un valor de otro.</p> <p>Ejemplo:</p> <pre><code>let x = 20;\nlet y = 7;\nconsole.log(x - y); // Output: 13\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#multiplicacion","title":"\ud83d\udd39 Multiplicaci\u00f3n (<code>*</code>)","text":"<p>Multiplica dos valores.</p> <p>Ejemplo:</p> <pre><code>let base = 4;\nlet altura = 5;\nconsole.log(base * altura); // Output: 20\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#division","title":"\ud83d\udd39 Divisi\u00f3n (<code>/</code>)","text":"<p>Divide un valor entre otro.</p> <p>Ejemplo:</p> <pre><code>let total = 100;\nlet partes = 4;\nconsole.log(total / partes); // Output: 25\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#modulo","title":"\ud83d\udd39 M\u00f3dulo (<code>%</code>)","text":"<p>Devuelve el resto de una divisi\u00f3n.</p> <p>Ejemplo:</p> <pre><code>let numero = 17;\nlet divisor = 3;\nconsole.log(numero % divisor); // Output: 2 (el resto de 17/3)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#exponenciacion","title":"\ud83d\udd39 Exponenciaci\u00f3n (<code>**</code>)","text":"<p>Eleva un n\u00famero a la potencia de otro.</p> <p>Ejemplo:</p> <pre><code>let base = 3;\nlet exponente = 3;\nconsole.log(base ** exponente); // Output: 27 (3 elevado a la 3)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#2-operadores-de-comparacion","title":"2\ufe0f\u20e3 Operadores de Comparaci\u00f3n \ud83e\udd14","text":"<p>Los operadores de comparaci\u00f3n comparan dos valores y devuelven un booleano (<code>true</code> o <code>false</code>). \u00a1Perfecto para decisiones en el c\u00f3digo!</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#igualdad-y-estricta-igualdad","title":"\ud83d\udd39 Igualdad (<code>==</code>) y Estricta Igualdad (<code>===</code>)","text":"<ul> <li><code>==</code> compara valores y convierte tipos si es necesario.</li> <li><code>===</code> compara valores y tipos, sin conversiones autom\u00e1ticas.</li> </ul> <p>Ejemplo:</p> <pre><code>console.log(5 == \"5\"); // Output: true (convierte \"5\" a n\u00famero)\nconsole.log(5 === \"5\"); // Output: false (diferentes tipos: n\u00famero vs. string)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#desigualdad-y-estricta-desigualdad","title":"\ud83d\udd39 Desigualdad (<code>!=</code>) y Estricta Desigualdad (<code>!==</code>)","text":"<ul> <li><code>!=</code> verifica si los valores son diferentes.</li> <li><code>!==</code> verifica si los valores y tipos son diferentes.</li> </ul> <p>Ejemplo:</p> <pre><code>console.log(10 != \"10\"); // Output: false (convierte \"10\" a n\u00famero)\nconsole.log(10 !== \"10\"); // Output: true (diferentes tipos)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#mayor-que-y-menor-que","title":"\ud83d\udd39 Mayor que (<code>&gt;</code>) y Menor que (<code>&lt;</code>)","text":"<p>Comparan si un valor es mayor o menor que otro.</p> <p>Ejemplo:</p> <pre><code>console.log(8 &gt; 3); // Output: true\nconsole.log(3 &lt; 8); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#mayor-o-igual-y-menor-o-igual","title":"\ud83d\udd39 Mayor o Igual (<code>&gt;=</code>) y Menor o Igual (<code>&lt;=</code>)","text":"<p>Comparan si un valor es mayor o igual, o menor o igual.</p> <p>Ejemplo:</p> <pre><code>console.log(5 &gt;= 5); // Output: true\nconsole.log(4 &lt;= 3); // Output: false\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#3-operadores-logicos","title":"3\ufe0f\u20e3 Operadores L\u00f3gicos \ud83e\udde0","text":"<p>Los operadores l\u00f3gicos nos permiten combinar m\u00faltiples condiciones, perfectos para estructuras de control como <code>if</code> o <code>while</code>.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#y-logico","title":"\ud83d\udd39 Y L\u00f3gico (<code>&amp;&amp;</code>)","text":"<p>Devuelve <code>true</code> si ambas condiciones son verdaderas.</p> <p>Ejemplo:</p> <pre><code>let esMayor = true;\nlet tienePermiso = true;\nconsole.log(esMayor &amp;&amp; tienePermiso); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#o-logico","title":"\ud83d\udd39 O L\u00f3gico (<code>||</code>)","text":"<p>Devuelve <code>true</code> si una o ambas condiciones son verdaderas.</p> <p>Ejemplo:</p> <pre><code>let esAdulto = false;\nlet tienePermisoEspecial = true;\nconsole.log(esAdulto || tienePermisoEspecial); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#no-logico","title":"\ud83d\udd39 No L\u00f3gico (<code>!</code>)","text":"<p>Niega el valor de una condici\u00f3n, invirti\u00e9ndola.</p> <p>Ejemplo:</p> <pre><code>let esDia = false;\nconsole.log(!esDia); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#4-operadores-de-asignacion","title":"4\ufe0f\u20e3 Operadores de Asignaci\u00f3n \ud83d\udce5","text":"<p>Los operadores de asignaci\u00f3n asignan valores a variables. Adem\u00e1s del b\u00e1sico <code>=</code>, hay combinaciones para operaciones m\u00e1s avanzadas.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#asignacion-basica","title":"\ud83d\udd39 Asignaci\u00f3n B\u00e1sica (<code>=</code>)","text":"<p>Ejemplo:</p> <pre><code>let puntos = 100; // Asigna 100 a la variable puntos\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#combinados-con-aritmeticos-etc","title":"\ud83d\udd39 Combinados con Aritm\u00e9ticos (<code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, etc.)","text":"<p>Ejemplo:</p> <pre><code>let score = 10;\nscore += 5; // Es lo mismo que score = score + 5\nconsole.log(score); // Output: 15\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#5-operador-ternario","title":"5\ufe0f\u20e3 Operador Ternario \ud83e\uddd0","text":"<p>El operador ternario (<code>? :</code>) es una forma abreviada de escribir <code>if...else</code> en una sola l\u00ednea. Se usa para evaluar una condici\u00f3n y devolver uno de dos valores.</p> <p>Ejemplo:</p> <pre><code>let edad = 18;\nlet acceso = edad &gt;= 18 ? \"Permitido\" : \"Denegado\";\nconsole.log(acceso); // Output: Permitido\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#6-operador-de-encadenamiento-opcional","title":"6\ufe0f\u20e3 Operador de Encadenamiento Opcional (<code>?.</code>) \ud83d\udea6","text":"<p>Este operador permite acceder a propiedades de objetos sin causar errores si alguna parte de la cadena no existe.</p> <p>Ejemplo:</p> <pre><code>let usuario = { nombre: \"Ana\", direccion: { ciudad: \"Madrid\" } };\nconsole.log(usuario.direccion?.ciudad); // Output: Madrid\nconsole.log(usuario.contacto?.telefono); // Output: undefined (no causa error)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#buenas-practicas-al-usar-operadores","title":"\ud83c\udf1f Buenas Pr\u00e1cticas al Usar Operadores","text":"<ol> <li>Prefiere <code>===</code> en lugar de <code>==</code> para evitar conversiones inesperadas de tipos.</li> <li>Combina operadores l\u00f3gicos con par\u00e9ntesis para asegurar claridad en condiciones complejas.</li> <li>Utiliza el operador ternario para simplificar decisiones simples en tu c\u00f3digo.</li> <li>Prueba el operador de encadenamiento opcional para evitar errores al acceder a propiedades de objetos que pueden no existir.</li> </ol> <p>Con estos operadores, tienes una caja de herramientas poderosa para manipular y comparar datos en JavaScript. \u00a1\u00dasalos sabiamente para crear c\u00f3digo m\u00e1s eficiente y expresivo! \u26a1\ud83d\udda5\ufe0f</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/","title":"\ud83d\udcdd Comentarios en el C\u00f3digo JavaScript","text":"<p>Los comentarios en JavaScript son l\u00edneas de texto que el navegador ignora al ejecutar el c\u00f3digo. Son herramientas esenciales para describir qu\u00e9 hace el c\u00f3digo, dejar notas para otros desarrolladores (o para ti mismo en el futuro), y desactivar partes del c\u00f3digo temporalmente. \u00a1Vamos a ver c\u00f3mo y cu\u00e1ndo usar los comentarios! \ud83e\uddd0</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#1-por-que-usar-comentarios","title":"1\ufe0f\u20e3 \u00bfPor qu\u00e9 Usar Comentarios? \ud83e\udd14","text":"<p>Los comentarios ayudan a:</p> <ul> <li>Explicar la l\u00f3gica detr\u00e1s de fragmentos de c\u00f3digo.</li> <li>Anotar ideas para mejorar o cambiar el c\u00f3digo m\u00e1s adelante.</li> <li>Desactivar partes del c\u00f3digo temporalmente sin borrarlas.</li> <li>Facilitar la colaboraci\u00f3n en equipo, haciendo que el c\u00f3digo sea m\u00e1s legible para otros desarrolladores.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#2-tipos-de-comentarios-en-javascript","title":"2\ufe0f\u20e3 Tipos de Comentarios en JavaScript","text":"<p>JavaScript admite dos tipos de comentarios: Comentarios de una sola l\u00ednea y Comentarios de varias l\u00edneas.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#comentarios-de-una-sola-linea","title":"\ud83d\udd39 Comentarios de Una Sola L\u00ednea (<code>//</code>)","text":"<p>Se usan para comentarios cortos o para explicar una sola l\u00ednea de c\u00f3digo. Se a\u00f1aden al comienzo de la l\u00ednea y todo lo que sigue despu\u00e9s de <code>//</code> es ignorado por JavaScript.</p> <p>Ejemplo:</p> <pre><code>// Este es un comentario de una sola l\u00ednea\nlet nombre = \"Carlos\"; // Declara una variable con el nombre \"Carlos\"\nconsole.log(nombre); // Muestra \"Carlos\" en la consola\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#comentarios-de-varias-lineas","title":"\ud83d\udd39 Comentarios de Varias L\u00edneas (<code>/* */</code>)","text":"<p>Son \u00fatiles para comentarios m\u00e1s largos o para descripciones detalladas. Todo lo que se encuentra entre <code>/*</code> y <code>*/</code> es ignorado por JavaScript.</p> <p>Ejemplo:</p> <pre><code>/*\n  Esta funci\u00f3n calcula la suma de dos n\u00fameros.\n  Par\u00e1metros:\n  - a: Primer n\u00famero\n  - b: Segundo n\u00famero\n  Retorna: La suma de a y b\n*/\nfunction sumar(a, b) {\n  return a + b;\n}\n\nconsole.log(sumar(10, 5)); // Output: 15\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#3-usos-comunes-de-los-comentarios","title":"3\ufe0f\u20e3 Usos Comunes de los Comentarios \ud83d\udee0\ufe0f","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#explicar-la-logica-compleja","title":"\ud83d\udd39 Explicar la L\u00f3gica Compleja","text":"<p>Usa comentarios para explicar la l\u00f3gica detr\u00e1s de fragmentos de c\u00f3digo complejos. Esto ayuda a otros (\u00a1y a ti mismo!) a entender el prop\u00f3sito de un bloque de c\u00f3digo.</p> <p>Ejemplo:</p> <pre><code>// Comprobamos si el n\u00famero es primo\nfunction esPrimo(numero) {\n  if (numero &lt;= 1) return false; // Los n\u00fameros menores o iguales a 1 no son primos\n  for (let i = 2; i &lt; numero; i++) {\n    if (numero % i === 0) return false; // Si es divisible por otro n\u00famero, no es primo\n  }\n  return true; // Si pasa todas las pruebas, es primo\n}\n\nconsole.log(esPrimo(7)); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#desactivar-codigo-temporalmente","title":"\ud83d\udd39 Desactivar C\u00f3digo Temporalmente","text":"<p>Puedes usar comentarios para desactivar c\u00f3digo sin eliminarlo, lo cual es \u00fatil para probar o depurar sin perder l\u00edneas de c\u00f3digo.</p> <p>Ejemplo:</p> <pre><code>let resultado = 0;\n\n// Desactiva la siguiente l\u00ednea mientras pruebas otra cosa\n// resultado = sumar(3, 7);\n\n// Activamos una l\u00ednea alternativa para la prueba\nresultado = 10 + 5;\nconsole.log(resultado); // Output: 15\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#dejar-notas-o-recordatorios","title":"\ud83d\udd39 Dejar Notas o Recordatorios \ud83d\udccc","text":"<p>Los comentarios tambi\u00e9n son un excelente lugar para dejar notas sobre mejoras futuras, arreglos necesarios, o cualquier cosa que debas recordar.</p> <p>Ejemplo:</p> <pre><code>// TODO: Mejorar la eficiencia de este bucle\nfor (let i = 0; i &lt; 100; i++) {\n  console.log(i);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#4-buenas-practicas-al-usar-comentarios","title":"4\ufe0f\u20e3 Buenas Pr\u00e1cticas al Usar Comentarios \ud83c\udf1f","text":"<ol> <li>S\u00e9 Claro y Conciso: Los comentarios deben explicar el \"por qu\u00e9\" y el \"c\u00f3mo\" del c\u00f3digo de manera clara y breve.</li> <li>No Comentes lo Obvio: No es necesario comentar cosas evidentes como <code>let x = 10; // Asigna 10 a x</code>. Mejor explica la l\u00f3gica.</li> <li>Actualiza los Comentarios: Si cambias el c\u00f3digo, aseg\u00farate de actualizar los comentarios para que sigan siendo precisos.</li> <li>Usa Comentarios para Planificar: Al comenzar a escribir c\u00f3digo, usa comentarios para estructurar tu l\u00f3gica y pasos a seguir.</li> </ol> <p>Ejemplo de Planificaci\u00f3n con Comentarios:</p> <pre><code>// 1. Solicitar el nombre del usuario\n// 2. Saludar al usuario por su nombre\n// 3. Mostrar la fecha actual\n\n// Paso 1\nlet nombreUsuario = prompt(\"\u00bfCu\u00e1l es tu nombre?\");\n\n// Paso 2\nconsole.log(`Hola, ${nombreUsuario}! \ud83d\udc4b`);\n\n// Paso 3\nlet fechaActual = new Date();\nconsole.log(`Hoy es: ${fechaActual.toDateString()}`);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#5-comentarios-en-el-codigo-limpio","title":"5\ufe0f\u20e3 Comentarios en el C\u00f3digo Limpio \u2728","text":"<p>Mantener comentarios relevantes y actualizados es clave para un c\u00f3digo limpio y profesional. Usa los comentarios para agregar valor, no para llenar l\u00edneas innecesariamente.</p> <p>Ejemplo de C\u00f3digo Limpio con Comentarios \u00datiles:</p> <pre><code>// Genera un n\u00famero aleatorio entre un rango dado\nfunction numeroAleatorio(min, max) {\n  // Math.random() genera un n\u00famero entre 0 y 1, que escalamos y ajustamos al rango\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconsole.log(numeroAleatorio(1, 10)); // Output: Un n\u00famero entre 1 y 10\n</code></pre> <p>Los comentarios son una parte fundamental del desarrollo de software, especialmente cuando trabajas en equipo o vuelves a revisar tu propio c\u00f3digo despu\u00e9s de un tiempo. Usa los comentarios para guiar, explicar, y documentar tu c\u00f3digo de manera efectiva. \u00a1Con estos consejos, tendr\u00e1s un c\u00f3digo claro y f\u00e1cil de mantener! \u270d\ufe0f\ud83e\uddd1\u200d\ud83d\udcbb</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/","title":"Condicionales en JavaScript: \u00a1Aprende de Manera Visual y Divertida! \ud83d\ude80","text":"<p>En JavaScript, las condicionales son la clave para tomar decisiones en el c\u00f3digo. Son como sem\u00e1foros para tus programas: dependiendo de ciertas condiciones, el flujo de ejecuci\u00f3n cambia de direcci\u00f3n. Vamos a desglosarlo con ejemplos, diagramas y hasta algunos emojis para que quede todo clar\u00edsimo.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#que-son-las-condicionales","title":"\ud83d\uded1 \u00bfQu\u00e9 son las Condicionales?","text":"<p>Las condicionales son estructuras de control que permiten que tu programa tome decisiones basadas en condiciones verdaderas o falsas. Los principales tipos en JavaScript son:</p> <ol> <li>if</li> <li>else if</li> <li>else</li> <li>switch</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#estructura-basica","title":"\ud83d\udcdc Estructura B\u00e1sica","text":"<pre><code>if (condici\u00f3n) {\n  // C\u00f3digo a ejecutar si la condici\u00f3n es verdadera\n} else {\n  // C\u00f3digo a ejecutar si la condici\u00f3n es falsa\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#ejemplo-practico","title":"\ud83c\udf1f Ejemplo Pr\u00e1ctico","text":"<p>Imagina que tienes que decidir si un usuario es mayor de edad:</p> <pre><code>let edad = 18;\n\nif (edad &gt;= 18) {\n  console.log(\"Eres mayor de edad. \ud83c\udf89\");\n} else {\n  console.log(\"A\u00fan eres menor de edad. \ud83e\uddd2\");\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#diagrama-de-flujo","title":"\ud83e\udde9 Diagrama de Flujo","text":"<pre><code>        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502 Edad \u2265 18 \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502   S\u00ed      \u2502\n        \u2502   (\"Mayor de edad\") \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502   No      \u2502\n        \u2502  (\"Menor de edad\") \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#anidacion-de-condicionales-else-if","title":"\ud83c\udf00 Anidaci\u00f3n de Condicionales (else if)","text":"<p>Si necesitas evaluar m\u00faltiples condiciones, puedes usar <code>else if</code>. Esto permite evaluar varias posibilidades de forma secuencial:</p> <pre><code>let temperatura = 30;\n\nif (temperatura &gt; 30) {\n  console.log(\"\u00a1Hace mucho calor! \ud83c\udf1e\");\n} else if (temperatura &gt; 20) {\n  console.log(\"El clima es agradable. \ud83c\udf24\ufe0f\");\n} else {\n  console.log(\"\u00a1Hace fr\u00edo! \u2744\ufe0f\");\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#switch-otra-forma-de-tomar-decisiones","title":"\ud83d\udd04 Switch: Otra Forma de Tomar Decisiones","text":"<p>Cuando tienes muchas opciones, <code>switch</code> es tu mejor amigo:</p> <pre><code>let dia = \"martes\";\n\nswitch (dia) {\n  case \"lunes\":\n    console.log(\"\u00a1Empezamos la semana! \ud83d\udcaa\");\n    break;\n  case \"martes\":\n    console.log(\"\u00a1Segundo d\u00eda, seguimos adelante! \ud83d\ude80\");\n    break;\n  default:\n    console.log(\"\u00a1Disfruta tu d\u00eda! \ud83c\udf89\");\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#tips-y-buenas-practicas","title":"\ud83d\udd0d Tips y Buenas Pr\u00e1cticas","text":"<ul> <li>Usa <code>else if</code> para reducir redundancias y evitar condiciones innecesarias.</li> <li><code>switch</code> es ideal para comparar m\u00faltiples valores, como d\u00edas de la semana o niveles de acceso.</li> <li>Simplifica tu c\u00f3digo: Evita condicionales complejas dividi\u00e9ndolas en funciones.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#ejercicios-interactivos","title":"\ud83c\udfaf Ejercicios Interactivos","text":"<p>\u00a1Pon en pr\u00e1ctica lo que has aprendido con estos desaf\u00edos! \ud83d\ude80</p> <ol> <li>Crea un sistema de calificaciones: Usa <code>if-else</code> para evaluar notas escolares.</li> <li>Simulador de Clima: Usa <code>switch</code> para mostrar mensajes personalizados seg\u00fan la temporada del a\u00f1o.</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#conclusion","title":"\ud83d\udcca Conclusi\u00f3n","text":"<p>Las condicionales son fundamentales en cualquier lenguaje de programaci\u00f3n, y dominarlas har\u00e1 que tu c\u00f3digo sea m\u00e1s inteligente y eficiente. \u00a1Sigue practicando y ver\u00e1s c\u00f3mo te conviertes en un experto en decisiones! \ud83e\uddd1\u200d\ud83d\udcbb\ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/","title":"Bucles en JavaScript: Domina la Repetici\u00f3n con Estilo \ud83d\ude80\ud83d\udd04","text":"<p>En JavaScript, los bucles son la herramienta perfecta para realizar tareas repetitivas de forma eficiente. Son como las ruedas de tu bicicleta: una vez que empiezan a girar, \u00a1no paran hasta llegar a su destino! \ud83c\udf1f Vamos a explorar los tipos m\u00e1s comunes de bucles, c\u00f3mo funcionan y c\u00f3mo puedes usarlos en tus proyectos. \u00a1Acomp\u00e1\u00f1ame en este viaje interactivo con ejemplos, diagramas y un poco de diversi\u00f3n! \ud83d\ude04</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#que-son-los-bucles","title":"\ud83d\udd04 \u00bfQu\u00e9 son los Bucles?","text":"<p>Los bucles te permiten ejecutar un bloque de c\u00f3digo varias veces, hasta que una condici\u00f3n deje de cumplirse. En JavaScript, existen varios tipos de bucles que puedes usar dependiendo de la situaci\u00f3n:</p> <ol> <li>for</li> <li>while</li> <li>do...while</li> <li>for...of</li> <li>for...in</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#bucles-for-itera-con-control-total","title":"\ud83e\uddd1\u200d\ud83d\udcbb Bucles <code>for</code>: Itera con Control Total","text":"<p>El bucle <code>for</code> es ideal cuando conoces cu\u00e1ntas veces quieres repetir una acci\u00f3n. \u00a1Es como un contador que sabes exactamente hasta d\u00f3nde debe llegar!</p> <pre><code>// Ejemplo de bucle for\nfor (let i = 0; i &lt; 5; i++) {\n  console.log(`Iteraci\u00f3n n\u00famero: ${i + 1} \ud83d\udeb4\u200d\u2642\ufe0f`);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#desglose-del-codigo","title":"\ud83d\udd0d Desglose del C\u00f3digo:","text":"<ul> <li><code>let i = 0</code>: Inicia el contador.</li> <li><code>i &lt; 5</code>: Condici\u00f3n que mantiene el bucle activo.</li> <li><code>i++</code>: Incrementa el contador en 1 despu\u00e9s de cada iteraci\u00f3n.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#bucles-while-repite-hasta-que-quieras","title":"\ud83d\udd01 Bucles <code>while</code>: Repite Hasta que Quieras","text":"<p>Los bucles <code>while</code> son perfectos cuando no sabes cu\u00e1ntas veces necesitar\u00e1s repetir una acci\u00f3n, y quieres que se repita hasta que una condici\u00f3n se cumpla. \u00a1Es como seguir jugando hasta que te canses! \ud83c\udfae</p> <pre><code>let contador = 0;\n\nwhile (contador &lt; 3) {\n  console.log(`Contador: ${contador} \ud83c\udfaf`);\n  contador++;\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#desglose","title":"\ud83e\udd13 Desglose:","text":"<ul> <li>Comienza con <code>contador = 0</code>.</li> <li>Mientras <code>contador &lt; 3</code>, ejecuta el bloque de c\u00f3digo.</li> <li>Incrementa el contador despu\u00e9s de cada iteraci\u00f3n.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#dowhile-al-menos-una-vez","title":"\ud83d\udd19 <code>do...while</code>: Al Menos Una Vez","text":"<p>El bucle <code>do...while</code> garantiza que el c\u00f3digo se ejecute al menos una vez, incluso si la condici\u00f3n es falsa desde el inicio. \u00a1Piensa en esto como probar una comida nueva: al menos un bocado, aunque no est\u00e9s seguro de que te guste! \ud83c\udf55\ud83d\ude05</p> <pre><code>let intentos = 0;\n\ndo {\n  console.log(`Intento n\u00famero: ${intentos + 1} \ud83e\udd1e`);\n  intentos++;\n} while (intentos &lt; 2);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#bucles-modernos-forof-y-forin","title":"\ud83d\ude80 Bucles Modernos: <code>for...of</code> y <code>for...in</code>","text":"<ul> <li><code>for...of</code>: Ideal para iterar sobre elementos de un array, mostrando cada uno de ellos. \ud83d\udc40</li> </ul> <pre><code>let frutas = [\"\ud83c\udf4e\", \"\ud83c\udf4c\", \"\ud83c\udf47\"];\n\nfor (let fruta of frutas) {\n  console.log(`Fruta: ${fruta}`);\n}\n</code></pre> <ul> <li><code>for...in</code>: Perfecto para recorrer las propiedades de un objeto. \ud83d\udee0\ufe0f</li> </ul> <pre><code>let persona = { nombre: \"Juan\", edad: 25 };\n\nfor (let propiedad in persona) {\n  console.log(`${propiedad}: ${persona[propiedad]}`);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#consejos-pro-para-usar-bucles","title":"\ud83c\udf1f Consejos Pro para Usar Bucles","text":"<ul> <li>Evita los bucles infinitos: Aseg\u00farate de que siempre haya una condici\u00f3n que detenga el bucle.</li> <li>Utiliza <code>break</code> y <code>continue</code>: <code>break</code> para salir del bucle y <code>continue</code> para saltar a la siguiente iteraci\u00f3n.</li> <li>Anidar con cuidado: Los bucles anidados pueden volverse complejos r\u00e1pidamente. \u00dasalos solo cuando sea necesario.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#ejercicios-interactivos","title":"\ud83e\uddea Ejercicios Interactivos","text":"<ol> <li>Crea una tabla de multiplicar usando <code>for</code>. \ud83e\uddee</li> <li>Simula una cuenta regresiva con <code>while</code>. \ud83d\ude80</li> <li>Recorre los elementos de un array de emojis con <code>for...of</code>. \ud83c\udf89</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#conclusion","title":"\ud83c\udfc1 Conclusi\u00f3n","text":"<p>Los bucles son esenciales en la programaci\u00f3n y dominarlos te permitir\u00e1 automatizar tareas repetitivas con facilidad. Recuerda siempre planificar bien la condici\u00f3n de parada para evitar problemas y sigue practicando para mejorar tu fluidez con ellos. \u00a1Felices iteraciones! \ud83d\ude80\ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/","title":"Funciones y Par\u00e1metros en JavaScript","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#que-son-las-funciones-en-javascript","title":"\ud83e\uddd1\u200d\ud83d\udcbb \u00bfQu\u00e9 son las Funciones en JavaScript?","text":"<p>Las funciones son bloques de c\u00f3digo reutilizables que permiten realizar tareas espec\u00edficas. En JavaScript, son fundamentales para la modularizaci\u00f3n del c\u00f3digo y la reutilizaci\u00f3n de l\u00f3gica, ayudando a mantener el c\u00f3digo limpio y organizado.</p> <pre><code>// Declaraci\u00f3n de una funci\u00f3n simple\nfunction saludar() {\n    console.log(\"\u00a1Hola, mundo!\");\n}\n\n// Llamada a la funci\u00f3n\nsaludar(); // Output: \u00a1Hola, mundo!\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#tipos-de-funciones-en-javascript","title":"\ud83d\udd0d Tipos de Funciones en JavaScript","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#1-funciones-declarativas","title":"1. Funciones Declarativas","text":"<p>Son las funciones definidas utilizando la palabra clave <code>function</code>. Son f\u00e1ciles de leer y permiten ser llamadas antes de ser declaradas, gracias al concepto de hoisting.</p> <pre><code>// Declaraci\u00f3n de funci\u00f3n\nfunction sumar(a, b) {\n    return a + b;\n}\n\nconsole.log(sumar(3, 4)); // Output: 7\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#2-funciones-anonimas-funciones-de-expresion","title":"2. Funciones An\u00f3nimas (Funciones de Expresi\u00f3n)","text":"<p>Son funciones sin nombre que se asignan a variables. A diferencia de las declarativas, no pueden ser llamadas antes de su definici\u00f3n.</p> <pre><code>// Funci\u00f3n an\u00f3nima asignada a una variable\nconst restar = function(a, b) {\n    return a - b;\n};\n\nconsole.log(restar(10, 3)); // Output: 7\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#3-funciones-flecha-arrow-functions","title":"3. Funciones Flecha (Arrow Functions)","text":"<p>Introducidas en ES6, las funciones flecha (<code>=&gt;</code>) permiten una sintaxis m\u00e1s compacta y no tienen su propio <code>this</code>, lo cual es \u00fatil en algunos contextos.</p> <pre><code>// Ejemplo de funci\u00f3n flecha\nconst multiplicar = (a, b) =&gt; a * b;\n\nconsole.log(multiplicar(5, 2)); // Output: 10\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#parametros-y-argumentos-en-javascript","title":"\ud83c\udfaf Par\u00e1metros y Argumentos en JavaScript","text":"<p>Los par\u00e1metros son variables que se definen en la declaraci\u00f3n de la funci\u00f3n, mientras que los argumentos son los valores que pasamos a la funci\u00f3n cuando la llamamos.</p> <pre><code>// Funci\u00f3n con par\u00e1metros\nfunction presentar(nombre, edad) {\n    console.log(`\u00a1Hola! Soy ${nombre} y tengo ${edad} a\u00f1os.`);\n}\n\n// Llamada a la funci\u00f3n con argumentos\npresentar(\"Ana\", 25); // Output: \u00a1Hola! Soy Ana y tengo 25 a\u00f1os.\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#parametros-predeterminados","title":"\ud83c\udf1f Par\u00e1metros Predeterminados","text":"<p>JavaScript permite definir valores predeterminados para los par\u00e1metros. Si no se proporciona un argumento, la funci\u00f3n usar\u00e1 el valor por defecto.</p> <pre><code>// Par\u00e1metro con valor predeterminado\nfunction saludar(nombre = \"Invitado\") {\n    console.log(`Hola, ${nombre}!`);\n}\n\nsaludar(); // Output: Hola, Invitado!\nsaludar(\"Carlos\"); // Output: Hola, Carlos!\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#parametros-rest-y-spread","title":"\ud83d\udcca Par\u00e1metros Rest y Spread","text":"<ul> <li>Rest (<code>...</code>): Permite agrupar m\u00faltiples argumentos en un solo par\u00e1metro como un array.</li> </ul> <pre><code>function sumarTodos(...numeros) {\n    return numeros.reduce((total, num) =&gt; total + num, 0);\n}\n\nconsole.log(sumarTodos(1, 2, 3, 4)); // Output: 10\n</code></pre> <ul> <li>Spread (<code>...</code>): Permite expandir un array en m\u00faltiples elementos, \u00fatil para pasar un conjunto de valores a una funci\u00f3n.</li> </ul> <pre><code>const numeros = [10, 20, 30];\nconsole.log(Math.max(...numeros)); // Output: 30\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#funciones-anidadas-y-funciones-de-orden-superior","title":"\ud83c\udfa8 Funciones Anidadas y Funciones de Orden Superior","text":"<p>JavaScript permite funciones dentro de otras funciones, as\u00ed como pasar funciones como argumentos o retornarlas como valores.</p> <pre><code>// Funci\u00f3n de orden superior\nfunction calcular(operacion, a, b) {\n    return operacion(a, b);\n}\n\n// Funci\u00f3n que se pasa como argumento\nconst division = (x, y) =&gt; x / y;\n\nconsole.log(calcular(division, 10, 2)); // Output: 5\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/","title":"Trabajando con Objetos JSON y Matrices en JavaScript \ud83d\ude80","text":"<p>JavaScript, siendo uno de los lenguajes m\u00e1s utilizados en el desarrollo web, se destaca por su capacidad de manejar estructuras de datos de manera eficiente, siendo los objetos JSON y las matrices (arrays) dos de los pilares fundamentales. En este art\u00edculo, exploraremos en profundidad qu\u00e9 son los objetos JSON y las matrices, c\u00f3mo se utilizan, y presentaremos algunas t\u00e9cnicas avanzadas para sacar el m\u00e1ximo provecho de estas estructuras.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#que-es-json-javascript-object-notation","title":"\ud83d\udccc \u00bfQu\u00e9 es JSON? (JavaScript Object Notation)","text":"<p>JSON (JavaScript Object Notation) es un formato ligero de intercambio de datos que es f\u00e1cil de leer y escribir tanto para humanos como para m\u00e1quinas. Se utiliza ampliamente para transmitir datos entre un servidor y una aplicaci\u00f3n web como texto sin formato que se puede convertir f\u00e1cilmente en objetos JavaScript.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#estructura-de-un-objeto-json","title":"\ud83d\udccb Estructura de un Objeto JSON","text":"<p>Los objetos JSON est\u00e1n compuestos por pares clave-valor. Las claves son cadenas de texto (strings) y los valores pueden ser de varios tipos: cadenas, n\u00fameros, arrays, otros objetos, booleanos, o incluso <code>null</code>.</p> <pre><code>// Ejemplo de un objeto JSON en JavaScript\nconst usuario = {\n    nombre: \"Juan\",\n    edad: 30,\n    email: \"juan@example.com\",\n    activo: true,\n    direccion: {\n        calle: \"Av. Siempre Viva\",\n        ciudad: \"Springfield\"\n    },\n    habilidades: [\"JavaScript\", \"React\", \"Node.js\"]\n};\n</code></pre> <p>En este ejemplo, el objeto <code>usuario</code> tiene varias propiedades, incluidas otras estructuras como arrays y objetos anidados.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#uso-de-json-en-aplicaciones","title":"\ud83d\udce5 Uso de JSON en Aplicaciones","text":"<p>JSON se utiliza principalmente para intercambiar datos entre un cliente y un servidor. Es com\u00fanmente utilizado en APIs RESTful donde los datos se env\u00edan y reciben en formato JSON.</p> <pre><code>// Convertir un objeto JavaScript en una cadena JSON\nconst jsonString = JSON.stringify(usuario);\nconsole.log(jsonString);\n\n// Convertir una cadena JSON de vuelta a un objeto JavaScript\nconst objetoUsuario = JSON.parse(jsonString);\nconsole.log(objetoUsuario);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#que-es-una-matriz-array-en-javascript","title":"\ud83d\udd04 \u00bfQu\u00e9 es una Matriz (Array) en JavaScript?","text":"<p>Las matrices son colecciones ordenadas de elementos que permiten almacenar m\u00faltiples valores en un solo lugar. Cada elemento en una matriz tiene un \u00edndice, comenzando desde 0, lo que facilita el acceso y manipulaci\u00f3n de los datos.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#creacion-y-manipulacion-de-arrays","title":"\ud83d\udccb Creaci\u00f3n y Manipulaci\u00f3n de Arrays","text":"<p>Los arrays pueden contener cualquier tipo de dato, incluidos n\u00fameros, strings, otros arrays y objetos JSON.</p> <pre><code>// Ejemplo b\u00e1sico de un array\nconst frutas = [\"manzana\", \"banana\", \"cereza\"];\n\n// Acceder a un elemento\nconsole.log(frutas[1]); // Output: banana\n\n// A\u00f1adir un elemento al final\nfrutas.push(\"naranja\");\n\n// Eliminar el \u00faltimo elemento\nfrutas.pop();\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#arrays-multidimensionales","title":"\ud83c\udf1f Arrays Multidimensionales","text":"<p>Las matrices tambi\u00e9n pueden ser multidimensionales, es decir, pueden contener otros arrays, permitiendo la creaci\u00f3n de estructuras complejas como tablas o listas de listas.</p> <pre><code>// Array bidimensional (matriz)\nconst matriz = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n// Acceso a elementos en una matriz\nconsole.log(matriz[1][2]); // Output: 6\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#tecnicas-avanzadas-para-manipular-objetos-json-y-arrays","title":"\ud83d\ude80 T\u00e9cnicas Avanzadas para Manipular Objetos JSON y Arrays","text":"<p>Para aprovechar al m\u00e1ximo los objetos JSON y las matrices, es \u00fatil conocer algunos m\u00e9todos avanzados que JavaScript ofrece para la manipulaci\u00f3n de datos.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#1-mapeo-de-datos-con-map","title":"1. Mapeo de Datos con <code>map()</code>","text":"<p>La funci\u00f3n <code>map()</code> transforma cada elemento de un array seg\u00fan una funci\u00f3n de callback, devolviendo un nuevo array.</p> <pre><code>// Ejemplo de mapeo de un array de objetos\nconst productos = [\n    { id: 1, nombre: \"Laptop\", precio: 800 },\n    { id: 2, nombre: \"Teclado\", precio: 50 },\n    { id: 3, nombre: \"Rat\u00f3n\", precio: 25 }\n];\n\nconst nombresProductos = productos.map(producto =&gt; producto.nombre);\nconsole.log(nombresProductos); // [\"Laptop\", \"Teclado\", \"Rat\u00f3n\"]\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#2-filtrado-con-filter","title":"2. Filtrado con <code>filter()</code>","text":"<p>El m\u00e9todo <code>filter()</code> permite crear un nuevo array que contiene solo los elementos que cumplen con una condici\u00f3n espec\u00edfica.</p> <pre><code>// Filtrar productos cuyo precio sea mayor a 30\nconst productosCaros = productos.filter(producto =&gt; producto.precio &gt; 30);\nconsole.log(productosCaros); // [{ id: 1, nombre: \"Laptop\", precio: 800 }, { id: 2, nombre: \"Teclado\", precio: 50 }]\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#3-reducir-datos-con-reduce","title":"3. Reducir Datos con <code>reduce()</code>","text":"<p><code>reduce()</code> permite combinar todos los elementos de un array en un solo valor, \u00fatil para c\u00e1lculos acumulativos.</p> <pre><code>// Sumar los precios de los productos\nconst totalPrecio = productos.reduce((total, producto) =&gt; total + producto.precio, 0);\nconsole.log(`Total: $${totalPrecio}`); // Total: $875\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#manipulacion-de-objetos-json-con-funciones-avanzadas","title":"\ud83d\udd27 Manipulaci\u00f3n de Objetos JSON con Funciones Avanzadas","text":"<p>Los objetos JSON tambi\u00e9n pueden ser manipulados usando funciones avanzadas que permiten recorrer y modificar los datos de manera eficiente.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#uso-de-objectkeys-objectvalues-y-objectentries","title":"Uso de <code>Object.keys()</code>, <code>Object.values()</code> y <code>Object.entries()</code>","text":"<p>Estas funciones permiten extraer las claves, valores o ambos de un objeto JSON.</p> <pre><code>// Obtener las claves de un objeto\nconst claves = Object.keys(usuario);\nconsole.log(claves); // [\"nombre\", \"edad\", \"email\", \"activo\", \"direccion\", \"habilidades\"]\n\n// Obtener los valores\nconst valores = Object.values(usuario);\nconsole.log(valores);\n\n// Obtener pares clave-valor\nconst pares = Object.entries(usuario);\nconsole.log(pares);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/","title":"Ejercicios","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#ejercicios-de-javascript-sintaxis-y-conceptos-basicos","title":"Ejercicios de JavaScript: Sintaxis y conceptos b\u00e1sicos","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#1-variables-declaracion-inicializacion-y-ambito","title":"1. Variables: Declaraci\u00f3n, Inicializaci\u00f3n, y \u00c1mbito","text":"<p>Ejercicio 1.1: Declaraci\u00f3n e Inicializaci\u00f3n de Variables Declara tres variables: una de tipo <code>var</code>, otra de tipo <code>let</code> y otra de tipo <code>const</code>. Inicial\u00edzalas con cualquier valor.</p> <pre><code>// Declara una variable con var\nvar nombre = \"Juan\";\n\n// Declara una variable con let\nlet edad = 25;\n\n// Declara una constante con const\nconst PI = 3.1416;\n</code></pre> <p>Ejercicio 1.2: \u00c1mbito de Variables Escribe un c\u00f3digo donde demuestres el comportamiento de <code>var</code>, <code>let</code>, y <code>const</code> dentro y fuera de un bloque (<code>if</code>, <code>for</code>, etc.).</p> <pre><code>function pruebaAmbito() {\n    if (true) {\n        var variableVar = \"Dentro del bloque con var\";\n        let variableLet = \"Dentro del bloque con let\";\n        const variableConst = \"Dentro del bloque con const\";\n    }\n    console.log(variableVar); // Accesible\n    console.log(variableLet); // Error: No accesible\n    console.log(variableConst); // Error: No accesible\n}\npruebaAmbito();\n</code></pre> <p>Ejercicio 1.3: Reasignaci\u00f3n de Variables Declara una variable con <code>let</code> y reas\u00edgnale un nuevo valor m\u00e1s adelante en el c\u00f3digo. Haz lo mismo con una variable <code>var</code> y una constante <code>const</code> para observar qu\u00e9 sucede.</p> <pre><code>let ciudad = \"Madrid\";\nciudad = \"Barcelona\"; // Reasignaci\u00f3n v\u00e1lida\n\nvar pais = \"Espa\u00f1a\";\npais = \"Francia\"; // Reasignaci\u00f3n v\u00e1lida\n\nconst continente = \"Europa\";\n// continente = \"Asia\"; // Error: No se puede reasignar una constante\n</code></pre> <p>Ejercicio 1.4: Hoisting Demuestra el comportamiento del hoisting con <code>var</code>, <code>let</code> y <code>const</code>. Escribe un c\u00f3digo donde declares variables despu\u00e9s de usarlas, para ver c\u00f3mo act\u00faa el hoisting en cada caso.</p> <pre><code>console.log(x); // Undefined, debido al hoisting de var\nvar x = 5;\n\ntry {\n    console.log(y); // Error: no se puede acceder antes de la declaraci\u00f3n\n    let y = 10;\n} catch (e) {\n    console.log(e.message);\n}\n\ntry {\n    console.log(z); // Error: no se puede acceder antes de la declaraci\u00f3n\n    const z = 15;\n} catch (e) {\n    console.log(e.message);\n}\n</code></pre> <p>Ejercicio 1.5: \u00c1mbito Funcional vs \u00c1mbito de Bloque Crea una funci\u00f3n y dentro de ella declara variables con <code>var</code>, <code>let</code> y <code>const</code>. Muestra la diferencia de comportamiento de <code>var</code> frente a <code>let</code> y <code>const</code> en el \u00e1mbito funcional y de bloque.</p> <pre><code>function pruebaAmbitoFuncional() {\n    if (true) {\n        var varEnBloque = \"var dentro del bloque\";\n        let letEnBloque = \"let dentro del bloque\";\n        const constEnBloque = \"const dentro del bloque\";\n    }\n    console.log(varEnBloque); // Accesible: var tiene \u00e1mbito funcional\n    try {\n        console.log(letEnBloque); // Error: let tiene \u00e1mbito de bloque\n    } catch (e) {\n        console.log(e.message);\n    }\n    try {\n        console.log(constEnBloque); // Error: const tiene \u00e1mbito de bloque\n    } catch (e) {\n        console.log(e.message);\n    }\n}\npruebaAmbitoFuncional();\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#2-tipos-de-datos-y-conversion-de-tipos","title":"2. Tipos de Datos y Conversi\u00f3n de Tipos","text":"<p>Ejercicio 2.1: Tipos de Datos B\u00e1sicos Declara variables de los siguientes tipos: string, number, boolean, array, objeto.</p> <pre><code>let cadena = \"Hola Mundo\";\nlet numero = 42;\nlet booleano = true;\nlet arreglo = [1, 2, 3, 4];\nlet objeto = { nombre: \"Juan\", edad: 25 };\n</code></pre> <p>Ejercicio 2.2: Conversi\u00f3n de Tipos Convierte los siguientes valores:  1. De n\u00famero a string. 2. De string a n\u00famero. 3. De booleano a n\u00famero.</p> <pre><code>let num = 10;\nlet str = num.toString(); // Conversi\u00f3n a string\nlet nuevoNum = Number(\"20\"); // Conversi\u00f3n a n\u00famero\nlet booleanoANum = Number(true); // Conversi\u00f3n de booleano a n\u00famero (1)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#3-asignaciones","title":"3. Asignaciones","text":"<p>Ejercicio 3.1: Asignaciones B\u00e1sicas Declara una variable y as\u00edgnale un valor. Luego, actualiza su valor usando operadores de asignaci\u00f3n como <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>.</p> <pre><code>let contador = 5;\ncontador += 3; // Ahora contador es 8\ncontador -= 2; // Ahora contador es 6\ncontador *= 2; // Ahora contador es 12\ncontador /= 3; // Ahora contador es 4\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#4-operadores","title":"4. Operadores","text":"<p>Ejercicio 4.1: Operadores Aritm\u00e9ticos Crea una funci\u00f3n que reciba dos n\u00fameros y devuelva la suma, resta, multiplicaci\u00f3n, y divisi\u00f3n de ambos.</p> <pre><code>function operacionesBasicas(a, b) {\n    console.log(\"Suma:\", a + b);\n    console.log(\"Resta:\", a - b);\n    console.log(\"Multiplicaci\u00f3n:\", a * b);\n    console.log(\"Divisi\u00f3n:\", a / b);\n}\noperacionesBasicas(10, 5);\n</code></pre> <p>Ejercicio 4.2: Operadores L\u00f3gicos Usa operadores l\u00f3gicos (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>) para evaluar condiciones.</p> <pre><code>let a = true;\nlet b = false;\n\nconsole.log(a &amp;&amp; b); // false\nconsole.log(a || b); // true\nconsole.log(!a); // false\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#5-comentarios-al-codigo","title":"5. Comentarios al C\u00f3digo","text":"<p>Ejercicio 5.1: A\u00f1ade Comentarios Escribe un c\u00f3digo b\u00e1sico y a\u00f1ade comentarios que expliquen cada paso. Usa comentarios de l\u00ednea y de bloque.</p> <pre><code>// Comentario de una l\u00ednea\nlet numero = 10; // Inicializa una variable\n\n/*\n   Este bloque de c\u00f3digo multiplica el valor de la variable por 2\n   y lo imprime en la consola.\n*/\nnumero *= 2;\nconsole.log(numero);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#6-sentencias-y-condicionales","title":"6. Sentencias y Condicionales","text":"<p>Ejercicio 6.1: Condicionales If/Else Escribe una funci\u00f3n que reciba un n\u00famero y muestre un mensaje dependiendo de si es positivo, negativo o cero.</p> <pre><code>function evaluarNumero(numero) {\n    if (numero &gt; 0) {\n        console.log(\"El n\u00famero es positivo\");\n    } else if (numero &lt; 0) {\n        console.log(\"El n\u00famero es negativo\");\n    } else {\n        console.log(\"El n\u00famero es cero\");\n    }\n}\nevaluarNumero(10);\n</code></pre> <p>Ejercicio 6.2: Switch Case Crea un programa que use <code>switch</code> para elegir una acci\u00f3n basada en el d\u00eda de la semana.</p> <pre><code>let dia = \"martes\";\n\nswitch (dia) {\n    case \"lunes\":\n        console.log(\"Es lunes, comienzo de la semana\");\n        break;\n    case \"martes\":\n        console.log(\"Es martes, sigue adelante\");\n        break;\n    case \"viernes\":\n        console.log(\"Es viernes, casi fin de semana\");\n        break;\n    default:\n        console.log(\"D\u00eda no v\u00e1lido\");\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#7-bucles","title":"7. Bucles","text":"<p>Ejercicio 7.1: Bucle For Escribe un bucle <code>for</code> que imprima los n\u00fameros del 1 al 10.</p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    console.log(i);\n}\n</code></pre> <p>Ejercicio 7.2: Bucle While Usa un bucle <code>while</code> para contar hacia atr\u00e1s desde 5 hasta 1.</p> <pre><code>let contador = 5;\nwhile (contador &gt; 0) {\n    console.log(contador);\n    contador--;\n}\n</code></pre> <p>Ejercicio 7.3: Sentencias de Ruptura de Bucle Usa las sentencias <code>break</code> y <code>continue</code> en un bucle <code>for</code>.</p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i === 5) {\n        continue; // Salta la iteraci\u00f3n cuando i es 5\n    }\n    if (i === 8) {\n        break; // Termina el bucle cuando i es 8\n    }\n    console.log(i);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios/","title":"Ejercicios B\u00e1sicos de JavaScript","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios/#nivel-1-principiante","title":"Nivel 1: Principiante","text":"<ol> <li> <p>Declaraci\u00f3n e Inicializaci\u00f3n de Variables</p> <ul> <li>Declara tres variables usando <code>let</code>, <code>const</code>, y <code>var</code>. Inicializa una con tu nombre, otra con tu edad, y otra con un booleano que indique si te gusta programar. Muestra los valores en la consola.</li> </ul> </li> <li> <p>Suma de Dos N\u00fameros</p> <ul> <li>Declara dos variables <code>a</code> y <code>b</code>, as\u00edgnales valores num\u00e9ricos y muestra en la consola la suma de ambos.</li> </ul> </li> <li> <p>Concatenaci\u00f3n de Cadenas</p> <ul> <li>Declara dos variables con tu nombre y apellido. Conc\u00e1t\u00e9nalas para mostrar tu nombre completo en la consola.</li> </ul> </li> <li> <p>Conversi\u00f3n de Tipos</p> <ul> <li>Declara una variable con el valor <code>\"50\"</code>. Convierte esta variable a un n\u00famero utilizando <code>Number()</code> y muestra el tipo resultante usando <code>typeof</code>.</li> </ul> </li> <li> <p>Operaciones Matem\u00e1ticas B\u00e1sicas</p> <ul> <li>Declara dos variables num\u00e9ricas. Realiza y muestra en la consola la suma, resta, multiplicaci\u00f3n, y divisi\u00f3n de ambas.</li> </ul> </li> <li> <p>Condicional Simple: Mayor o Menor</p> <ul> <li>Pide al usuario un n\u00famero y verifica si es mayor o menor que 10. Muestra un mensaje indicando el resultado.</li> </ul> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios/#nivel-2-intermedio","title":"Nivel 2: Intermedio","text":"<ol> <li> <p>Determinar Par o Impar</p> <ul> <li>Escribe un programa que pida un n\u00famero al usuario y determine si es par o impar usando un condicional <code>if-else</code>.</li> </ul> </li> <li> <p>Contador de N\u00fameros del 1 al 10</p> <ul> <li>Usa un bucle <code>for</code> para imprimir los n\u00fameros del 1 al 10 en la consola.</li> </ul> </li> <li> <p>Calcular Factorial</p> <ul> <li>Escribe un programa que pida un n\u00famero al usuario y calcule su factorial utilizando un bucle <code>while</code>.</li> </ul> </li> <li> <p>Tabla de Multiplicar</p> <ul> <li>Pide al usuario un n\u00famero y muestra su tabla de multiplicar del 1 al 10 usando un bucle <code>for</code>.</li> </ul> </li> <li> <p>Contar Vocales en una Cadena</p> <ul> <li>Solicita al usuario una cadena de texto y cuenta cu\u00e1ntas vocales tiene. Imprime el resultado en la consola.</li> </ul> </li> <li> <p>Array de Nombres</p> <ul> <li>Declara un array con tres nombres y usa un bucle <code>for</code> para imprimir cada nombre en la consola.</li> </ul> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios/#nivel-3-avanzado","title":"Nivel 3: Avanzado","text":"<ol> <li> <p>Calculadora B\u00e1sica</p> <ul> <li>Crea un programa que pida dos n\u00fameros y un operador (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) al usuario. Realiza la operaci\u00f3n y muestra el resultado en la consola.</li> </ul> </li> <li> <p>Contador de Palabras</p> <ul> <li>Solicita una frase al usuario y cuenta cu\u00e1ntas palabras tiene. Usa <code>split()</code> para separar las palabras y cuenta la longitud del array resultante.</li> </ul> </li> <li> <p>Invertir una Cadena</p> <ul> <li>Escribe un programa que tome una cadena ingresada por el usuario e imprima la cadena invertida.</li> </ul> </li> <li> <p>Encuentra el N\u00famero Mayor</p> <ul> <li>Pide tres n\u00fameros al usuario y determina cu\u00e1l es el mayor utilizando condicionales.</li> </ul> </li> <li> <p>N\u00famero Primo</p> <ul> <li>Pide al usuario un n\u00famero y determina si es primo. Imprime un mensaje indicando si es primo o no.</li> </ul> </li> <li> <p>Clase B\u00e1sica de C\u00edrculo</p> <ul> <li>Crea una clase <code>C\u00edrculo</code> con un atributo <code>radio</code>. A\u00f1ade un m\u00e9todo para calcular el \u00e1rea del c\u00edrculo. Instancia la clase y muestra el \u00e1rea en la consola.</li> </ul> </li> <li> <p>Sistema de Notas</p> <ul> <li>Pide al usuario su calificaci\u00f3n y usa condicionales para determinar si aprob\u00f3 o reprob\u00f3. Usa las siguientes reglas: \u2265 60 aprobado, &lt; 60 reprobado.</li> </ul> </li> <li> <p>Gesti\u00f3n de Tareas (Clases y Arrays)</p> <ul> <li>Crea una clase <code>Tarea</code> con atributos <code>nombre</code> y <code>completada</code>. Crea un array de tareas y a\u00f1ade m\u00e9todos para agregar, completar y mostrar tareas pendientes o completadas.</li> </ul> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios/#nivel-4-desafio","title":"Nivel 4: Desaf\u00edo","text":"<ol> <li> <p>Generador de Contrase\u00f1as Aleatorias</p> <ul> <li>Crea una funci\u00f3n que genere contrase\u00f1as aleatorias de longitud <code>n</code> usando caracteres alfanum\u00e9ricos. Pide al usuario la longitud de la contrase\u00f1a y genera una.</li> </ul> </li> <li> <p>Calculadora de Edad</p> <ul> <li>Pide al usuario su fecha de nacimiento y calcula su edad actual. Usa la clase <code>Date</code> para realizar los c\u00e1lculos.</li> </ul> </li> <li> <p>Fibonacci con Bucle</p> <ul> <li>Crea un programa que genere la secuencia de Fibonacci hasta el d\u00e9cimo t\u00e9rmino usando un bucle.</li> </ul> </li> <li> <p>Ordenar N\u00fameros de un Array</p> <ul> <li>Crea un array con n\u00fameros desordenados y escribe un programa que los ordene de menor a mayor sin usar el m\u00e9todo <code>.sort()</code>.</li> </ul> </li> <li> <p>Adivina el N\u00famero</p> <ul> <li>Crea un juego donde la m\u00e1quina elija un n\u00famero aleatorio entre 1 y 100. El usuario debe adivinarlo con pistas como \u201cmayor\u201d o \u201cmenor\u201d hasta acertar.</li> </ul> </li> <li> <p>Sistema de Gesti\u00f3n de Libros (Clases)</p> <ul> <li>Crea una clase <code>Libro</code> con atributos <code>t\u00edtulo</code>, <code>autor</code> y <code>a\u00f1o</code>. A\u00f1ade m\u00e9todos para mostrar la informaci\u00f3n del libro y gestionar una biblioteca a\u00f1adiendo, eliminando y mostrando libros.</li> </ul> </li> <li> <p>Simulador de Compra de Tienda</p> <ul> <li>Crea un programa donde el usuario ingrese el precio de varios productos y calcule el total a pagar con un 10% de descuento si la compra supera los 100 euros.</li> </ul> </li> <li> <p>Calculadora de Promedio de Calificaciones</p> <ul> <li>Pide al usuario ingresar varias calificaciones y calcula el promedio. Muestra si aprob\u00f3 o reprob\u00f3 bas\u00e1ndose en el promedio calculado.</li> </ul> </li> <li> <p>Generar N\u00fameros Aleatorios sin Repetir</p> <ul> <li>Escribe un programa que genere 5 n\u00fameros aleatorios entre 1 y 20 sin que se repitan y los muestre en pantalla.</li> </ul> </li> <li> <p>Sistema de Reservas de Asientos (Matrices)</p> <ul> <li>Crea una matriz que simule un sistema de reservas de asientos en un teatro. Permite al usuario reservar, cancelar y ver el estado de los asientos.</li> </ul> </li> </ol>"}]}