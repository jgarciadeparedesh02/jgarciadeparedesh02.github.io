{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u00a1Bienvenidos al M\u00f3dulo de Desarrollo Web en Entorno Cliente!","text":"<p>\u00a1Hola! Nos complace darte la bienvenida a este emocionante m\u00f3dulo sobre Desarrollo Web en Entorno Cliente. A lo largo de este curso, aprender\u00e1s las herramientas, lenguajes y t\u00e9cnicas fundamentales para crear aplicaciones web din\u00e1micas, interactivas y funcionales que funcionen en el navegador de tus usuarios.</p>"},{"location":"#que-aprenderas","title":"\u00bfQu\u00e9 aprender\u00e1s?","text":"<p>En este m\u00f3dulo, exploraremos una amplia gama de temas esenciales para el desarrollo en el lado del cliente, incluyendo:</p> <ul> <li>HTML y CSS: La estructura y estilo de las p\u00e1ginas web.</li> <li>JavaScript: El lenguaje de programaci\u00f3n que da vida a las aplicaciones en el navegador.</li> <li>DOM (Document Object Model): C\u00f3mo manipular din\u00e1micamente el contenido de una p\u00e1gina web.</li> <li>Eventos y Formularios: Interacci\u00f3n entre la web y el usuario.</li> <li>Ajax y Comunicaci\u00f3n As\u00edncrona: T\u00e9cnicas para actualizar el contenido de las p\u00e1ginas web sin recargar.</li> <li>Frameworks de Desarrollo: Como React, Angular, y Vue.js, que te permitir\u00e1n construir interfaces m\u00e1s complejas y eficientes.</li> <li>Herramientas de Desarrollo: Uso de entornos como Visual Studio Code, WebStorm y herramientas de depuraci\u00f3n de navegadores.</li> </ul>"},{"location":"#objetivos-del-modulo","title":"Objetivos del M\u00f3dulo","text":"<p>Al final del curso, ser\u00e1s capaz de:</p> <ul> <li>Desarrollar aplicaciones web funcionales y atractivas.</li> <li>Utilizar frameworks de JavaScript como React o Angular para crear interfaces de usuario din\u00e1micas y escalables.</li> <li>Comprender el ciclo de vida del desarrollo en el entorno cliente.</li> <li>Manipular elementos del DOM y gestionar eventos de forma eficiente.</li> <li>Utilizar t\u00e9cnicas de programaci\u00f3n modernas como el manejo de promesas, funciones as\u00edncronas, y llamadas a APIs.</li> <li>Implementar componentes reutilizables y gestionar el estado de una aplicaci\u00f3n con frameworks modernos.</li> </ul>"},{"location":"#recursos-disponibles","title":"Recursos Disponibles","text":"<p>Para ayudarte a lo largo del m\u00f3dulo, tendr\u00e1s acceso a:</p> <ul> <li>Documentaci\u00f3n: Gu\u00edas y ejemplos pr\u00e1cticos de HTML, CSS, JavaScript, React, Angular, y m\u00e1s.</li> <li>Foros de Discusi\u00f3n: Espacios para resolver dudas con tus compa\u00f1eros y profesores.</li> <li>Ejercicios y Proyectos: Actividades pr\u00e1cticas para poner en uso lo aprendido.</li> <li>Revisiones de C\u00f3digo: Comentarios sobre tus trabajos para mejorar continuamente.</li> </ul>"},{"location":"#que-necesitas","title":"\u00bfQu\u00e9 necesitas?","text":"<ul> <li>Conocimientos b\u00e1sicos de programaci\u00f3n en cualquier lenguaje (deseable).</li> <li>Un editor de c\u00f3digo como Visual Studio Code.</li> <li>Un navegador moderno como Google Chrome o Mozilla Firefox.</li> <li>Ganas de aprender y explorar el mundo del desarrollo web, incluyendo frameworks como React y Angular.</li> </ul>"},{"location":"#comencemos","title":"\u00a1Comencemos!","text":"<p>Estamos entusiasmados de acompa\u00f1arte en este viaje hacia convertirte en un desarrollador web m\u00e1s competente. Aprovecha los recursos, participa activamente, y sobre todo, divi\u00e9rtete programando. </p> <p>\u00a1El futuro del desarrollo web comienza aqu\u00ed!</p> <p>Info</p> <p>No olvides consultar regularmente el calendario de actividades y las fechas de entrega para mantenerte al d\u00eda con el curso.</p>"},{"location":"clase-git/","title":"Clase git","text":"<p>\u00a1Vamos a darle un toque animado y m\u00e1s visual a esos apuntes sobre Git y GitHub! A\u00f1adiremos emojis, un tono m\u00e1s amigable, y explicaremos la instalaci\u00f3n de Git en Windows, la carpeta <code>.git</code>, y c\u00f3mo crear un flujo de trabajo con Git y GitHub. \u00a1All\u00e1 vamos! \ud83d\ude80</p>"},{"location":"clase-git/#apuntes-introduccion-a-git-y-github","title":"\ud83d\udcdd Apuntes: Introducci\u00f3n a Git y GitHub","text":""},{"location":"clase-git/#1-que-es-git","title":"1\ufe0f\u20e3 \u00bfQu\u00e9 es Git? \ud83e\udd14","text":"<ul> <li>Git es un sistema de control de versiones distribuido que te permite llevar un seguimiento de los cambios en tu c\u00f3digo, colaborar con otros desarrolladores, \u00a1y hasta retroceder en el tiempo si algo sale mal! \ud83d\udd70\ufe0f</li> <li>Un Repositorio (repo) es como una caja fuerte para tu c\u00f3digo y sus versiones. Puede ser local (en tu propia m\u00e1quina) o remoto (en un servidor como GitHub).</li> </ul>"},{"location":"clase-git/#2-que-es-github","title":"2\ufe0f\u20e3 \u00bfQu\u00e9 es GitHub? \ud83c\udf10","text":"<ul> <li>GitHub es una plataforma basada en la web que utiliza Git para gestionar versiones de tu c\u00f3digo. \u00a1Pero GitHub es mucho m\u00e1s! Puedes gestionar proyectos, realizar integraciones continuas (CI/CD), publicar tu web con GitHub Pages, \u00a1y mucho m\u00e1s! \ud83c\udf89</li> </ul>"},{"location":"clase-git/#3-instalacion-de-git-en-windows","title":"3\ufe0f\u20e3 Instalaci\u00f3n de Git en Windows \ud83d\udda5\ufe0f","text":"<p>Para empezar a usar Git, necesitamos instalarlo:</p> <ol> <li>Descarga Git para Windows: Busca \"Descargar Git para Windows\" y sigue el asistente de instalaci\u00f3n. \ud83d\udc68\u200d\ud83d\udcbb</li> <li>Verifica la Instalaci\u00f3n: Abre la terminal de Git (Git Bash) y escribe:</li> </ol> <pre><code>git --version\n</code></pre> <p>Si ves un n\u00famero de versi\u00f3n, \u00a1est\u00e1s listo! \ud83c\udf8a</p>"},{"location":"clase-git/#4-primeros-pasos-con-git-crea-tu-primer-repositorio","title":"4\ufe0f\u20e3 Primeros Pasos con Git: \u00a1Crea tu Primer Repositorio! \ud83d\udcc2","text":""},{"location":"clase-git/#41-inicializacion-del-repositorio-local","title":"4.1. Inicializaci\u00f3n del Repositorio Local \ud83d\uddc3\ufe0f","text":"<ol> <li>Abre Git Bash y navega hasta la carpeta donde quieres crear tu proyecto.</li> <li>Ejecuta <code>git init</code> para inicializar un nuevo repositorio:</li> </ol> <pre><code>git init\n</code></pre> <p>\u00a1Voila! Ahora tu carpeta es un repositorio de Git. Esto crea una carpeta oculta <code>.git</code> que contiene todos los archivos de configuraci\u00f3n y el historial de cambios. \u00a1No toques esa carpeta directamente! \ud83d\uded1</p>"},{"location":"clase-git/#42-anadir-archivos-al-repositorio","title":"4.2. A\u00f1adir Archivos al Repositorio \ud83d\udcc4","text":"<ol> <li>A\u00f1ade archivos al \u00e1rea de preparaci\u00f3n (staging area) con:</li> </ol> <pre><code>git add nombre_del_archivo  # A\u00f1ade un archivo espec\u00edfico\ngit add .  # A\u00f1ade todos los archivos en el directorio actual\n</code></pre> <p>Pro Tip: Usa <code>git add .</code> para a\u00f1adir todos los cambios de una vez. \ud83d\ude80</p>"},{"location":"clase-git/#43-confirmar-cambios-commit","title":"4.3. Confirmar Cambios (Commit) \u2705","text":"<p>\u00a1Es hora de confirmar tus cambios! Esto guarda un \"snapshot\" de tu c\u00f3digo:</p> <pre><code>git commit -m \"Mensaje describiendo los cambios\"\n</code></pre> <p>Aseg\u00farate de que el mensaje de tu commit sea descriptivo. Por ejemplo, <code>git commit -m \"A\u00f1adir funci\u00f3n de suma para el carrito de compras\"</code>.</p>"},{"location":"clase-git/#5-conecta-tu-repositorio-local-a-github","title":"5\ufe0f\u20e3 Conecta tu Repositorio Local a GitHub \ud83d\ude80","text":"<ol> <li>Crea un Nuevo Repositorio en GitHub:</li> <li>Ve a GitHub, inicia sesi\u00f3n y haz clic en New repository.</li> <li>Dale un nombre y elige si ser\u00e1 p\u00fablico o privado. \u00a1No olvides iniciar el repo sin un README si ya tienes uno local! \ud83d\udcdd</li> <li>Vincula tu Repositorio Local al Remoto:</li> </ol> <p>Copia la URL del repositorio que acabas de crear en GitHub y usa el siguiente comando:</p> <pre><code>git remote add origin https://github.com/usuario/nombre-del-repositorio.git\n</code></pre> <p>Nota: <code>origin</code> es el nombre del enlace al repositorio remoto, y puedes cambiarlo si lo prefieres.</p> <ol> <li>Empuja tus Cambios al Repositorio Remoto (Push):</li> </ol> <p>Finalmente, sube tus cambios confirmados a GitHub:</p> <pre><code>git push origin main\n</code></pre> <p>\u00a1Y listo! Tus archivos ahora est\u00e1n en GitHub, listos para ser compartidos con el mundo. \ud83c\udf0d</p>"},{"location":"clase-git/#6-como-funciona-todo-junto-diagrama-de-flujo","title":"6\ufe0f\u20e3 \u00a1C\u00f3mo Funciona Todo Junto! Diagrama de Flujo \ud83d\udea6","text":"<p>Aqu\u00ed tienes un diagrama visual de c\u00f3mo se ve el flujo de trabajo t\u00edpico en Git:</p> <ol> <li>Crear un Repositorio Local (<code>git init</code>)</li> <li>A\u00f1adir Archivos (<code>git add</code>)</li> <li>Confirmar Cambios (<code>git commit</code>)</li> <li>Conectar con GitHub (<code>git remote add origin</code>)</li> <li>Subir Cambios (<code>git push</code>)</li> </ol> <pre><code>(Trabaja en tu Proyecto)\n        |\n      git init\n        |\n    (A\u00f1adir archivos)\n        |\n      git add .\n        |\n   (Confirmar cambios)\n        |\n    git commit -m \"Mensaje\"\n        |\n(Conectar a GitHub Repo)\n        |\ngit remote add origin URL\n        |\n   (Subir cambios a GitHub)\n        |\n     git push origin main\n</code></pre>"},{"location":"clase-git/#7-github-pages-publica-tu-web","title":"7\ufe0f\u20e3 GitHub Pages: \u00a1Publica Tu Web! \ud83c\udf10","text":"<p>GitHub Pages es perfecto para publicar p\u00e1ginas web est\u00e1ticas directamente desde un repositorio de GitHub.</p> <ol> <li>Crea un Repositorio en GitHub.</li> <li>Clona el Repositorio en tu M\u00e1quina:    <pre><code>git clone https://github.com/usuario/nombre-del-repositorio.git\ncd nombre-del-repositorio\n</code></pre></li> <li>Crea tu Web B\u00e1sica (<code>index.html</code>) y s\u00fabela a GitHub:    <pre><code>git add .\ngit commit -m \"A\u00f1adir mi web\"\ngit push origin main\n</code></pre></li> <li>Configura GitHub Pages en la secci\u00f3n Settings de tu repo, \u00a1y listo!</li> </ol>"},{"location":"clase-git/#8-situaciones-comunes-y-soluciones","title":"8\ufe0f\u20e3 Situaciones Comunes y Soluciones \ud83d\udee0\ufe0f","text":""},{"location":"clase-git/#81-no-se-muestran-los-cambios-en-github-pages","title":"8.1. No se Muestran los Cambios en GitHub Pages \ud83e\udd14","text":"<ul> <li>Espera unos minutos y actualiza la p\u00e1gina.</li> </ul>"},{"location":"clase-git/#82-error-404-al-acceder-a-la-web","title":"8.2. Error 404 al Acceder a la Web \ud83d\udeab","text":"<ul> <li>Aseg\u00farate de tener un <code>index.html</code> en la ra\u00edz del repositorio.</li> </ul>"},{"location":"clase-git/#83-rechazo-de-git-push-por-conflictos","title":"8.3. Rechazo de <code>git push</code> por Conflictos \u26a0\ufe0f","text":"<ol> <li>Realiza <code>git pull origin main</code> para bajar los cambios.</li> <li>Resuelve conflictos y confirma los cambios con <code>git commit</code>.</li> <li>Intenta <code>git push</code> de nuevo.</li> </ol>"},{"location":"clase-git/#9-buenas-practicas","title":"9\ufe0f\u20e3 Buenas Pr\u00e1cticas \ud83d\ude80","text":"<ul> <li>Commits peque\u00f1os y frecuentes con mensajes claros.</li> <li>Usa ramas (<code>branches</code>) para desarrollar nuevas caracter\u00edsticas y fusi\u00f3nalas a <code>main</code>.</li> <li>Documenta tu c\u00f3digo y mant\u00e9n tu repo limpio y organizado. \ud83d\udcda</li> </ul>"},{"location":"clase-git/#conclusion","title":"\ud83d\udd1f Conclusi\u00f3n \ud83c\udf89","text":"<p>Git y GitHub son herramientas fundamentales para cualquier desarrollador. Con esta gu\u00eda, ahora sabes c\u00f3mo crear un repositorio local, conectarlo a GitHub, y publicar tu web con GitHub Pages. \u00a1Empieza a colaborar y compartir tu c\u00f3digo como un profesional! \ud83d\udcaa</p> <p>\u00a1Espero que esta gu\u00eda te haya dado una base s\u00f3lida y emocionante para comenzar a usar Git y GitHub! \ud83d\ude0a</p>"},{"location":"planificacion/","title":"Planificaci\u00f3n","text":"Tema Horas Descripci\u00f3n 1. Selecci\u00f3n de arquitecturas y herramientas de programaci\u00f3n 7 Introducci\u00f3n a los mecanismos de ejecuci\u00f3n, lenguajes de programaci\u00f3n, integraci\u00f3n con HTML, y herramientas de desarrollo. 2. Manejo de la sintaxis del lenguaje 28 Fundamentos del lenguaje: variables, tipos de datos, operadores, comentarios, y estructuras de control. 3. Utilizaci\u00f3n de los objetos predefinidos del lenguaje 28 Uso de objetos predefinidos, interacci\u00f3n con el navegador, y gesti\u00f3n de ventanas y cookies. 4. Programaci\u00f3n con \u201carrays\u201d, funciones y objetos definidos por el usuario 21 Trabajar con arrays, funciones y objetos definidos por el usuario. 5. Interacci\u00f3n con el usuario: eventos y formularios 14 Manejo de eventos y formularios para mejorar la interacci\u00f3n con el usuario. 6. Utilizaci\u00f3n del modelo de objetos del documento (DOM) 21 Manipulaci\u00f3n del DOM para interactuar y modificar el contenido del documento. 7. Utilizaci\u00f3n de mecanismos de comunicaci\u00f3n as\u00edncrona 21 T\u00e9cnicas para realizar comunicaciones as\u00edncronas y actualizaci\u00f3n din\u00e1mica del contenido. Tema Contenidos 1. Selecci\u00f3n de arquitecturas y herramientas de programaci\u00f3n - Mecanismos de ejecuci\u00f3n de c\u00f3digo en un navegador web.  - Capacidades y limitaciones de ejecuci\u00f3n.  - Lenguajes de programaci\u00f3n en entorno cliente. Caracter\u00edsticas.  - Tecnolog\u00edas y lenguajes asociados.  - Integraci\u00f3n del c\u00f3digo con las etiquetas HTML. C\u00f3digo en l\u00ednea y en ficheros externos.  - Entornos y herramientas de desarrollo de c\u00f3digo en el cliente web. 2. Manejo de la sintaxis del lenguaje - Variables. Declaraci\u00f3n. Inicializaci\u00f3n. \u00c1mbito.  - Tipos de datos. Conversi\u00f3n de tipos de datos.  - Asignaciones.  - Operadores.  - Comentarios al c\u00f3digo.  - Sentencias.  - Decisiones. Sentencias condicionales.  - Bucles. Tipos. Sentencias de ruptura de bucle. 3. Utilizaci\u00f3n de los objetos predefinidos del lenguaje - Utilizaci\u00f3n de objetos. Objetos nativos del lenguaje.  - Interacci\u00f3n con el navegador. Objetos predefinidos asociados.  - Generaci\u00f3n de texto y elementos HTML desde c\u00f3digo.  - Aplicaciones pr\u00e1cticas de los marcos.  - Gesti\u00f3n de la apariencia de la ventana.  - Creaci\u00f3n de nuevas ventanas. Comunicaci\u00f3n entre ventanas.  - Cookies. Definici\u00f3n, creaci\u00f3n, almacenamiento y recuperaci\u00f3n. 4. Programaci\u00f3n con \u201carrays\u201d, funciones y objetos definidos por el usuario - Funciones predefinidas del lenguaje.  - Llamadas a funciones. Definici\u00f3n de funciones.  - \u201cArrays\u201d. Definici\u00f3n, creaci\u00f3n y uso.  - Creaci\u00f3n de objetos.  - Definici\u00f3n de m\u00e9todos y propiedades. 5. Interacci\u00f3n con el usuario: eventos y formularios - Modelo de gesti\u00f3n de eventos.  - Utilizaci\u00f3n de formularios desde c\u00f3digo.  - Modificaci\u00f3n de apariencia y comportamiento.  - Validaci\u00f3n y env\u00edo.  - Expresiones regulares. 6. Utilizaci\u00f3n del modelo de objetos del documento (DOM) - El modelo de objetos del documento (DOM).  - Objetos del modelo. Propiedades y m\u00e9todos de los objetos.  - Acceso al documento desde c\u00f3digo.  - Programaci\u00f3n de eventos.  - Diferencias en las implementaciones del modelo. 7. Utilizaci\u00f3n de mecanismos de comunicaci\u00f3n as\u00edncrona - Mecanismos de comunicaci\u00f3n as\u00edncrona.  - Modificaci\u00f3n din\u00e1mica del documento utilizando comunicaci\u00f3n as\u00edncrona.  - Formatos para el env\u00edo y recepci\u00f3n de informaci\u00f3n.  - Librer\u00edas de actualizaci\u00f3n din\u00e1mica."},{"location":"actividades/simulaciondesarrollosoftware/","title":"Simulaci\u00f3n de Etapas de Desarrollo de Software","text":""},{"location":"actividades/simulaciondesarrollosoftware/#1-empresa-techzone-store","title":"1. Empresa: TechZone Store","text":"<ul> <li>Entrevista con cliente inicial</li> <li>Fases Resueltas</li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/entrevista_inicial/","title":"Entrevista inicial","text":""},{"location":"actividades/simulaciondesarrollosoftware/situacion1/entrevista_inicial/#techzone-store","title":"TechZone Store","text":"<p>Entrevista entre desarrollador y encargado de TechZone Store</p> <p>Desarrollador: Hola, soy el encargado de desarrollar su aplicaci\u00f3n. \u00bfPuede explicarme qu\u00e9 funcionalidades necesita para su tienda en l\u00ednea?</p> <p>Encargado: Claro, lo que quiero es que los clientes puedan ver f\u00e1cilmente todos los productos que vendemos, organizados en diferentes categor\u00edas. Quiero que puedan hacer clic en un producto, ver detalles como la descripci\u00f3n, el precio, y, si les interesa, poder a\u00f1adirlo a un carrito de compras.</p> <p>Desarrollador: Perfecto, entonces los usuarios deber\u00edan poder navegar por un cat\u00e1logo y tener un carrito de compras. \u00bfQu\u00e9 m\u00e1s le gustar\u00eda?</p> <p>Encargado: Quiero que puedan registrarse con su correo electr\u00f3nico o iniciar sesi\u00f3n si ya tienen cuenta. Una vez en su cuenta, deben poder revisar sus compras anteriores y actualizar su direcci\u00f3n de env\u00edo.</p> <p>Desarrollador: Entonces, adem\u00e1s de las compras, tendr\u00edamos un sistema de cuentas de usuario y un historial de pedidos. \u00bfC\u00f3mo le gustar\u00eda que fuera el proceso de pago?</p> <p>Encargado: Para el pago, me gustar\u00eda que puedan elegir entre diferentes m\u00e9todos, como tarjeta de cr\u00e9dito o PayPal. Tambi\u00e9n ser\u00eda \u00fatil que pudieran ver el costo del env\u00edo antes de pagar y tener una confirmaci\u00f3n clara de su compra.</p> <p>Desarrollador: Perfecto, ofrecer\u00edamos opciones de pago y calcular\u00edamos el env\u00edo. \u00bfHay algo m\u00e1s que considere importante?</p> <p>Encargado: S\u00ed, ser\u00eda genial que recibieran notificaciones por correo electr\u00f3nico cuando su pedido se haya enviado, y que puedan hacer un seguimiento de d\u00f3nde est\u00e1 su pedido en tiempo real.</p> <p>Desarrollador: Muy bien, entonces integrar\u00edamos una funcionalidad para notificaciones y seguimiento del env\u00edo. Con esta informaci\u00f3n ya puedo tener una idea clara de lo que necesita.</p> <p>Desarrollador: Ahora que tenemos claro qu\u00e9 funcionalidades quiere, hablemos sobre los plazos de entrega. \u00bfTiene alguna fecha l\u00edmite en mente para el lanzamiento de la tienda en l\u00ednea?</p> <p>Encargado: Nos gustar\u00eda lanzar la tienda en unos tres meses. Queremos estar listos para la temporada de compras navide\u00f1as, por lo que ser\u00eda ideal tener algo funcional y en marcha antes de noviembre.</p> <p>Desarrollador: Entendido, con tres meses de margen trabajaremos en una primera fase que incluya el cat\u00e1logo de productos, el carrito de compras y el sistema de pagos. Despu\u00e9s, podremos a\u00f1adir las funcionalidades m\u00e1s avanzadas, como las notificaciones y el seguimiento de env\u00edos.</p> <p>Encargado: Me parece bien, mientras podamos tener algo listo para los clientes antes de las fiestas.</p> <p>Desarrollador: Perfecto, con eso en mente ajustaremos el calendario de desarrollo para cumplir con ese plazo. \u00a1Muchas gracias por la informaci\u00f3n!</p>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/","title":"Fases Resueltas","text":""},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#planificacion-y-analisis-de-requisitos","title":"Planificaci\u00f3n y An\u00e1lisis de Requisitos","text":"Requisito Plazo de entrega Cat\u00e1logo de productos 2 semanas Carrito de compras 1 semana Registro e inicio de sesi\u00f3n de usuarios 2 semanas Historial de pedidos y gesti\u00f3n de cuentas 1 semana Proceso de pago y opciones (Stripe y Coinbase) 2 semanas Notificaciones por correo electr\u00f3nico 1 semana Seguimiento de pedidos en tiempo real 1 semana Rendimiento y escalabilidad En paralelo con la implementaci\u00f3n Seguridad (SSL, cifrado, protecci\u00f3n XSS/CSRF) En paralelo con la integraci\u00f3n de pagos Compatibilidad (dise\u00f1o responsivo) Durante todo el desarrollo Mantenimiento (c\u00f3digo limpio, plan de actualizaciones) Al final del proyecto Pruebas de rendimiento, seguridad y escalabilidad 2 semanas Pruebas de compatibilidad 1 semana Despliegue y puesta en producci\u00f3n 1 semana <p>Este cronograma distribuye el trabajo a lo largo de los 3 meses de desarrollo, con tiempos dedicados a cada uno de los requisitos esenciales.</p>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#definicion-de-requisitos","title":"Definici\u00f3n de Requisitos","text":""},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#requisitos-funcionales","title":"Requisitos Funcionales","text":"<ul> <li> <p>Cat\u00e1logo de productos: Los usuarios podr\u00e1n ver todos los productos organizados por categor\u00edas.</p> <ul> <li>Subfunci\u00f3n: Los usuarios pueden hacer clic en un producto para ver detalles como la descripci\u00f3n, el precio y caracter\u00edsticas adicionales.</li> </ul> </li> <li> <p>Carrito de compras: Los usuarios podr\u00e1n a\u00f1adir productos a un carrito de compras.</p> <ul> <li>Subfunci\u00f3n: El carrito debe poder actualizarse con cambios de cantidad y eliminaci\u00f3n de productos.</li> </ul> </li> <li> <p>Registro e inicio de sesi\u00f3n: Los usuarios podr\u00e1n registrarse con su correo electr\u00f3nico y gestionar su cuenta.</p> <ul> <li>Subfunci\u00f3n: Los usuarios podr\u00e1n iniciar sesi\u00f3n, revisar sus compras anteriores y actualizar informaci\u00f3n personal como la direcci\u00f3n de env\u00edo.</li> </ul> </li> <li> <p>Historial de compras: Los usuarios tendr\u00e1n acceso a un historial de pedidos anteriores, donde podr\u00e1n ver detalles de cada compra.</p> </li> <li> <p>Proceso de pago: Los usuarios podr\u00e1n pagar usando varios m\u00e9todos, como tarjeta de cr\u00e9dito o PayPal.</p> <ul> <li>Subfunci\u00f3n: Verificar el costo del env\u00edo antes del pago y confirmar el pedido.</li> </ul> </li> <li> <p>Notificaciones de pedidos: Los usuarios recibir\u00e1n notificaciones por correo electr\u00f3nico sobre el estado de su pedido, como confirmaci\u00f3n de compra y env\u00edo.</p> </li> <li> <p>Seguimiento de pedidos: Los usuarios podr\u00e1n seguir el estado de sus pedidos en tiempo real una vez que hayan sido enviados.</p> </li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#requisitos-no-funcionales","title":"Requisitos No Funcionales","text":"<ul> <li> <p>Usabilidad: La interfaz debe ser f\u00e1cil de usar e intuitiva, con una navegaci\u00f3n fluida entre las secciones del cat\u00e1logo, carrito de compras y gesti\u00f3n de cuentas.</p> </li> <li> <p>Rendimiento: La aplicaci\u00f3n debe poder soportar m\u00faltiples usuarios simult\u00e1neamente, manteniendo tiempos de respuesta r\u00e1pidos, especialmente durante el proceso de pago.</p> </li> <li> <p>Seguridad: El sistema debe manejar de manera segura los datos de los usuarios y sus transacciones, asegurando la privacidad de la informaci\u00f3n personal y los datos financieros.</p> </li> <li> <p>Disponibilidad: La plataforma debe estar disponible 24/7, con un m\u00ednimo de tiempo de inactividad durante actualizaciones o mantenimiento.</p> </li> <li> <p>Escalabilidad: El sistema debe ser capaz de manejar el crecimiento en la cantidad de productos, usuarios y transacciones sin degradar el rendimiento.</p> </li> <li> <p>Compatibilidad: La aplicaci\u00f3n debe ser accesible en distintos dispositivos (m\u00f3viles, tablets, desktops) y navegadores modernos.</p> </li> <li> <p>Mantenibilidad: El c\u00f3digo de la aplicaci\u00f3n debe estar bien documentado para facilitar futuras actualizaciones o correcciones.</p> </li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#diseno-de-la-arquitectura","title":"Dise\u00f1o de la Arquitectura","text":"<ul> <li>Frontend desarrollado en React para una interfaz \u00e1gil y responsiva, adaptada a m\u00f3viles y tablets.</li> <li>Backend con Node.js y una API REST para manejar operaciones de usuario, carrito y pagos.</li> <li>Base de datos MongoDB para gestionar los productos, usuarios y pedidos.</li> <li>Integraci\u00f3n de la pasarela de pago Stripe para tarjetas y Coinbase Commerce para criptomonedas.</li> </ul> <pre><code>graph TD\n    A[Usuario] --&gt;|Usa interfaz| B[Frontend React]\n    B --&gt;|Solicita datos| C[API REST Node.js]\n    C --&gt;|Consulta/Modifica| D[Base de datos MongoDB]\n\n    subgraph Backend\n        C\n        D\n    end\n\n    B --&gt;|Pagos| E[Stripe]\n    B --&gt;|Pagos con Criptomonedas| F[Coinbase Commerce]</code></pre>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#implementacion","title":"Implementaci\u00f3n","text":"<ul> <li>Configurar la API REST para gestionar el cat\u00e1logo de productos, el carrito y los pagos.</li> <li>Crear interfaces atractivas con React, incluyendo un sistema de recomendaci\u00f3n de productos.</li> <li>Integrar las opciones de pago y configurar los cupones de descuento en tiempo real.</li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#pruebas","title":"Pruebas","text":"<ul> <li>Realizar pruebas de carga con herramientas como JMeter para ver c\u00f3mo responde la plataforma bajo la demanda de m\u00faltiples usuarios.</li> <li>Testear todos los flujos de compra y la funcionalidad del carrito con diferentes dispositivos y navegadores.</li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#despliegue-y-mantenimiento","title":"Despliegue y Mantenimiento","text":"<ul> <li>Desplegar la aplicaci\u00f3n en AWS para asegurar escalabilidad, con balanceadores de carga y respaldo automatizado.</li> <li>Monitorear el rendimiento de la aplicaci\u00f3n usando CloudWatch, y establecer ciclos de actualizaci\u00f3n peri\u00f3dicos para mejoras y nuevos lanzamientos de productos.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/","title":"1. Desarrollo de Software","text":"<p>El desarrollo de software puede parecer simple en un inicio: \"Solo necesito una idea\", pensamos. Sin embargo, en cuanto comenzamos a trabajar en un proyecto, nos damos cuenta de que surgen cientos de inconvenientes. El principal problema suele ser la falta de organizaci\u00f3n. Cuando un proyecto requiere varias pantallas o m\u00f3dulos, terminamos perdiendo mucho tiempo haciendo ajustes sobre la marcha. </p> <p>Para evitar esto, es fundamental seguir una serie de fases de desarrollo que nos ayuden a minimizar estos problemas desde el principio. A continuaci\u00f3n, te presento las etapas clave del desarrollo de software, que suelen ser el pilar para cualquier proyecto bien gestionado.</p> <pre><code>graph TD\n    A[Planificaci\u00f3n y An\u00e1lisis de Requisitos] --&gt; B[Definici\u00f3n de Requisitos]\n    B --&gt; C[Dise\u00f1o de la Arquitectura]\n    C --&gt; D[Implementaci\u00f3n]\n    D --&gt; E[Pruebas]\n    E --&gt; F[Despliegue y Mantenimiento]\n\n    F --&gt;|Soporte y actualizaciones| A</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#etapas-del-desarrollo-de-software","title":"Etapas del Desarrollo de Software","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#1-planificacion-y-analisis-de-requisitos","title":"1. Planificaci\u00f3n y An\u00e1lisis de Requisitos","text":"<p>Aqu\u00ed es donde todo comienza. Junto al cliente, analizamos sus necesidades y definimos los objetivos del proyecto. Se trata de comprender a fondo qu\u00e9 funcionalidades debe tener el software y c\u00f3mo estas se alinean con las expectativas del usuario. Esta etapa es crucial porque una buena planificaci\u00f3n previene sorpresas y problemas m\u00e1s adelante.</p> <p>Si no hacemos este trabajo a conciencia, es probable que durante las revisiones posteriores, el cliente mencione caracter\u00edsticas que pensaba que ya estaban incluidas. Esto puede generar retrasos importantes en el proyecto.</p> <p>Ojo con los cambios</p> <p>Los clientes suelen ser caprichosos, y la mayor\u00eda no tiene conocimientos t\u00e9cnicos. A menudo, a mitad del proyecto o al ver el avance del producto, se les ocurre alguna nueva funcionalidad que desean implementar. Aqu\u00ed es donde debes negociar con ellos para obtener m\u00e1s tiempo si esa nueva idea se va a llevar a cabo.</p> <p>Aqu\u00ed tienes la secci\u00f3n revisada con la explicaci\u00f3n ampliada sobre los requisitos funcionales y no funcionales:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#2-definicion-de-requisitos","title":"2. Definici\u00f3n de Requisitos","text":"<p>Despu\u00e9s de entender lo que el cliente necesita, se procede a documentar los requisitos espec\u00edficos del sistema. Aqu\u00ed definimos dos tipos principales de requisitos que guiar\u00e1n el desarrollo del software:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#requisitos-funcionales","title":"Requisitos Funcionales","text":"<p>Definici\u00f3n: Los requisitos funcionales describen qu\u00e9 debe hacer el software. Estos requisitos especifican las funcionalidades, caracter\u00edsticas y comportamientos que el sistema debe implementar para cumplir con las necesidades del usuario. En otras palabras, definen las acciones que el sistema debe ser capaz de realizar.</p> <ul> <li>Ejemplos:<ul> <li>El sistema debe permitir a los usuarios registrarse con una direcci\u00f3n de correo electr\u00f3nico.</li> <li>El software debe permitir la b\u00fasqueda de productos por categor\u00eda y palabras clave.</li> <li>Los usuarios deben poder realizar pagos utilizando tarjetas de cr\u00e9dito y PayPal.</li> </ul> </li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#requisitos-no-funcionales","title":"Requisitos No Funcionales","text":"<p>Definici\u00f3n: Los requisitos no funcionales se centran en c\u00f3mo debe comportarse el software en t\u00e9rminos de rendimiento, seguridad, usabilidad y otras caracter\u00edsticas cualitativas. Estos requisitos son cruciales para garantizar que el sistema funcione de manera eficiente y satisfactoria en el entorno real.</p> <ul> <li>Ejemplos:<ul> <li>El sistema debe ser capaz de manejar al menos 1000 usuarios simult\u00e1neamente sin degradar el rendimiento.</li> <li>La aplicaci\u00f3n debe cumplir con los est\u00e1ndares de accesibilidad para usuarios con discapacidades.</li> <li>Las transacciones deben ser seguras y cumplir con las normativas de protecci\u00f3n de datos.</li> </ul> </li> </ul> <p>Esta documentaci\u00f3n de requisitos funcionales y no funcionales ser\u00e1 nuestra gu\u00eda durante el desarrollo para asegurarnos de que todos estemos alineados y que el software cumpla con las expectativas del cliente.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#3-diseno-de-la-arquitectura","title":"3. Dise\u00f1o de la Arquitectura","text":"<p>En esta fase, se define c\u00f3mo se va a organizar el software, qu\u00e9 componentes tendr\u00e1 y c\u00f3mo interactuar\u00e1n entre s\u00ed. Un buen dise\u00f1o de arquitectura facilita la implementaci\u00f3n y, m\u00e1s adelante, el mantenimiento. </p> <p>Eligiendo la arquitectura adecuada</p> <p>Existen muchas arquitecturas de software. Las m\u00e1s tradicionales, como las arquitecturas monol\u00edticas, han ido dando paso a arquitecturas de microservicios, donde cada parte del software se maneja de forma independiente. Esto facilita las modificaciones y la gesti\u00f3n de errores.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#4-implementacion","title":"4. Implementaci\u00f3n","text":"<p>Aqu\u00ed es donde realmente nos ponemos manos a la obra con la codificaci\u00f3n. Tomamos los requisitos y el dise\u00f1o que ya hemos definido y los convertimos en c\u00f3digo. Es fundamental seguir buenas pr\u00e1cticas de programaci\u00f3n para garantizar que el software sea de calidad y no presente problemas en el futuro.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#5-pruebas","title":"5. Pruebas","text":"<p>Una vez que hemos desarrollado el software, es el momento de probarlo. Las pruebas son esenciales para verificar que el producto cumple con los requisitos que definimos al principio. Incluyen pruebas unitarias, de integraci\u00f3n y de sistema, y nos ayudan a identificar y corregir errores antes de que el software sea lanzado al cliente.</p> <p>No escatimes en pruebas</p> <p>En algunos enfoques \u00e1giles, se minimiza la fase de pruebas, pero cuando el software crece en tama\u00f1o y complejidad, esta fase es crucial para evitar errores que nos costar\u00e1n mucho m\u00e1s tiempo arreglar despu\u00e9s.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#entornos-de-pruebas","title":"Entornos de Pruebas","text":"<p>Para una evaluaci\u00f3n efectiva del software, se utilizan varios entornos de pruebas, cada uno con un prop\u00f3sito espec\u00edfico:</p> <ol> <li> <p>Entorno de Desarrollo:</p> <ul> <li>Descripci\u00f3n: Espacio donde los desarrolladores crean y modifican el c\u00f3digo. Aqu\u00ed se realizan pruebas unitarias y b\u00e1sicas de integraci\u00f3n.</li> <li>Caracter\u00edsticas: Facilita el desarrollo y pruebas iniciales del c\u00f3digo.</li> </ul> </li> <li> <p>Entorno de Pruebas (QA):</p> <ul> <li>Descripci\u00f3n: Entorno dedicado a la ejecuci\u00f3n de pruebas exhaustivas del software, incluyendo pruebas de sistema y de aceptaci\u00f3n del usuario.</li> <li>Caracter\u00edsticas: Replica el entorno de producci\u00f3n, sin afectar a los usuarios finales.</li> </ul> </li> <li> <p>Entorno de Preproducci\u00f3n:</p> <ul> <li>Descripci\u00f3n: \u00daltimo entorno antes del despliegue en producci\u00f3n, usado para la validaci\u00f3n final del sistema en condiciones similares a producci\u00f3n.</li> <li>Caracter\u00edsticas: Permite pruebas finales de carga y rendimiento.</li> </ul> </li> <li> <p>Entorno de Producci\u00f3n:</p> <ul> <li>Descripci\u00f3n: El entorno real donde el software es utilizado por los usuarios finales.</li> <li>Caracter\u00edsticas: Los errores en este entorno pueden tener un impacto significativo, por lo que se deben hacer pruebas exhaustivas en los entornos anteriores.</li> </ul> </li> </ol>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#qa-quality-assurance","title":"QA (Quality Assurance)","text":"<p>El aseguramiento de la calidad (QA) es un proceso integral que asegura que el software cumpla con los est\u00e1ndares de calidad. Incluye:</p> <ul> <li>Prevenci\u00f3n de Defectos: Implementaci\u00f3n de pr\u00e1cticas y procesos para evitar errores.</li> <li>Pruebas Sistem\u00e1ticas: Ejecuci\u00f3n de pruebas para identificar y corregir defectos antes del lanzamiento.</li> <li>Documentaci\u00f3n y Gesti\u00f3n: Registro y seguimiento de defectos encontrados y su resoluci\u00f3n.</li> </ul> <p>QA es crucial no solo para encontrar errores, sino para garantizar que el software sea robusto y fiable desde el principio hasta el final del ciclo de desarrollo.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#6-despliegue-y-mantenimiento","title":"6. Despliegue y Mantenimiento","text":"<p>Finalmente, llega el momento de poner el software en funcionamiento en el entorno de producci\u00f3n. Esto puede incluir la instalaci\u00f3n del software en los sistemas del cliente y capacitar a los usuarios. Despu\u00e9s de la entrega, el mantenimiento es una actividad continua que abarca la correcci\u00f3n de errores y la actualizaci\u00f3n del sistema conforme el cliente lo requiera. En esta fase, el desarrollador suele seguir recibiendo una remuneraci\u00f3n por el soporte y las mejoras del software.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#metodologias-agiles","title":"Metodolog\u00edas \u00c1giles","text":"<p>Las metodolog\u00edas \u00e1giles son un conjunto de principios y pr\u00e1cticas para gestionar proyectos de desarrollo de software. Se centran en la colaboraci\u00f3n continua con el cliente, la flexibilidad para adaptarse a cambios, y la entrega frecuente de software funcional.</p> <p>Una de las metodolog\u00edas \u00e1giles m\u00e1s populares es Scrum, que organiza el desarrollo en ciclos cortos e iterativos llamados sprints.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#metodologia-scrum","title":"Metodolog\u00eda Scrum","text":"<p>Scrum es una metodolog\u00eda \u00e1gil que se enfoca en la entrega r\u00e1pida y continua de software funcional. Cada sprint suele durar entre 1 y 4 semanas, y en ese tiempo se desarrollan caracter\u00edsticas completas que pueden ser probadas y revisadas. El equipo de Scrum se organiza en tres roles principales:</p> Rol Descripci\u00f3n Product Owner Define la visi\u00f3n del producto y prioriza las caracter\u00edsticas. Scrum Master Facilita el proceso Scrum, asegurando que se siga el marco metodol\u00f3gico. Equipo de Desarrollo Desarrolla, prueba y entrega las funcionalidades acordadas en cada sprint."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#ciclo-scrum","title":"Ciclo Scrum","text":"<pre><code>graph TD\n    A[Product Backlog] --&gt; B[Sprint Planning]\n    B --&gt; C(Sprint Backlog)\n    C --&gt; D[Daily Scrum]\n    D --&gt; E(Incremento de Software)\n    E --&gt; F[Revisi\u00f3n del Sprint]\n    F --&gt; G[Retrospectiva]\n    G --&gt; B\n\n    subgraph Ciclo de un Sprint\n        C --&gt; E\n    end</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#fases-del-ciclo-scrum","title":"Fases del Ciclo Scrum:","text":"<ol> <li> <p>Product Backlog: Es una lista priorizada de todas las caracter\u00edsticas o tareas que el producto debe incluir. El Product Owner es el responsable de mantener y priorizar este backlog.</p> </li> <li> <p>Sprint Planning: El equipo selecciona las tareas m\u00e1s importantes del backlog que puedan completarse durante el sprint. Estas tareas forman el Sprint Backlog.</p> </li> <li> <p>Sprint: El equipo trabaja en las tareas seleccionadas durante el tiempo del sprint, realizando Daily Scrums (reuniones diarias de seguimiento) para discutir el progreso y resolver impedimentos.</p> </li> <li> <p>Incremento de Software: Al final del sprint, el equipo debe entregar un incremento de software funcional que puede ser revisado.</p> </li> <li> <p>Revisi\u00f3n del Sprint: El equipo muestra lo que se ha desarrollado durante el sprint a los interesados y obtiene feedback.</p> </li> <li> <p>Retrospectiva del Sprint: El equipo analiza lo que funcion\u00f3 bien y lo que no, y define acciones de mejora para futuros sprints.</p> </li> </ol>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#beneficios-de-scrum","title":"Beneficios de Scrum","text":"<ul> <li>Adaptabilidad: Permite cambios y ajustes en funci\u00f3n de los comentarios del cliente o del mercado.</li> <li>Colaboraci\u00f3n: Fomenta la interacci\u00f3n constante entre el equipo de desarrollo y los interesados.</li> <li>Entrega r\u00e1pida: Los sprints cortos garantizan entregas frecuentes de software funcional.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#sprints","title":"Sprints","text":"<p>Cada sprint tiene una duraci\u00f3n fija y produce un resultado que se puede mostrar al cliente. Esto asegura que se ve progreso de manera constante y que el producto se desarrolla de manera iterativa. El equipo tiene la libertad de ajustar la carga de trabajo en funci\u00f3n del feedback recibido al final de cada sprint.</p> <ul> <li>Duraci\u00f3n: De 1 a 4 semanas.</li> <li>Objetivo: Completar una serie de tareas del Sprint Backlog que tengan valor para el usuario final.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#ciclo-de-retroalimentacion-continua","title":"Ciclo de Retroalimentaci\u00f3n Continua","text":"<p>Scrum est\u00e1 dise\u00f1ado para recibir y procesar retroalimentaci\u00f3n de forma continua, lo que permite mejorar tanto el producto como el proceso de desarrollo. La retroalimentaci\u00f3n constante durante y al final de cada sprint ayuda a asegurar que el software se ajuste a las necesidades del cliente.</p> <p>Scrum es ideal para proyectos donde los requisitos no est\u00e1n completamente definidos desde el principio y donde se espera que haya muchos cambios a lo largo del tiempo.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/2tiposdeaplicaciones/","title":"2. Tipos de aplicaciones","text":"<p>En el desarrollo web, las aplicaciones se pueden clasificar en varios tipos seg\u00fan su funcionalidad y el entorno en el que operan. Cada tipo tiene caracter\u00edsticas espec\u00edficas y se utiliza en diferentes contextos para satisfacer diversas necesidades.</p> Tipo de Aplicaci\u00f3n Descripci\u00f3n Ejemplos Comunes Aplicaciones Web Aplicaciones dise\u00f1adas para ser accedidas a trav\u00e9s de un navegador web. Estas aplicaciones requieren conexi\u00f3n a Internet y son accesibles desde cualquier dispositivo con un navegador. Ofrecen versatilidad y pueden adaptarse a diferentes tama\u00f1os de pantalla. Google Docs, Facebook, Amazon Aplicaciones Web Progresivas (PWA) Aplicaciones web que ofrecen una experiencia similar a la de las aplicaciones nativas en dispositivos m\u00f3viles. Pueden funcionar offline y se pueden instalar en la pantalla de inicio del dispositivo. Twitter Lite, Pinterest, Starbucks Aplicaciones de Una P\u00e1gina (SPA) Aplicaciones web que cargan una sola p\u00e1gina HTML y actualizan el contenido din\u00e1micamente sin recargar la p\u00e1gina completa. Mejoran la experiencia del usuario al ofrecer una navegaci\u00f3n m\u00e1s fluida. Gmail, Netflix, Trello Aplicaciones M\u00f3viles Web Aplicaciones optimizadas para dispositivos m\u00f3viles, accesibles a trav\u00e9s del navegador del dispositivo. Est\u00e1n dise\u00f1adas para adaptarse a pantallas m\u00e1s peque\u00f1as y pueden ofrecer una experiencia de usuario optimizada. eBay, Wikipedia, LinkedIn Aplicaciones de Backend Aplicaciones que operan en el servidor y gestionan la l\u00f3gica del negocio, el almacenamiento de datos y la autenticaci\u00f3n de usuarios. Se comunican con las aplicaciones front-end a trav\u00e9s de APIs. Firebase, AWS Lambda, Stripe Frameworks y Bibliotecas de Desarrollo Herramientas y conjuntos de c\u00f3digo que facilitan el desarrollo web al proporcionar funcionalidades predefinidas y estructuras de c\u00f3digo. Ayudan a acelerar el proceso de desarrollo y asegurar la calidad del software. React, Angular, Vue.js, Bootstrap <p>Cada tipo de aplicaci\u00f3n tiene caracter\u00edsticas distintas que influyen en su dise\u00f1o y desarrollo, permitiendo a los desarrolladores web elegir la mejor opci\u00f3n seg\u00fan las necesidades espec\u00edficas del proyecto y del usuario final.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/","title":"3. Desarrollo de aplicaciones Web","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#desarrollo-de-aplicaciones-web","title":"Desarrollo de Aplicaciones Web","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#navegadores","title":"Navegadores","text":"<p>Los navegadores son software que permite a los usuarios acceder y visualizar contenido en la web. Algunos de los navegadores m\u00e1s populares son Google Chrome, Mozilla Firefox, Safari, Microsoft Edge y Opera. Cada navegador tiene sus propias caracter\u00edsticas y motores de renderizado, lo que puede afectar la forma en que se muestra el contenido web y c\u00f3mo se ejecutan los scripts.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#funcionamiento-de-los-navegadores-protocolo-http","title":"Funcionamiento de los Navegadores. Protocolo HTTP","text":"<p>El funcionamiento de un navegador se basa en el Protocolo de Transferencia de Hipertexto (HTTP), que es el protocolo fundamental para la comunicaci\u00f3n en la web. Cuando un usuario ingresa una URL o hace clic en un enlace, el navegador env\u00eda una petici\u00f3n HTTP al servidor que aloja el recurso solicitado. Esta petici\u00f3n incluye informaci\u00f3n sobre el tipo de recurso que se desea obtener y el navegador que la est\u00e1 realizando. El servidor, a su vez, responde con el contenido solicitado, que puede ser un documento HTML, im\u00e1genes, o archivos CSS y JavaScript.</p> <pre><code>sequenceDiagram\n    participant User as Usuario\n    participant Browser as Navegador\n    participant Server as Servidor\n\n    User-&gt;&gt;Browser: Ingresa URL\n    Browser-&gt;&gt;Server: Solicitud HTTP (GET)\n    Server--&gt;&gt;Browser: Respuesta HTTP (HTML, CSS, JS)\n    Browser-&gt;&gt;Browser: Renderiza contenido\n    Browser--&gt;&gt;User: Muestra p\u00e1gina web</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#arquitectura-cliente-y-servidor","title":"Arquitectura Cliente y Servidor","text":"<p>La arquitectura de las aplicaciones web se basa en un modelo cliente-servidor. En este modelo, el cliente (generalmente un navegador web) realiza solicitudes al servidor, que es donde se almacenan y procesan los datos. El servidor responde a las solicitudes del cliente enviando los recursos necesarios. Esta interacci\u00f3n permite que los usuarios accedan a aplicaciones y servicios en l\u00ednea desde cualquier lugar con conexi\u00f3n a Internet.</p> <pre><code>graph TD\n    A[Cliente] --&gt;|Solicita recurso| B[Servidor]\n    B --&gt;|Env\u00eda recurso| A\n    B --&gt;|Accede a base de datos| C[Base de Datos]\n    C --&gt;|Devuelve datos| B</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#interprete-de-codigo-web","title":"Int\u00e9rprete de C\u00f3digo Web","text":"<p>Los navegadores incluyen int\u00e9rpretes que procesan diferentes tipos de c\u00f3digo. Por ejemplo, el motor de renderizado interpreta el HTML y CSS para mostrar la p\u00e1gina, mientras que el int\u00e9rprete de JavaScript ejecuta scripts que pueden modificar el contenido de la p\u00e1gina de manera din\u00e1mica. Cada navegador utiliza diferentes motores e int\u00e9rpretes; por ejemplo, Chrome utiliza el motor Blink y el int\u00e9rprete V8, mientras que Firefox utiliza Gecko y SpiderMonkey.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#todos-los-navegadores-son-iguales","title":"\u00bfTodos los Navegadores son Iguales?","text":"<p>No, no todos los navegadores son iguales. Aunque todos cumplen la funci\u00f3n b\u00e1sica de mostrar contenido web, pueden diferir en su rendimiento, compatibilidad con est\u00e1ndares web, y caracter\u00edsticas adicionales. Algunos navegadores pueden manejar ciertas tecnolog\u00edas web de manera m\u00e1s eficiente que otros, lo que puede afectar la experiencia del usuario. Adem\u00e1s, la forma en que cada navegador interpreta y ejecuta el c\u00f3digo puede variar, lo que puede llevar a diferencias en la visualizaci\u00f3n de las p\u00e1ginas web.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#tecnologias-de-desarrollo-web","title":"Tecnolog\u00edas de Desarrollo Web","text":"Tecnolog\u00eda Descripci\u00f3n Logo HTML HTML (HyperText Markup Language) es el lenguaje de marcado est\u00e1ndar para crear p\u00e1ginas web. Permite estructurar el contenido en la web mediante el uso de etiquetas que definen elementos como encabezados, p\u00e1rrafos, enlaces, im\u00e1genes, y m\u00e1s. Es fundamental para cualquier desarrollo web, ya que proporciona la base sobre la cual se construyen las aplicaciones y sitios web. CSS CSS (Cascading Style Sheets) es el lenguaje utilizado para describir la presentaci\u00f3n de un documento HTML. Permite aplicar estilos a los elementos HTML, como colores, fuentes, m\u00e1rgenes y dise\u00f1o en general. CSS es esencial para crear interfaces atractivas y responsivas que mejoren la experiencia del usuario. JavaScript JavaScript es un lenguaje de programaci\u00f3n que permite implementar funcionalidades complejas en las p\u00e1ginas web. Con JavaScript, se pueden crear interacciones din\u00e1micas, manipular el DOM (Document Object Model), y realizar solicitudes as\u00edncronas a servidores, lo que permite la creaci\u00f3n de aplicaciones web m\u00e1s interactivas y din\u00e1micas."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#frameworks-de-desarrollo-del-lado-cliente","title":"Frameworks de desarrollo del lado Cliente","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#diseno","title":"Dise\u00f1o","text":"Framework Descripci\u00f3n Logo Bootstrap Es un framework CSS que proporciona un conjunto de herramientas predefinidas para el dise\u00f1o web responsivo. Facilita la creaci\u00f3n de interfaces atractivas y adaptables a diferentes dispositivos. Tailwind CSS Es un framework CSS de utilidad que permite a los desarrolladores crear dise\u00f1os personalizados de manera r\u00e1pida y eficiente, utilizando clases predefinidas."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#desarrollo","title":"Desarrollo","text":"Tecnolog\u00eda Descripci\u00f3n Logo Angular Un framework de JavaScript desarrollado por Google, ideal para construir aplicaciones web de una sola p\u00e1gina (SPA). Proporciona una estructura robusta y herramientas para el desarrollo de aplicaciones complejas. React Una biblioteca de JavaScript para construir interfaces de usuario, desarrollada por Facebook. Es muy popular por su enfoque en componentes reutilizables y su eficiencia en la actualizaci\u00f3n del DOM. Vue.js Un framework progresivo para construir interfaces de usuario. Es conocido por su simplicidad y flexibilidad, permitiendo a los desarrolladores adoptar sus caracter\u00edsticas de manera gradual."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/","title":"4. Entorno de desarrollo","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#entorno-de-desarrollo","title":"Entorno de Desarrollo","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#control-de-versiones","title":"Control de Versiones","text":"<p>Git es un sistema de control de versiones distribuido que permite a los desarrolladores rastrear, gestionar y revertir cambios en el c\u00f3digo fuente a lo largo del tiempo. Es una herramienta fundamental para la colaboraci\u00f3n eficiente en proyectos de software, ya que permite que varios desarrolladores trabajen simult\u00e1neamente sin conflictos. Git tambi\u00e9n facilita la creaci\u00f3n de ramas (branches) para desarrollar nuevas caracter\u00edsticas de manera independiente, permitiendo luego fusionarlas (merge) de manera controlada.</p> <p>Git permite a los desarrolladores tener su propia copia local del c\u00f3digo, trabajar en diferentes caracter\u00edsticas o soluciones de errores sin interferir con el trabajo de otros. Una vez finalizados los cambios, pueden ser integrados en la rama principal (generalmente \"main\" o \"master\"). Esto asegura que el desarrollo sea modular y escalable.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#repositorios-remotos","title":"Repositorios remotos","text":"<p>Los repositorios remotos permiten almacenar y gestionar el c\u00f3digo de manera centralizada en servidores remotos o en la nube. Estas plataformas no solo proporcionan almacenamiento, sino tambi\u00e9n herramientas colaborativas como control de permisos, revisiones de c\u00f3digo (pull requests) y CI/CD (Integraci\u00f3n y Entrega Continua). Algunas de las plataformas m\u00e1s populares incluyen:</p> Plataforma Descripci\u00f3n Logo GitHub GitHub es una de las plataformas m\u00e1s populares para alojar repositorios Git. Proporciona caracter\u00edsticas como control de versiones, colaboraci\u00f3n, gesti\u00f3n de proyectos y CI/CD. Permite repositorios p\u00fablicos y privados, con una interfaz amigable para equipos de todo el mundo. GitLab GitLab es una soluci\u00f3n integral que ofrece alojamiento de repositorios Git, CI/CD y herramientas de gesti\u00f3n de proyectos. Su c\u00f3digo abierto y la posibilidad de instalarlo en servidores privados lo hacen popular en grandes organizaciones. Bitbucket Bitbucket permite almacenar repositorios de Git (y Mercurial) en la nube, con un enfoque fuerte en la integraci\u00f3n con Jira y otras herramientas de Atlassian. Ideal para equipos que ya utilizan la suite de Atlassian. Ofrece tanto repositorios privados como p\u00fablicos. Azure Repos Parte de Azure DevOps, Azure Repos ofrece alojamiento de repositorios Git con integraci\u00f3n directa con otros servicios de Microsoft, ideal para empresas que ya utilizan el ecosistema Azure. Permite la automatizaci\u00f3n de flujos de trabajo mediante pipelines CI/CD. AWS CodeCommit AWS CodeCommit es un servicio de control de versiones privado y seguro que se integra con otras herramientas de AWS. Ofrece una soluci\u00f3n completamente gestionada y escalable, lo que lo convierte en una opci\u00f3n popular entre empresas que ya operan en la nube de Amazon."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#ciclo-de-trabajo-con-git","title":"Ciclo de trabajo con Git","text":"<pre><code>sequenceDiagram\n    participant WD as Working Directory\n    participant SA as Staging Area\n    participant LR as Local Repository\n    participant RR as Remote Repository\n\n    WD-&gt;&gt;WD: Editar archivos\n    WD-&gt;&gt;SA: git add\n    SA-&gt;&gt;LR: git commit\n    LR-&gt;&gt;RR: git push\n    RR--&gt;&gt;LR: git pull\n    LR-&gt;&gt;WD: git checkout\n    WD-&gt;&gt;WD: git status</code></pre> <p>Este diagrama es claro y muestra el flujo de trabajo de Git, desde que haces cambios en el Working Directory, los a\u00f1ades al Staging Area, los confirmas en el Local Repository, y finalmente los subes al Remote Repository para colaborar con otros.</p> Etapa Descripci\u00f3n Comando importante Working Directory Zona donde trabajas en tus archivos localmente. Aqu\u00ed editas el c\u00f3digo y haces los cambios. <code>git status</code>: Revisar el estado de los archivos (modificados, nuevos o eliminados). Staging Area Los archivozzzzs que deseas incluir en el pr\u00f3ximo commit son a\u00f1adidos aqu\u00ed mediante el comando <code>git add</code>. <code>git add [archivo]</code>: Mover archivos al \u00e1rea de preparaci\u00f3n. Local Repository Una vez que los archivos est\u00e1n en el Staging Area, los confirmas al repositorio local con <code>git commit</code>. Esto guarda el historial de cambios localmente. <code>git commit -m \"mensaje del commit\"</code>: Confirmar los cambios en el repositorio local. Remote Repository Despu\u00e9s de confirmar tus cambios localmente, puedes sincronizarlos con un repositorio remoto (como GitHub, GitLab o Bitbucket) mediante el comando <code>git push</code>. <code>git push</code>: Enviar los cambios al repositorio remoto. git pull Trae los cambios realizados en el repositorio remoto hacia el repositorio local, manteniendo tu trabajo sincronizado con el de otros colaboradores. <code>git pull</code>: Obtener y fusionar cambios del repositorio remoto. git checkout Cambia entre ramas o versiones del c\u00f3digo, llevando el contenido de la rama seleccionada a tu Working Directory. <code>git checkout [rama]</code>: Cambiar a otra rama del c\u00f3digo."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#ides","title":"IDEs","text":"<p>Los IDEs (Entornos de Desarrollo Integrados) son herramientas que proporcionan un entorno completo para el desarrollo de software. Adem\u00e1s de un editor de c\u00f3digo, muchos incluyen herramientas para depurar, gestionar versiones y ejecutar proyectos. A continuaci\u00f3n, se enumeran algunos de los principales IDEs utilizados en desarrollo web y otras \u00e1reas:</p> IDE Descripci\u00f3n Popularidad Costo Logo Visual Studio Code Un editor de c\u00f3digo ligero pero potente de Microsoft, con soporte para m\u00faltiples lenguajes de programaci\u00f3n mediante extensiones. Incluye depurador, terminal integrado y soporte para Git. Muy alto, uno de los m\u00e1s populares Gratuito WebStorm IDE especializado en JavaScript y tecnolog\u00edas web modernas, desarrollado por JetBrains. Ofrece soporte avanzado para frameworks como React, Angular y Node.js. Alto, muy popular entre desarrolladores web Pago (con prueba gratuita) o Versi\u00f3n Community Sublime Text Un editor de texto muy r\u00e1pido y minimalista que puede ser ampliado con m\u00faltiples extensiones para soportar diversos lenguajes de programaci\u00f3n. Ideal para desarrolladores que prefieren un editor ligero. Alto, muy usado en desarrollo ligero Pago (con prueba gratuita) o Versi\u00f3n Community Atom Editor de c\u00f3digo de GitHub, conocido por su alta personalizaci\u00f3n y su fuerte integraci\u00f3n con Git. Es una opci\u00f3n flexible para desarrolladores web y cuenta con una gran variedad de extensiones. Moderado, popular entre desarrolladores de GitHub Gratuito"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/","title":"5. Integrar c\u00f3digo JavaScript en HTML","text":"<p>Integrar c\u00f3digo JavaScript en un documento HTML es una pr\u00e1ctica fundamental en el desarrollo web. JavaScript se utiliza para hacer que las p\u00e1ginas web sean interactivas y din\u00e1micas. A continuaci\u00f3n, se detalla c\u00f3mo se puede integrar JavaScript en HTML, abordando los m\u00e9todos m\u00e1s comunes y sus particularidades.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#formas-de-integrar-codigo-javascript","title":"Formas de integrar c\u00f3digo JavaScript","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#1-codigo-javascript-en-linea","title":"1. C\u00f3digo JavaScript en L\u00ednea","text":"<p>Puedes incluir c\u00f3digo JavaScript directamente dentro de una etiqueta HTML usando el atributo <code>onclick</code>, <code>onmouseover</code>, o cualquier otro evento. Este m\u00e9todo se utiliza para peque\u00f1os fragmentos de c\u00f3digo o para manejar eventos espec\u00edficos.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;JavaScript en L\u00ednea&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button onclick=\"alert('\u00a1Hola, mundo!')\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En este ejemplo, el c\u00f3digo JavaScript <code>alert('\u00a1Hola, mundo!')</code> se ejecutar\u00e1 cuando el usuario haga clic en el bot\u00f3n.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#2-codigo-javascript-interno","title":"2. C\u00f3digo JavaScript Interno","text":"<p>Para incluir JavaScript directamente en el archivo HTML pero en una secci\u00f3n separada, utiliza la etiqueta <code>&lt;script&gt;</code> en la secci\u00f3n <code>&lt;head&gt;</code> o al final del <code>&lt;body&gt;</code>. Este m\u00e9todo es \u00fatil para scripts que son espec\u00edficos de una sola p\u00e1gina.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;JavaScript Interno&lt;/title&gt;\n    &lt;script&gt;\n        function saludar() {\n            alert('\u00a1Hola, mundo!');\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button onclick=\"saludar()\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En este caso, el script definido dentro de la etiqueta <code>&lt;script&gt;</code> puede ser llamado desde el HTML. Este enfoque permite que el c\u00f3digo JavaScript sea m\u00e1s organizado y reutilizable dentro de la misma p\u00e1gina.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#3-codigo-javascript-externo","title":"3. C\u00f3digo JavaScript Externo","text":"<p>Para proyectos m\u00e1s grandes y para mantener el c\u00f3digo HTML m\u00e1s limpio, es recomendable usar archivos JavaScript externos. El c\u00f3digo JavaScript se coloca en un archivo separado con extensi\u00f3n <code>.js</code>, que luego se enlaza en el HTML usando la etiqueta <code>&lt;script&gt;</code> con el atributo <code>src</code>.</p> <p>Ejemplo de archivo HTML (<code>index.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;JavaScript Externo&lt;/title&gt;\n    &lt;script src=\"script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"myButton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ejemplo de archivo JavaScript (<code>script.js</code>):</p> <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n    document.getElementById('myButton').addEventListener('click', () =&gt; {\n        alert('\u00a1Hola, mundo!');\n    });\n});\n</code></pre> <p>En este ejemplo, el archivo <code>script.js</code> contiene el c\u00f3digo JavaScript, y se enlaza a trav\u00e9s del atributo <code>src</code> en la etiqueta <code>&lt;script&gt;</code>. El atributo <code>defer</code> asegura que el script se ejecute solo despu\u00e9s de que el documento HTML se haya cargado completamente.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#4-buenas-practicas","title":"4. Buenas Pr\u00e1cticas","text":"<ul> <li>Separaci\u00f3n de Responsabilidades: Mant\u00e9n el c\u00f3digo JavaScript en archivos separados para facilitar la organizaci\u00f3n y mantenimiento.</li> <li>Carga Diferida (<code>defer</code> y <code>async</code>): Utiliza los atributos <code>defer</code> o <code>async</code> en la etiqueta <code>&lt;script&gt;</code> para controlar la carga y ejecuci\u00f3n del JavaScript sin bloquear la carga de la p\u00e1gina.</li> <li><code>defer</code>: El script se ejecuta en el orden en que aparece en el HTML despu\u00e9s de que el documento se haya cargado.</li> <li><code>async</code>: El script se descarga en paralelo con el HTML y se ejecuta tan pronto como est\u00e9 disponible.</li> <li>Evita el JavaScript en L\u00ednea: Para proyectos m\u00e1s grandes, es preferible evitar el JavaScript en l\u00ednea por razones de seguridad y mantenimiento.</li> </ul> <p>Integrar JavaScript en HTML puede mejorar significativamente la interactividad y funcionalidad de una p\u00e1gina web. Utilizar estos m\u00e9todos y buenas pr\u00e1cticas ayudar\u00e1 a mantener tu c\u00f3digo organizado y eficiente.</p> <p>Claro, aqu\u00ed tienes un ejemplo de c\u00f3mo usar los atributos <code>async</code> y <code>defer</code> en la etiqueta <code>&lt;script&gt;</code> para controlar la carga y ejecuci\u00f3n de scripts en un documento HTML:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#defer-y-async","title":"Defer y Async","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#1-uso-de-defer","title":"1. Uso de <code>defer</code>","text":"<p>El atributo <code>defer</code> se utiliza para garantizar que el script se ejecute en el orden en que aparece en el HTML, pero solo despu\u00e9s de que el documento HTML haya sido completamente cargado. Esto es \u00fatil para scripts que necesitan interactuar con el DOM.</p> <p>Ejemplo con <code>defer</code>:</p> <p>Archivo HTML (<code>index.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Uso de defer&lt;/title&gt;\n    &lt;!-- Cargar el script con defer --&gt;\n    &lt;script src=\"deferred-script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hola Mundo&lt;/h1&gt;\n    &lt;button id=\"deferButton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Archivo JavaScript (<code>deferred-script.js</code>):</p> <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n    document.getElementById('deferButton').addEventListener('click', () =&gt; {\n        alert('\u00a1Bot\u00f3n con defer clicado!');\n    });\n});\n</code></pre> <p>En este ejemplo, el script <code>deferred-script.js</code> se cargar\u00e1 en el orden en que aparece en el HTML, pero solo despu\u00e9s de que el documento se haya cargado completamente. Esto asegura que el bot\u00f3n exista en el DOM antes de que el script intente a\u00f1adir un manejador de eventos.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#2-uso-de-async","title":"2. Uso de <code>async</code>","text":"<p>El atributo <code>async</code> se utiliza para cargar el script en paralelo con la carga del HTML y ejecutarlo tan pronto como est\u00e9 disponible. Esto es \u00fatil para scripts que no dependen del DOM o de otros scripts y pueden ejecutarse de forma independiente.</p> <p>Ejemplo con <code>async</code>:</p> <p>*Archivo HTML (<code>index.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Uso de async&lt;/title&gt;\n    &lt;!-- Cargar el script con async --&gt;\n    &lt;script src=\"async-script.js\" async&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hola Mundo&lt;/h1&gt;\n    &lt;button id=\"asyncButton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Archivo JavaScript (<code>async-script.js</code>):</p> <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n    // Este script se ejecutar\u00e1 tan pronto como est\u00e9 disponible\n    alert('\u00a1Script con async ejecutado!');\n});\n</code></pre> <p>En este caso, el script <code>async-script.js</code> se cargar\u00e1 de forma as\u00edncrona y se ejecutar\u00e1 tan pronto como est\u00e9 disponible, sin esperar a que el documento se haya cargado completamente. Esto puede ser adecuado para scripts que no afectan a la estructura del DOM o que no dependen de otros scripts.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#comparacion-de-async-y-defer","title":"Comparaci\u00f3n de <code>async</code> y <code>defer</code>","text":"Atributo Caracter\u00edsticas Uso Ideal <code>defer</code> - Carga el script en paralelo con el HTML.- Ejecuta el script en el orden en que aparece en el HTML despu\u00e9s de que el documento se haya cargado completamente. Ideal para scripts que interact\u00faan con el DOM. <code>async</code> - Carga el script en paralelo con el HTML.- Ejecuta el script tan pronto como est\u00e9 disponible, sin esperar a que el HTML se haya cargado completamente. Ideal para scripts independientes que no dependen del DOM ni de otros scripts. <p>Utilizar <code>defer</code> y <code>async</code> correctamente puede ayudar a optimizar la carga de tu p\u00e1gina web y mejorar la experiencia del usuario al garantizar que los scripts no bloqueen el renderizado de la p\u00e1gina.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/","title":"Recursos y Preguntas Frecuentes","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#recursos","title":"Recursos","text":"<p>A continuaci\u00f3n, te dejo una lista de recursos \u00fatiles para profundizar en los temas clave de este m\u00f3dulo:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#entornos-y-herramientas-de-desarrollo-de-codigo-en-el-cliente-web","title":"Entornos y herramientas de desarrollo de c\u00f3digo en el cliente web","text":"<ul> <li>Visual Studio Code: Uno de los entornos de desarrollo m\u00e1s utilizados para trabajar con JavaScript y HTML.</li> <li>CodePen: Plataforma para probar c\u00f3digo en HTML, CSS y JavaScript en tiempo real.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#preguntas-frecuentes-faq","title":"Preguntas Frecuentes (FAQ)","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#1-que-es-un-mecanismo-de-ejecucion-de-codigo-en-un-navegador-web","title":"1. \u00bfQu\u00e9 es un mecanismo de ejecuci\u00f3n de c\u00f3digo en un navegador web?","text":"<p>El mecanismo de ejecuci\u00f3n de c\u00f3digo se refiere a c\u00f3mo los navegadores interpretan y ejecutan el c\u00f3digo, como JavaScript, para crear interactividad en una p\u00e1gina web. Esto incluye el proceso de descarga, an\u00e1lisis y ejecuci\u00f3n de scripts.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#2-cuales-son-las-limitaciones-de-ejecutar-codigo-en-el-navegador","title":"2. \u00bfCu\u00e1les son las limitaciones de ejecutar c\u00f3digo en el navegador?","text":"<p>El c\u00f3digo que se ejecuta en el navegador est\u00e1 limitado por el entorno del cliente, es decir, depende del rendimiento del dispositivo del usuario y de la compatibilidad del navegador. No puede acceder directamente a los recursos del sistema operativo por razones de seguridad.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#3-que-lenguajes-de-programacion-se-utilizan-comunmente-en-el-entorno-cliente","title":"3. \u00bfQu\u00e9 lenguajes de programaci\u00f3n se utilizan com\u00fanmente en el entorno cliente?","text":"<p>JavaScript es el lenguaje m\u00e1s com\u00fanmente utilizado en el lado del cliente. Adem\u00e1s, tecnolog\u00edas como HTML y CSS son fundamentales para el desarrollo web en el cliente, ya que definen la estructura y el estilo del contenido.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#4-cual-es-la-diferencia-entre-un-script-en-linea-y-un-script-externo","title":"4. \u00bfCu\u00e1l es la diferencia entre un script en l\u00ednea y un script externo?","text":"<ul> <li>Un script en l\u00ednea es el c\u00f3digo JavaScript que se incluye directamente en el archivo HTML mediante la etiqueta <code>&lt;script&gt;</code>.</li> <li>Un script externo se aloja en un archivo separado con la extensi\u00f3n <code>.js</code> y se referencia en el HTML con <code>&lt;script src=\"archivo.js\"&gt;&lt;/script&gt;</code>.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#5-que-ventajas-tiene-utilizar-frameworks-como-react-o-angular","title":"5. \u00bfQu\u00e9 ventajas tiene utilizar frameworks como React o Angular?","text":"<p>Los frameworks de JavaScript como React y Angular simplifican el desarrollo de aplicaciones web complejas. Ofrecen herramientas y bibliotecas que facilitan la creaci\u00f3n de componentes reutilizables, optimizan el rendimiento y mejoran la organizaci\u00f3n del c\u00f3digo.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#6-cuales-son-los-entornos-de-desarrollo-mas-recomendados-para-trabajar-en-el-cliente-web","title":"6. \u00bfCu\u00e1les son los entornos de desarrollo m\u00e1s recomendados para trabajar en el cliente web?","text":"<p>Algunas de las mejores herramientas para el desarrollo en el cliente web son Visual Studio Code (un editor de c\u00f3digo potente y con muchas extensiones) y CodePen (una plataforma en l\u00ednea para experimentar con HTML, CSS y JavaScript).</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#7-que-es-la-etiqueta-defer-y-como-se-utiliza-en-los-scripts","title":"7. \u00bfQu\u00e9 es la etiqueta <code>defer</code> y c\u00f3mo se utiliza en los scripts?","text":"<p>La etiqueta <code>defer</code> permite que el navegador descargue el script mientras contin\u00faa procesando el HTML. El script se ejecuta solo despu\u00e9s de que el documento HTML est\u00e9 completamente cargado. Esto es \u00fatil cuando tu script depende del contenido HTML.</p> <pre><code>&lt;script src=\"script.js\" defer&gt;&lt;/script&gt;\n</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#8-cuando-deberia-usar-async-en-lugar-de-defer","title":"8. \u00bfCu\u00e1ndo deber\u00eda usar <code>async</code> en lugar de <code>defer</code>?","text":"<p><code>async</code> es \u00fatil cuando el script no depende del DOM ni de otros scripts. Con <code>async</code>, el script se ejecuta tan pronto como est\u00e9 disponible, sin esperar a que el HTML termine de cargarse.</p> <pre><code>&lt;script src=\"script.js\" async&gt;&lt;/script&gt;\n</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#9-como-elegir-la-arquitectura-adecuada-para-mi-proyecto","title":"9. \u00bfC\u00f3mo elegir la arquitectura adecuada para mi proyecto?","text":"<p>La elecci\u00f3n de la arquitectura depende del tama\u00f1o y los requisitos del proyecto. Por ejemplo, una arquitectura monol\u00edtica puede ser suficiente para una aplicaci\u00f3n peque\u00f1a, pero si el proyecto crece, podr\u00eda ser mejor adoptar una arquitectura de microservicios para facilitar el mantenimiento y la escalabilidad.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#10-que-herramientas-son-recomendables-para-probar-codigo-en-el-cliente","title":"10. \u00bfQu\u00e9 herramientas son recomendables para probar c\u00f3digo en el cliente?","text":"<p>Herramientas como Chrome DevTools, Firefox Developer Tools y plataformas como CodePen son muy \u00fatiles para depurar y probar tu c\u00f3digo JavaScript en tiempo real.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/","title":"Ejercicios","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#ejercicios-de-javascript-sintaxis-y-conceptos-basicos","title":"Ejercicios de JavaScript: Sintaxis y conceptos b\u00e1sicos","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#1-variables-declaracion-inicializacion-y-ambito","title":"1. Variables: Declaraci\u00f3n, Inicializaci\u00f3n, y \u00c1mbito","text":"<p>Ejercicio 1.1: Declaraci\u00f3n e Inicializaci\u00f3n de Variables Declara tres variables: una de tipo <code>var</code>, otra de tipo <code>let</code> y otra de tipo <code>const</code>. Inicial\u00edzalas con cualquier valor.</p> <pre><code>// Declara una variable con var\nvar nombre = \"Juan\";\n\n// Declara una variable con let\nlet edad = 25;\n\n// Declara una constante con const\nconst PI = 3.1416;\n</code></pre> <p>Ejercicio 1.2: \u00c1mbito de Variables Escribe un c\u00f3digo donde demuestres el comportamiento de <code>var</code>, <code>let</code>, y <code>const</code> dentro y fuera de un bloque (<code>if</code>, <code>for</code>, etc.).</p> <pre><code>function pruebaAmbito() {\n    if (true) {\n        var variableVar = \"Dentro del bloque con var\";\n        let variableLet = \"Dentro del bloque con let\";\n        const variableConst = \"Dentro del bloque con const\";\n    }\n    console.log(variableVar); // Accesible\n    console.log(variableLet); // Error: No accesible\n    console.log(variableConst); // Error: No accesible\n}\npruebaAmbito();\n</code></pre> <p>Ejercicio 1.3: Reasignaci\u00f3n de Variables Declara una variable con <code>let</code> y reas\u00edgnale un nuevo valor m\u00e1s adelante en el c\u00f3digo. Haz lo mismo con una variable <code>var</code> y una constante <code>const</code> para observar qu\u00e9 sucede.</p> <pre><code>let ciudad = \"Madrid\";\nciudad = \"Barcelona\"; // Reasignaci\u00f3n v\u00e1lida\n\nvar pais = \"Espa\u00f1a\";\npais = \"Francia\"; // Reasignaci\u00f3n v\u00e1lida\n\nconst continente = \"Europa\";\n// continente = \"Asia\"; // Error: No se puede reasignar una constante\n</code></pre> <p>Ejercicio 1.4: Hoisting Demuestra el comportamiento del hoisting con <code>var</code>, <code>let</code> y <code>const</code>. Escribe un c\u00f3digo donde declares variables despu\u00e9s de usarlas, para ver c\u00f3mo act\u00faa el hoisting en cada caso.</p> <pre><code>console.log(x); // Undefined, debido al hoisting de var\nvar x = 5;\n\ntry {\n    console.log(y); // Error: no se puede acceder antes de la declaraci\u00f3n\n    let y = 10;\n} catch (e) {\n    console.log(e.message);\n}\n\ntry {\n    console.log(z); // Error: no se puede acceder antes de la declaraci\u00f3n\n    const z = 15;\n} catch (e) {\n    console.log(e.message);\n}\n</code></pre> <p>Ejercicio 1.5: \u00c1mbito Funcional vs \u00c1mbito de Bloque Crea una funci\u00f3n y dentro de ella declara variables con <code>var</code>, <code>let</code> y <code>const</code>. Muestra la diferencia de comportamiento de <code>var</code> frente a <code>let</code> y <code>const</code> en el \u00e1mbito funcional y de bloque.</p> <pre><code>function pruebaAmbitoFuncional() {\n    if (true) {\n        var varEnBloque = \"var dentro del bloque\";\n        let letEnBloque = \"let dentro del bloque\";\n        const constEnBloque = \"const dentro del bloque\";\n    }\n    console.log(varEnBloque); // Accesible: var tiene \u00e1mbito funcional\n    try {\n        console.log(letEnBloque); // Error: let tiene \u00e1mbito de bloque\n    } catch (e) {\n        console.log(e.message);\n    }\n    try {\n        console.log(constEnBloque); // Error: const tiene \u00e1mbito de bloque\n    } catch (e) {\n        console.log(e.message);\n    }\n}\npruebaAmbitoFuncional();\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#2-tipos-de-datos-y-conversion-de-tipos","title":"2. Tipos de Datos y Conversi\u00f3n de Tipos","text":"<p>Ejercicio 2.1: Tipos de Datos B\u00e1sicos Declara variables de los siguientes tipos: string, number, boolean, array, objeto.</p> <pre><code>let cadena = \"Hola Mundo\";\nlet numero = 42;\nlet booleano = true;\nlet arreglo = [1, 2, 3, 4];\nlet objeto = { nombre: \"Juan\", edad: 25 };\n</code></pre> <p>Ejercicio 2.2: Conversi\u00f3n de Tipos Convierte los siguientes valores:  1. De n\u00famero a string. 2. De string a n\u00famero. 3. De booleano a n\u00famero.</p> <pre><code>let num = 10;\nlet str = num.toString(); // Conversi\u00f3n a string\nlet nuevoNum = Number(\"20\"); // Conversi\u00f3n a n\u00famero\nlet booleanoANum = Number(true); // Conversi\u00f3n de booleano a n\u00famero (1)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#3-asignaciones","title":"3. Asignaciones","text":"<p>Ejercicio 3.1: Asignaciones B\u00e1sicas Declara una variable y as\u00edgnale un valor. Luego, actualiza su valor usando operadores de asignaci\u00f3n como <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>.</p> <pre><code>let contador = 5;\ncontador += 3; // Ahora contador es 8\ncontador -= 2; // Ahora contador es 6\ncontador *= 2; // Ahora contador es 12\ncontador /= 3; // Ahora contador es 4\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#4-operadores","title":"4. Operadores","text":"<p>Ejercicio 4.1: Operadores Aritm\u00e9ticos Crea una funci\u00f3n que reciba dos n\u00fameros y devuelva la suma, resta, multiplicaci\u00f3n, y divisi\u00f3n de ambos.</p> <pre><code>function operacionesBasicas(a, b) {\n    console.log(\"Suma:\", a + b);\n    console.log(\"Resta:\", a - b);\n    console.log(\"Multiplicaci\u00f3n:\", a * b);\n    console.log(\"Divisi\u00f3n:\", a / b);\n}\noperacionesBasicas(10, 5);\n</code></pre> <p>Ejercicio 4.2: Operadores L\u00f3gicos Usa operadores l\u00f3gicos (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>) para evaluar condiciones.</p> <pre><code>let a = true;\nlet b = false;\n\nconsole.log(a &amp;&amp; b); // false\nconsole.log(a || b); // true\nconsole.log(!a); // false\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#5-comentarios-al-codigo","title":"5. Comentarios al C\u00f3digo","text":"<p>Ejercicio 5.1: A\u00f1ade Comentarios Escribe un c\u00f3digo b\u00e1sico y a\u00f1ade comentarios que expliquen cada paso. Usa comentarios de l\u00ednea y de bloque.</p> <pre><code>// Comentario de una l\u00ednea\nlet numero = 10; // Inicializa una variable\n\n/*\n   Este bloque de c\u00f3digo multiplica el valor de la variable por 2\n   y lo imprime en la consola.\n*/\nnumero *= 2;\nconsole.log(numero);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#6-sentencias-y-condicionales","title":"6. Sentencias y Condicionales","text":"<p>Ejercicio 6.1: Condicionales If/Else Escribe una funci\u00f3n que reciba un n\u00famero y muestre un mensaje dependiendo de si es positivo, negativo o cero.</p> <pre><code>function evaluarNumero(numero) {\n    if (numero &gt; 0) {\n        console.log(\"El n\u00famero es positivo\");\n    } else if (numero &lt; 0) {\n        console.log(\"El n\u00famero es negativo\");\n    } else {\n        console.log(\"El n\u00famero es cero\");\n    }\n}\nevaluarNumero(10);\n</code></pre> <p>Ejercicio 6.2: Switch Case Crea un programa que use <code>switch</code> para elegir una acci\u00f3n basada en el d\u00eda de la semana.</p> <pre><code>let dia = \"martes\";\n\nswitch (dia) {\n    case \"lunes\":\n        console.log(\"Es lunes, comienzo de la semana\");\n        break;\n    case \"martes\":\n        console.log(\"Es martes, sigue adelante\");\n        break;\n    case \"viernes\":\n        console.log(\"Es viernes, casi fin de semana\");\n        break;\n    default:\n        console.log(\"D\u00eda no v\u00e1lido\");\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#7-bucles","title":"7. Bucles","text":"<p>Ejercicio 7.1: Bucle For Escribe un bucle <code>for</code> que imprima los n\u00fameros del 1 al 10.</p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    console.log(i);\n}\n</code></pre> <p>Ejercicio 7.2: Bucle While Usa un bucle <code>while</code> para contar hacia atr\u00e1s desde 5 hasta 1.</p> <pre><code>let contador = 5;\nwhile (contador &gt; 0) {\n    console.log(contador);\n    contador--;\n}\n</code></pre> <p>Ejercicio 7.3: Sentencias de Ruptura de Bucle Usa las sentencias <code>break</code> y <code>continue</code> en un bucle <code>for</code>.</p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i === 5) {\n        continue; // Salta la iteraci\u00f3n cuando i es 5\n    }\n    if (i === 8) {\n        break; // Termina el bucle cuando i es 8\n    }\n    console.log(i);\n}\n</code></pre>"}]}