{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u00a1Bienvenidos al M\u00f3dulo de Desarrollo Web en Entorno Cliente!","text":"<p>\u00a1Hola! Nos complace darte la bienvenida a este emocionante m\u00f3dulo sobre Desarrollo Web en Entorno Cliente. A lo largo de este curso, aprender\u00e1s las herramientas, lenguajes y t\u00e9cnicas fundamentales para crear aplicaciones web din\u00e1micas, interactivas y funcionales que funcionen en el navegador de tus usuarios.</p>"},{"location":"#que-aprenderas","title":"\u00bfQu\u00e9 aprender\u00e1s?","text":"<p>En este m\u00f3dulo, exploraremos una amplia gama de temas esenciales para el desarrollo en el lado del cliente, incluyendo:</p> <ul> <li>HTML y CSS: La estructura y estilo de las p\u00e1ginas web.</li> <li>JavaScript: El lenguaje de programaci\u00f3n que da vida a las aplicaciones en el navegador.</li> <li>DOM (Document Object Model): C\u00f3mo manipular din\u00e1micamente el contenido de una p\u00e1gina web.</li> <li>Eventos y Formularios: Interacci\u00f3n entre la web y el usuario.</li> <li>Ajax y Comunicaci\u00f3n As\u00edncrona: T\u00e9cnicas para actualizar el contenido de las p\u00e1ginas web sin recargar.</li> <li>Frameworks de Desarrollo: Como React, Angular, y Vue.js, que te permitir\u00e1n construir interfaces m\u00e1s complejas y eficientes.</li> <li>Herramientas de Desarrollo: Uso de entornos como Visual Studio Code, WebStorm y herramientas de depuraci\u00f3n de navegadores.</li> </ul>"},{"location":"#objetivos-del-modulo","title":"Objetivos del M\u00f3dulo","text":"<p>Al final del curso, ser\u00e1s capaz de:</p> <ul> <li>Desarrollar aplicaciones web funcionales y atractivas.</li> <li>Utilizar frameworks de JavaScript como React o Angular para crear interfaces de usuario din\u00e1micas y escalables.</li> <li>Comprender el ciclo de vida del desarrollo en el entorno cliente.</li> <li>Manipular elementos del DOM y gestionar eventos de forma eficiente.</li> <li>Utilizar t\u00e9cnicas de programaci\u00f3n modernas como el manejo de promesas, funciones as\u00edncronas, y llamadas a APIs.</li> <li>Implementar componentes reutilizables y gestionar el estado de una aplicaci\u00f3n con frameworks modernos.</li> </ul>"},{"location":"#recursos-disponibles","title":"Recursos Disponibles","text":"<p>Para ayudarte a lo largo del m\u00f3dulo, tendr\u00e1s acceso a:</p> <ul> <li>Documentaci\u00f3n: Gu\u00edas y ejemplos pr\u00e1cticos de HTML, CSS, JavaScript, React, Angular, y m\u00e1s.</li> <li>Foros de Discusi\u00f3n: Espacios para resolver dudas con tus compa\u00f1eros y profesores.</li> <li>Ejercicios y Proyectos: Actividades pr\u00e1cticas para poner en uso lo aprendido.</li> <li>Revisiones de C\u00f3digo: Comentarios sobre tus trabajos para mejorar continuamente.</li> </ul>"},{"location":"#que-necesitas","title":"\u00bfQu\u00e9 necesitas?","text":"<ul> <li>Conocimientos b\u00e1sicos de programaci\u00f3n en cualquier lenguaje (deseable).</li> <li>Un editor de c\u00f3digo como Visual Studio Code.</li> <li>Un navegador moderno como Google Chrome o Mozilla Firefox.</li> <li>Ganas de aprender y explorar el mundo del desarrollo web, incluyendo frameworks como React y Angular.</li> </ul>"},{"location":"#comencemos","title":"\u00a1Comencemos!","text":"<p>Estamos entusiasmados de acompa\u00f1arte en este viaje hacia convertirte en un desarrollador web m\u00e1s competente. Aprovecha los recursos, participa activamente, y sobre todo, divi\u00e9rtete programando. </p> <p>\u00a1El futuro del desarrollo web comienza aqu\u00ed!</p> <p>Info</p> <p>No olvides consultar regularmente el calendario de actividades y las fechas de entrega para mantenerte al d\u00eda con el curso.</p>"},{"location":"clase-git/","title":"Clase git","text":"<p>\u00a1Vamos a darle un toque animado y m\u00e1s visual a esos apuntes sobre Git y GitHub! A\u00f1adiremos emojis, un tono m\u00e1s amigable, y explicaremos la instalaci\u00f3n de Git en Windows, la carpeta <code>.git</code>, y c\u00f3mo crear un flujo de trabajo con Git y GitHub. \u00a1All\u00e1 vamos! \ud83d\ude80</p>"},{"location":"clase-git/#apuntes-introduccion-a-git-y-github","title":"\ud83d\udcdd Apuntes: Introducci\u00f3n a Git y GitHub","text":""},{"location":"clase-git/#1-que-es-git","title":"1\ufe0f\u20e3 \u00bfQu\u00e9 es Git? \ud83e\udd14","text":"<ul> <li>Git es un sistema de control de versiones distribuido que te permite llevar un seguimiento de los cambios en tu c\u00f3digo, colaborar con otros desarrolladores, \u00a1y hasta retroceder en el tiempo si algo sale mal! \ud83d\udd70\ufe0f</li> <li>Un Repositorio (repo) es como una caja fuerte para tu c\u00f3digo y sus versiones. Puede ser local (en tu propia m\u00e1quina) o remoto (en un servidor como GitHub).</li> </ul>"},{"location":"clase-git/#2-que-es-github","title":"2\ufe0f\u20e3 \u00bfQu\u00e9 es GitHub? \ud83c\udf10","text":"<ul> <li>GitHub es una plataforma basada en la web que utiliza Git para gestionar versiones de tu c\u00f3digo. \u00a1Pero GitHub es mucho m\u00e1s! Puedes gestionar proyectos, realizar integraciones continuas (CI/CD), publicar tu web con GitHub Pages, \u00a1y mucho m\u00e1s! \ud83c\udf89</li> </ul>"},{"location":"clase-git/#3-instalacion-de-git-en-windows","title":"3\ufe0f\u20e3 Instalaci\u00f3n de Git en Windows \ud83d\udda5\ufe0f","text":"<p>Para empezar a usar Git, necesitamos instalarlo:</p> <ol> <li>Descarga Git para Windows: Busca \"Descargar Git para Windows\" y sigue el asistente de instalaci\u00f3n. \ud83d\udc68\u200d\ud83d\udcbb</li> <li>Verifica la Instalaci\u00f3n: Abre la terminal de Git (Git Bash) y escribe:</li> </ol> <pre><code>git --version\n</code></pre> <p>Si ves un n\u00famero de versi\u00f3n, \u00a1est\u00e1s listo! \ud83c\udf8a</p>"},{"location":"clase-git/#4-primeros-pasos-con-git-crea-tu-primer-repositorio","title":"4\ufe0f\u20e3 Primeros Pasos con Git: \u00a1Crea tu Primer Repositorio! \ud83d\udcc2","text":""},{"location":"clase-git/#41-inicializacion-del-repositorio-local","title":"4.1. Inicializaci\u00f3n del Repositorio Local \ud83d\uddc3\ufe0f","text":"<ol> <li>Abre Git Bash y navega hasta la carpeta donde quieres crear tu proyecto.</li> <li>Ejecuta <code>git init</code> para inicializar un nuevo repositorio:</li> </ol> <pre><code>git init\n</code></pre> <p>\u00a1Voila! Ahora tu carpeta es un repositorio de Git. Esto crea una carpeta oculta <code>.git</code> que contiene todos los archivos de configuraci\u00f3n y el historial de cambios. \u00a1No toques esa carpeta directamente! \ud83d\uded1</p>"},{"location":"clase-git/#42-anadir-archivos-al-repositorio","title":"4.2. A\u00f1adir Archivos al Repositorio \ud83d\udcc4","text":"<ol> <li>A\u00f1ade archivos al \u00e1rea de preparaci\u00f3n (staging area) con:</li> </ol> <pre><code>git add nombre_del_archivo  # A\u00f1ade un archivo espec\u00edfico\ngit add .  # A\u00f1ade todos los archivos en el directorio actual\n</code></pre> <p>Pro Tip: Usa <code>git add .</code> para a\u00f1adir todos los cambios de una vez. \ud83d\ude80</p>"},{"location":"clase-git/#43-confirmar-cambios-commit","title":"4.3. Confirmar Cambios (Commit) \u2705","text":"<p>\u00a1Es hora de confirmar tus cambios! Esto guarda un \"snapshot\" de tu c\u00f3digo:</p> <pre><code>git commit -m \"Mensaje describiendo los cambios\"\n</code></pre> <p>Aseg\u00farate de que el mensaje de tu commit sea descriptivo. Por ejemplo, <code>git commit -m \"A\u00f1adir funci\u00f3n de suma para el carrito de compras\"</code>.</p>"},{"location":"clase-git/#5-conecta-tu-repositorio-local-a-github","title":"5\ufe0f\u20e3 Conecta tu Repositorio Local a GitHub \ud83d\ude80","text":"<ol> <li>Crea un Nuevo Repositorio en GitHub:</li> <li>Ve a GitHub, inicia sesi\u00f3n y haz clic en New repository.</li> <li>Dale un nombre y elige si ser\u00e1 p\u00fablico o privado. \u00a1No olvides iniciar el repo sin un README si ya tienes uno local! \ud83d\udcdd</li> <li>Vincula tu Repositorio Local al Remoto:</li> </ol> <p>Copia la URL del repositorio que acabas de crear en GitHub y usa el siguiente comando:</p> <pre><code>git remote add origin https://github.com/usuario/nombre-del-repositorio.git\n</code></pre> <p>Nota: <code>origin</code> es el nombre del enlace al repositorio remoto, y puedes cambiarlo si lo prefieres.</p> <ol> <li>Empuja tus Cambios al Repositorio Remoto (Push):</li> </ol> <p>Finalmente, sube tus cambios confirmados a GitHub:</p> <pre><code>git push origin main\n</code></pre> <p>\u00a1Y listo! Tus archivos ahora est\u00e1n en GitHub, listos para ser compartidos con el mundo. \ud83c\udf0d</p>"},{"location":"clase-git/#6-como-funciona-todo-junto-diagrama-de-flujo","title":"6\ufe0f\u20e3 \u00a1C\u00f3mo Funciona Todo Junto! Diagrama de Flujo \ud83d\udea6","text":"<p>Aqu\u00ed tienes un diagrama visual de c\u00f3mo se ve el flujo de trabajo t\u00edpico en Git:</p> <ol> <li>Crear un Repositorio Local (<code>git init</code>)</li> <li>A\u00f1adir Archivos (<code>git add</code>)</li> <li>Confirmar Cambios (<code>git commit</code>)</li> <li>Conectar con GitHub (<code>git remote add origin</code>)</li> <li>Subir Cambios (<code>git push</code>)</li> </ol> <pre><code>(Trabaja en tu Proyecto)\n        |\n      git init\n        |\n    (A\u00f1adir archivos)\n        |\n      git add .\n        |\n   (Confirmar cambios)\n        |\n    git commit -m \"Mensaje\"\n        |\n(Conectar a GitHub Repo)\n        |\ngit remote add origin URL\n        |\n   (Subir cambios a GitHub)\n        |\n     git push origin main\n</code></pre>"},{"location":"clase-git/#7-github-pages-publica-tu-web","title":"7\ufe0f\u20e3 GitHub Pages: \u00a1Publica Tu Web! \ud83c\udf10","text":"<p>GitHub Pages es perfecto para publicar p\u00e1ginas web est\u00e1ticas directamente desde un repositorio de GitHub.</p> <ol> <li>Crea un Repositorio en GitHub.</li> <li>Clona el Repositorio en tu M\u00e1quina:    <pre><code>git clone https://github.com/usuario/nombre-del-repositorio.git\ncd nombre-del-repositorio\n</code></pre></li> <li>Crea tu Web B\u00e1sica (<code>index.html</code>) y s\u00fabela a GitHub:    <pre><code>git add .\ngit commit -m \"A\u00f1adir mi web\"\ngit push origin main\n</code></pre></li> <li>Configura GitHub Pages en la secci\u00f3n Settings de tu repo, \u00a1y listo!</li> </ol>"},{"location":"clase-git/#8-situaciones-comunes-y-soluciones","title":"8\ufe0f\u20e3 Situaciones Comunes y Soluciones \ud83d\udee0\ufe0f","text":""},{"location":"clase-git/#81-no-se-muestran-los-cambios-en-github-pages","title":"8.1. No se Muestran los Cambios en GitHub Pages \ud83e\udd14","text":"<ul> <li>Espera unos minutos y actualiza la p\u00e1gina.</li> </ul>"},{"location":"clase-git/#82-error-404-al-acceder-a-la-web","title":"8.2. Error 404 al Acceder a la Web \ud83d\udeab","text":"<ul> <li>Aseg\u00farate de tener un <code>index.html</code> en la ra\u00edz del repositorio.</li> </ul>"},{"location":"clase-git/#83-rechazo-de-git-push-por-conflictos","title":"8.3. Rechazo de <code>git push</code> por Conflictos \u26a0\ufe0f","text":"<ol> <li>Realiza <code>git pull origin main</code> para bajar los cambios.</li> <li>Resuelve conflictos y confirma los cambios con <code>git commit</code>.</li> <li>Intenta <code>git push</code> de nuevo.</li> </ol>"},{"location":"clase-git/#9-buenas-practicas","title":"9\ufe0f\u20e3 Buenas Pr\u00e1cticas \ud83d\ude80","text":"<ul> <li>Commits peque\u00f1os y frecuentes con mensajes claros.</li> <li>Usa ramas (<code>branches</code>) para desarrollar nuevas caracter\u00edsticas y fusi\u00f3nalas a <code>main</code>.</li> <li>Documenta tu c\u00f3digo y mant\u00e9n tu repo limpio y organizado. \ud83d\udcda</li> </ul>"},{"location":"clase-git/#conclusion","title":"\ud83d\udd1f Conclusi\u00f3n \ud83c\udf89","text":"<p>Git y GitHub son herramientas fundamentales para cualquier desarrollador. Con esta gu\u00eda, ahora sabes c\u00f3mo crear un repositorio local, conectarlo a GitHub, y publicar tu web con GitHub Pages. \u00a1Empieza a colaborar y compartir tu c\u00f3digo como un profesional! \ud83d\udcaa</p> <p>\u00a1Espero que esta gu\u00eda te haya dado una base s\u00f3lida y emocionante para comenzar a usar Git y GitHub! \ud83d\ude0a</p>"},{"location":"planificacion/","title":"Planificaci\u00f3n","text":"Tema Horas Descripci\u00f3n 1. Selecci\u00f3n de arquitecturas y herramientas de programaci\u00f3n 7 Introducci\u00f3n a los mecanismos de ejecuci\u00f3n, lenguajes de programaci\u00f3n, integraci\u00f3n con HTML, y herramientas de desarrollo. 2. Manejo de la sintaxis del lenguaje 28 Fundamentos del lenguaje: variables, tipos de datos, operadores, comentarios, y estructuras de control. 3. Utilizaci\u00f3n de los objetos predefinidos del lenguaje 28 Uso de objetos predefinidos, interacci\u00f3n con el navegador, y gesti\u00f3n de ventanas y cookies. 4. Programaci\u00f3n con \u201carrays\u201d, funciones y objetos definidos por el usuario 21 Trabajar con arrays, funciones y objetos definidos por el usuario. 5. Interacci\u00f3n con el usuario: eventos y formularios 14 Manejo de eventos y formularios para mejorar la interacci\u00f3n con el usuario. 6. Utilizaci\u00f3n del modelo de objetos del documento (DOM) 21 Manipulaci\u00f3n del DOM para interactuar y modificar el contenido del documento. 7. Utilizaci\u00f3n de mecanismos de comunicaci\u00f3n as\u00edncrona 21 T\u00e9cnicas para realizar comunicaciones as\u00edncronas y actualizaci\u00f3n din\u00e1mica del contenido. Tema Contenidos 1. Selecci\u00f3n de arquitecturas y herramientas de programaci\u00f3n - Mecanismos de ejecuci\u00f3n de c\u00f3digo en un navegador web.  - Capacidades y limitaciones de ejecuci\u00f3n.  - Lenguajes de programaci\u00f3n en entorno cliente. Caracter\u00edsticas.  - Tecnolog\u00edas y lenguajes asociados.  - Integraci\u00f3n del c\u00f3digo con las etiquetas HTML. C\u00f3digo en l\u00ednea y en ficheros externos.  - Entornos y herramientas de desarrollo de c\u00f3digo en el cliente web. 2. Manejo de la sintaxis del lenguaje - Variables. Declaraci\u00f3n. Inicializaci\u00f3n. \u00c1mbito.  - Tipos de datos. Conversi\u00f3n de tipos de datos.  - Asignaciones.  - Operadores.  - Comentarios al c\u00f3digo.  - Sentencias.  - Decisiones. Sentencias condicionales.  - Bucles. Tipos. Sentencias de ruptura de bucle. 3. Utilizaci\u00f3n de los objetos predefinidos del lenguaje - Utilizaci\u00f3n de objetos. Objetos nativos del lenguaje.  - Interacci\u00f3n con el navegador. Objetos predefinidos asociados.  - Generaci\u00f3n de texto y elementos HTML desde c\u00f3digo.  - Aplicaciones pr\u00e1cticas de los marcos.  - Gesti\u00f3n de la apariencia de la ventana.  - Creaci\u00f3n de nuevas ventanas. Comunicaci\u00f3n entre ventanas.  - Cookies. Definici\u00f3n, creaci\u00f3n, almacenamiento y recuperaci\u00f3n. 4. Programaci\u00f3n con \u201carrays\u201d, funciones y objetos definidos por el usuario - Funciones predefinidas del lenguaje.  - Llamadas a funciones. Definici\u00f3n de funciones.  - \u201cArrays\u201d. Definici\u00f3n, creaci\u00f3n y uso.  - Creaci\u00f3n de objetos.  - Definici\u00f3n de m\u00e9todos y propiedades. 5. Interacci\u00f3n con el usuario: eventos y formularios - Modelo de gesti\u00f3n de eventos.  - Utilizaci\u00f3n de formularios desde c\u00f3digo.  - Modificaci\u00f3n de apariencia y comportamiento.  - Validaci\u00f3n y env\u00edo.  - Expresiones regulares. 6. Utilizaci\u00f3n del modelo de objetos del documento (DOM) - El modelo de objetos del documento (DOM).  - Objetos del modelo. Propiedades y m\u00e9todos de los objetos.  - Acceso al documento desde c\u00f3digo.  - Programaci\u00f3n de eventos.  - Diferencias en las implementaciones del modelo. 7. Utilizaci\u00f3n de mecanismos de comunicaci\u00f3n as\u00edncrona - Mecanismos de comunicaci\u00f3n as\u00edncrona.  - Modificaci\u00f3n din\u00e1mica del documento utilizando comunicaci\u00f3n as\u00edncrona.  - Formatos para el env\u00edo y recepci\u00f3n de informaci\u00f3n.  - Librer\u00edas de actualizaci\u00f3n din\u00e1mica."},{"location":"actividades/simulaciondesarrollosoftware/","title":"Simulaci\u00f3n de Etapas de Desarrollo de Software","text":""},{"location":"actividades/simulaciondesarrollosoftware/#1-empresa-techzone-store","title":"1. Empresa: TechZone Store","text":"<ul> <li>Entrevista con cliente inicial</li> <li>Fases Resueltas</li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/entrevista_inicial/","title":"Entrevista inicial","text":""},{"location":"actividades/simulaciondesarrollosoftware/situacion1/entrevista_inicial/#techzone-store","title":"TechZone Store","text":"<p>Entrevista entre desarrollador y encargado de TechZone Store</p> <p>Desarrollador: Hola, soy el encargado de desarrollar su aplicaci\u00f3n. \u00bfPuede explicarme qu\u00e9 funcionalidades necesita para su tienda en l\u00ednea?</p> <p>Encargado: Claro, lo que quiero es que los clientes puedan ver f\u00e1cilmente todos los productos que vendemos, organizados en diferentes categor\u00edas. Quiero que puedan hacer clic en un producto, ver detalles como la descripci\u00f3n, el precio, y, si les interesa, poder a\u00f1adirlo a un carrito de compras.</p> <p>Desarrollador: Perfecto, entonces los usuarios deber\u00edan poder navegar por un cat\u00e1logo y tener un carrito de compras. \u00bfQu\u00e9 m\u00e1s le gustar\u00eda?</p> <p>Encargado: Quiero que puedan registrarse con su correo electr\u00f3nico o iniciar sesi\u00f3n si ya tienen cuenta. Una vez en su cuenta, deben poder revisar sus compras anteriores y actualizar su direcci\u00f3n de env\u00edo.</p> <p>Desarrollador: Entonces, adem\u00e1s de las compras, tendr\u00edamos un sistema de cuentas de usuario y un historial de pedidos. \u00bfC\u00f3mo le gustar\u00eda que fuera el proceso de pago?</p> <p>Encargado: Para el pago, me gustar\u00eda que puedan elegir entre diferentes m\u00e9todos, como tarjeta de cr\u00e9dito o PayPal. Tambi\u00e9n ser\u00eda \u00fatil que pudieran ver el costo del env\u00edo antes de pagar y tener una confirmaci\u00f3n clara de su compra.</p> <p>Desarrollador: Perfecto, ofrecer\u00edamos opciones de pago y calcular\u00edamos el env\u00edo. \u00bfHay algo m\u00e1s que considere importante?</p> <p>Encargado: S\u00ed, ser\u00eda genial que recibieran notificaciones por correo electr\u00f3nico cuando su pedido se haya enviado, y que puedan hacer un seguimiento de d\u00f3nde est\u00e1 su pedido en tiempo real.</p> <p>Desarrollador: Muy bien, entonces integrar\u00edamos una funcionalidad para notificaciones y seguimiento del env\u00edo. Con esta informaci\u00f3n ya puedo tener una idea clara de lo que necesita.</p> <p>Desarrollador: Ahora que tenemos claro qu\u00e9 funcionalidades quiere, hablemos sobre los plazos de entrega. \u00bfTiene alguna fecha l\u00edmite en mente para el lanzamiento de la tienda en l\u00ednea?</p> <p>Encargado: Nos gustar\u00eda lanzar la tienda en unos tres meses. Queremos estar listos para la temporada de compras navide\u00f1as, por lo que ser\u00eda ideal tener algo funcional y en marcha antes de noviembre.</p> <p>Desarrollador: Entendido, con tres meses de margen trabajaremos en una primera fase que incluya el cat\u00e1logo de productos, el carrito de compras y el sistema de pagos. Despu\u00e9s, podremos a\u00f1adir las funcionalidades m\u00e1s avanzadas, como las notificaciones y el seguimiento de env\u00edos.</p> <p>Encargado: Me parece bien, mientras podamos tener algo listo para los clientes antes de las fiestas.</p> <p>Desarrollador: Perfecto, con eso en mente ajustaremos el calendario de desarrollo para cumplir con ese plazo. \u00a1Muchas gracias por la informaci\u00f3n!</p>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/","title":"Fases Resueltas","text":""},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#planificacion-y-analisis-de-requisitos","title":"Planificaci\u00f3n y An\u00e1lisis de Requisitos","text":"Requisito Plazo de entrega Cat\u00e1logo de productos 2 semanas Carrito de compras 1 semana Registro e inicio de sesi\u00f3n de usuarios 2 semanas Historial de pedidos y gesti\u00f3n de cuentas 1 semana Proceso de pago y opciones (Stripe y Coinbase) 2 semanas Notificaciones por correo electr\u00f3nico 1 semana Seguimiento de pedidos en tiempo real 1 semana Rendimiento y escalabilidad En paralelo con la implementaci\u00f3n Seguridad (SSL, cifrado, protecci\u00f3n XSS/CSRF) En paralelo con la integraci\u00f3n de pagos Compatibilidad (dise\u00f1o responsivo) Durante todo el desarrollo Mantenimiento (c\u00f3digo limpio, plan de actualizaciones) Al final del proyecto Pruebas de rendimiento, seguridad y escalabilidad 2 semanas Pruebas de compatibilidad 1 semana Despliegue y puesta en producci\u00f3n 1 semana <p>Este cronograma distribuye el trabajo a lo largo de los 3 meses de desarrollo, con tiempos dedicados a cada uno de los requisitos esenciales.</p>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#definicion-de-requisitos","title":"Definici\u00f3n de Requisitos","text":""},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#requisitos-funcionales","title":"Requisitos Funcionales","text":"<ul> <li> <p>Cat\u00e1logo de productos: Los usuarios podr\u00e1n ver todos los productos organizados por categor\u00edas.</p> <ul> <li>Subfunci\u00f3n: Los usuarios pueden hacer clic en un producto para ver detalles como la descripci\u00f3n, el precio y caracter\u00edsticas adicionales.</li> </ul> </li> <li> <p>Carrito de compras: Los usuarios podr\u00e1n a\u00f1adir productos a un carrito de compras.</p> <ul> <li>Subfunci\u00f3n: El carrito debe poder actualizarse con cambios de cantidad y eliminaci\u00f3n de productos.</li> </ul> </li> <li> <p>Registro e inicio de sesi\u00f3n: Los usuarios podr\u00e1n registrarse con su correo electr\u00f3nico y gestionar su cuenta.</p> <ul> <li>Subfunci\u00f3n: Los usuarios podr\u00e1n iniciar sesi\u00f3n, revisar sus compras anteriores y actualizar informaci\u00f3n personal como la direcci\u00f3n de env\u00edo.</li> </ul> </li> <li> <p>Historial de compras: Los usuarios tendr\u00e1n acceso a un historial de pedidos anteriores, donde podr\u00e1n ver detalles de cada compra.</p> </li> <li> <p>Proceso de pago: Los usuarios podr\u00e1n pagar usando varios m\u00e9todos, como tarjeta de cr\u00e9dito o PayPal.</p> <ul> <li>Subfunci\u00f3n: Verificar el costo del env\u00edo antes del pago y confirmar el pedido.</li> </ul> </li> <li> <p>Notificaciones de pedidos: Los usuarios recibir\u00e1n notificaciones por correo electr\u00f3nico sobre el estado de su pedido, como confirmaci\u00f3n de compra y env\u00edo.</p> </li> <li> <p>Seguimiento de pedidos: Los usuarios podr\u00e1n seguir el estado de sus pedidos en tiempo real una vez que hayan sido enviados.</p> </li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#requisitos-no-funcionales","title":"Requisitos No Funcionales","text":"<ul> <li> <p>Usabilidad: La interfaz debe ser f\u00e1cil de usar e intuitiva, con una navegaci\u00f3n fluida entre las secciones del cat\u00e1logo, carrito de compras y gesti\u00f3n de cuentas.</p> </li> <li> <p>Rendimiento: La aplicaci\u00f3n debe poder soportar m\u00faltiples usuarios simult\u00e1neamente, manteniendo tiempos de respuesta r\u00e1pidos, especialmente durante el proceso de pago.</p> </li> <li> <p>Seguridad: El sistema debe manejar de manera segura los datos de los usuarios y sus transacciones, asegurando la privacidad de la informaci\u00f3n personal y los datos financieros.</p> </li> <li> <p>Disponibilidad: La plataforma debe estar disponible 24/7, con un m\u00ednimo de tiempo de inactividad durante actualizaciones o mantenimiento.</p> </li> <li> <p>Escalabilidad: El sistema debe ser capaz de manejar el crecimiento en la cantidad de productos, usuarios y transacciones sin degradar el rendimiento.</p> </li> <li> <p>Compatibilidad: La aplicaci\u00f3n debe ser accesible en distintos dispositivos (m\u00f3viles, tablets, desktops) y navegadores modernos.</p> </li> <li> <p>Mantenibilidad: El c\u00f3digo de la aplicaci\u00f3n debe estar bien documentado para facilitar futuras actualizaciones o correcciones.</p> </li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#diseno-de-la-arquitectura","title":"Dise\u00f1o de la Arquitectura","text":"<ul> <li>Frontend desarrollado en React para una interfaz \u00e1gil y responsiva, adaptada a m\u00f3viles y tablets.</li> <li>Backend con Node.js y una API REST para manejar operaciones de usuario, carrito y pagos.</li> <li>Base de datos MongoDB para gestionar los productos, usuarios y pedidos.</li> <li>Integraci\u00f3n de la pasarela de pago Stripe para tarjetas y Coinbase Commerce para criptomonedas.</li> </ul> <pre><code>graph TD\n    A[Usuario] --&gt;|Usa interfaz| B[Frontend React]\n    B --&gt;|Solicita datos| C[API REST Node.js]\n    C --&gt;|Consulta/Modifica| D[Base de datos MongoDB]\n\n    subgraph Backend\n        C\n        D\n    end\n\n    B --&gt;|Pagos| E[Stripe]\n    B --&gt;|Pagos con Criptomonedas| F[Coinbase Commerce]</code></pre>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#implementacion","title":"Implementaci\u00f3n","text":"<ul> <li>Configurar la API REST para gestionar el cat\u00e1logo de productos, el carrito y los pagos.</li> <li>Crear interfaces atractivas con React, incluyendo un sistema de recomendaci\u00f3n de productos.</li> <li>Integrar las opciones de pago y configurar los cupones de descuento en tiempo real.</li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#pruebas","title":"Pruebas","text":"<ul> <li>Realizar pruebas de carga con herramientas como JMeter para ver c\u00f3mo responde la plataforma bajo la demanda de m\u00faltiples usuarios.</li> <li>Testear todos los flujos de compra y la funcionalidad del carrito con diferentes dispositivos y navegadores.</li> </ul>"},{"location":"actividades/simulaciondesarrollosoftware/situacion1/fasesresueltas/#despliegue-y-mantenimiento","title":"Despliegue y Mantenimiento","text":"<ul> <li>Desplegar la aplicaci\u00f3n en AWS para asegurar escalabilidad, con balanceadores de carga y respaldo automatizado.</li> <li>Monitorear el rendimiento de la aplicaci\u00f3n usando CloudWatch, y establecer ciclos de actualizaci\u00f3n peri\u00f3dicos para mejoras y nuevos lanzamientos de productos.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/","title":"1. Desarrollo de Software","text":"<p>El desarrollo de software puede parecer simple en un inicio: \"Solo necesito una idea\", pensamos. Sin embargo, en cuanto comenzamos a trabajar en un proyecto, nos damos cuenta de que surgen cientos de inconvenientes. El principal problema suele ser la falta de organizaci\u00f3n. Cuando un proyecto requiere varias pantallas o m\u00f3dulos, terminamos perdiendo mucho tiempo haciendo ajustes sobre la marcha. </p> <p>Para evitar esto, es fundamental seguir una serie de fases de desarrollo que nos ayuden a minimizar estos problemas desde el principio. A continuaci\u00f3n, te presento las etapas clave del desarrollo de software, que suelen ser el pilar para cualquier proyecto bien gestionado.</p> <pre><code>graph TD\n    A[Planificaci\u00f3n y An\u00e1lisis de Requisitos] --&gt; B[Definici\u00f3n de Requisitos]\n    B --&gt; C[Dise\u00f1o de la Arquitectura]\n    C --&gt; D[Implementaci\u00f3n]\n    D --&gt; E[Pruebas]\n    E --&gt; F[Despliegue y Mantenimiento]\n\n    F --&gt;|Soporte y actualizaciones| A</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#etapas-del-desarrollo-de-software","title":"Etapas del Desarrollo de Software","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#1-planificacion-y-analisis-de-requisitos","title":"1. Planificaci\u00f3n y An\u00e1lisis de Requisitos","text":"<p>Aqu\u00ed es donde todo comienza. Junto al cliente, analizamos sus necesidades y definimos los objetivos del proyecto. Se trata de comprender a fondo qu\u00e9 funcionalidades debe tener el software y c\u00f3mo estas se alinean con las expectativas del usuario. Esta etapa es crucial porque una buena planificaci\u00f3n previene sorpresas y problemas m\u00e1s adelante.</p> <p>Si no hacemos este trabajo a conciencia, es probable que durante las revisiones posteriores, el cliente mencione caracter\u00edsticas que pensaba que ya estaban incluidas. Esto puede generar retrasos importantes en el proyecto.</p> <p>Ojo con los cambios</p> <p>Los clientes suelen ser caprichosos, y la mayor\u00eda no tiene conocimientos t\u00e9cnicos. A menudo, a mitad del proyecto o al ver el avance del producto, se les ocurre alguna nueva funcionalidad que desean implementar. Aqu\u00ed es donde debes negociar con ellos para obtener m\u00e1s tiempo si esa nueva idea se va a llevar a cabo.</p> <p>Aqu\u00ed tienes la secci\u00f3n revisada con la explicaci\u00f3n ampliada sobre los requisitos funcionales y no funcionales:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#2-definicion-de-requisitos","title":"2. Definici\u00f3n de Requisitos","text":"<p>Despu\u00e9s de entender lo que el cliente necesita, se procede a documentar los requisitos espec\u00edficos del sistema. Aqu\u00ed definimos dos tipos principales de requisitos que guiar\u00e1n el desarrollo del software:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#requisitos-funcionales","title":"Requisitos Funcionales","text":"<p>Definici\u00f3n: Los requisitos funcionales describen qu\u00e9 debe hacer el software. Estos requisitos especifican las funcionalidades, caracter\u00edsticas y comportamientos que el sistema debe implementar para cumplir con las necesidades del usuario. En otras palabras, definen las acciones que el sistema debe ser capaz de realizar.</p> <ul> <li>Ejemplos:<ul> <li>El sistema debe permitir a los usuarios registrarse con una direcci\u00f3n de correo electr\u00f3nico.</li> <li>El software debe permitir la b\u00fasqueda de productos por categor\u00eda y palabras clave.</li> <li>Los usuarios deben poder realizar pagos utilizando tarjetas de cr\u00e9dito y PayPal.</li> </ul> </li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#requisitos-no-funcionales","title":"Requisitos No Funcionales","text":"<p>Definici\u00f3n: Los requisitos no funcionales se centran en c\u00f3mo debe comportarse el software en t\u00e9rminos de rendimiento, seguridad, usabilidad y otras caracter\u00edsticas cualitativas. Estos requisitos son cruciales para garantizar que el sistema funcione de manera eficiente y satisfactoria en el entorno real.</p> <ul> <li>Ejemplos:<ul> <li>El sistema debe ser capaz de manejar al menos 1000 usuarios simult\u00e1neamente sin degradar el rendimiento.</li> <li>La aplicaci\u00f3n debe cumplir con los est\u00e1ndares de accesibilidad para usuarios con discapacidades.</li> <li>Las transacciones deben ser seguras y cumplir con las normativas de protecci\u00f3n de datos.</li> </ul> </li> </ul> <p>Esta documentaci\u00f3n de requisitos funcionales y no funcionales ser\u00e1 nuestra gu\u00eda durante el desarrollo para asegurarnos de que todos estemos alineados y que el software cumpla con las expectativas del cliente.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#3-diseno-de-la-arquitectura","title":"3. Dise\u00f1o de la Arquitectura","text":"<p>En esta fase, se define c\u00f3mo se va a organizar el software, qu\u00e9 componentes tendr\u00e1 y c\u00f3mo interactuar\u00e1n entre s\u00ed. Un buen dise\u00f1o de arquitectura facilita la implementaci\u00f3n y, m\u00e1s adelante, el mantenimiento. </p> <p>Eligiendo la arquitectura adecuada</p> <p>Existen muchas arquitecturas de software. Las m\u00e1s tradicionales, como las arquitecturas monol\u00edticas, han ido dando paso a arquitecturas de microservicios, donde cada parte del software se maneja de forma independiente. Esto facilita las modificaciones y la gesti\u00f3n de errores.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#4-implementacion","title":"4. Implementaci\u00f3n","text":"<p>Aqu\u00ed es donde realmente nos ponemos manos a la obra con la codificaci\u00f3n. Tomamos los requisitos y el dise\u00f1o que ya hemos definido y los convertimos en c\u00f3digo. Es fundamental seguir buenas pr\u00e1cticas de programaci\u00f3n para garantizar que el software sea de calidad y no presente problemas en el futuro.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#5-pruebas","title":"5. Pruebas","text":"<p>Una vez que hemos desarrollado el software, es el momento de probarlo. Las pruebas son esenciales para verificar que el producto cumple con los requisitos que definimos al principio. Incluyen pruebas unitarias, de integraci\u00f3n y de sistema, y nos ayudan a identificar y corregir errores antes de que el software sea lanzado al cliente.</p> <p>No escatimes en pruebas</p> <p>En algunos enfoques \u00e1giles, se minimiza la fase de pruebas, pero cuando el software crece en tama\u00f1o y complejidad, esta fase es crucial para evitar errores que nos costar\u00e1n mucho m\u00e1s tiempo arreglar despu\u00e9s.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#entornos-de-pruebas","title":"Entornos de Pruebas","text":"<p>Para una evaluaci\u00f3n efectiva del software, se utilizan varios entornos de pruebas, cada uno con un prop\u00f3sito espec\u00edfico:</p> <ol> <li> <p>Entorno de Desarrollo:</p> <ul> <li>Descripci\u00f3n: Espacio donde los desarrolladores crean y modifican el c\u00f3digo. Aqu\u00ed se realizan pruebas unitarias y b\u00e1sicas de integraci\u00f3n.</li> <li>Caracter\u00edsticas: Facilita el desarrollo y pruebas iniciales del c\u00f3digo.</li> </ul> </li> <li> <p>Entorno de Pruebas (QA):</p> <ul> <li>Descripci\u00f3n: Entorno dedicado a la ejecuci\u00f3n de pruebas exhaustivas del software, incluyendo pruebas de sistema y de aceptaci\u00f3n del usuario.</li> <li>Caracter\u00edsticas: Replica el entorno de producci\u00f3n, sin afectar a los usuarios finales.</li> </ul> </li> <li> <p>Entorno de Preproducci\u00f3n:</p> <ul> <li>Descripci\u00f3n: \u00daltimo entorno antes del despliegue en producci\u00f3n, usado para la validaci\u00f3n final del sistema en condiciones similares a producci\u00f3n.</li> <li>Caracter\u00edsticas: Permite pruebas finales de carga y rendimiento.</li> </ul> </li> <li> <p>Entorno de Producci\u00f3n:</p> <ul> <li>Descripci\u00f3n: El entorno real donde el software es utilizado por los usuarios finales.</li> <li>Caracter\u00edsticas: Los errores en este entorno pueden tener un impacto significativo, por lo que se deben hacer pruebas exhaustivas en los entornos anteriores.</li> </ul> </li> </ol>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#qa-quality-assurance","title":"QA (Quality Assurance)","text":"<p>El aseguramiento de la calidad (QA) es un proceso integral que asegura que el software cumpla con los est\u00e1ndares de calidad. Incluye:</p> <ul> <li>Prevenci\u00f3n de Defectos: Implementaci\u00f3n de pr\u00e1cticas y procesos para evitar errores.</li> <li>Pruebas Sistem\u00e1ticas: Ejecuci\u00f3n de pruebas para identificar y corregir defectos antes del lanzamiento.</li> <li>Documentaci\u00f3n y Gesti\u00f3n: Registro y seguimiento de defectos encontrados y su resoluci\u00f3n.</li> </ul> <p>QA es crucial no solo para encontrar errores, sino para garantizar que el software sea robusto y fiable desde el principio hasta el final del ciclo de desarrollo.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#6-despliegue-y-mantenimiento","title":"6. Despliegue y Mantenimiento","text":"<p>Finalmente, llega el momento de poner el software en funcionamiento en el entorno de producci\u00f3n. Esto puede incluir la instalaci\u00f3n del software en los sistemas del cliente y capacitar a los usuarios. Despu\u00e9s de la entrega, el mantenimiento es una actividad continua que abarca la correcci\u00f3n de errores y la actualizaci\u00f3n del sistema conforme el cliente lo requiera. En esta fase, el desarrollador suele seguir recibiendo una remuneraci\u00f3n por el soporte y las mejoras del software.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#metodologias-agiles","title":"Metodolog\u00edas \u00c1giles","text":"<p>Las metodolog\u00edas \u00e1giles son un conjunto de principios y pr\u00e1cticas para gestionar proyectos de desarrollo de software. Se centran en la colaboraci\u00f3n continua con el cliente, la flexibilidad para adaptarse a cambios, y la entrega frecuente de software funcional.</p> <p>Una de las metodolog\u00edas \u00e1giles m\u00e1s populares es Scrum, que organiza el desarrollo en ciclos cortos e iterativos llamados sprints.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#metodologia-scrum","title":"Metodolog\u00eda Scrum","text":"<p>Scrum es una metodolog\u00eda \u00e1gil que se enfoca en la entrega r\u00e1pida y continua de software funcional. Cada sprint suele durar entre 1 y 4 semanas, y en ese tiempo se desarrollan caracter\u00edsticas completas que pueden ser probadas y revisadas. El equipo de Scrum se organiza en tres roles principales:</p> Rol Descripci\u00f3n Product Owner Define la visi\u00f3n del producto y prioriza las caracter\u00edsticas. Scrum Master Facilita el proceso Scrum, asegurando que se siga el marco metodol\u00f3gico. Equipo de Desarrollo Desarrolla, prueba y entrega las funcionalidades acordadas en cada sprint."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#ciclo-scrum","title":"Ciclo Scrum","text":"<pre><code>graph TD\n    A[Product Backlog] --&gt; B[Sprint Planning]\n    B --&gt; C(Sprint Backlog)\n    C --&gt; D[Daily Scrum]\n    D --&gt; E(Incremento de Software)\n    E --&gt; F[Revisi\u00f3n del Sprint]\n    F --&gt; G[Retrospectiva]\n    G --&gt; B\n\n    subgraph Ciclo de un Sprint\n        C --&gt; E\n    end</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#fases-del-ciclo-scrum","title":"Fases del Ciclo Scrum:","text":"<ol> <li> <p>Product Backlog: Es una lista priorizada de todas las caracter\u00edsticas o tareas que el producto debe incluir. El Product Owner es el responsable de mantener y priorizar este backlog.</p> </li> <li> <p>Sprint Planning: El equipo selecciona las tareas m\u00e1s importantes del backlog que puedan completarse durante el sprint. Estas tareas forman el Sprint Backlog.</p> </li> <li> <p>Sprint: El equipo trabaja en las tareas seleccionadas durante el tiempo del sprint, realizando Daily Scrums (reuniones diarias de seguimiento) para discutir el progreso y resolver impedimentos.</p> </li> <li> <p>Incremento de Software: Al final del sprint, el equipo debe entregar un incremento de software funcional que puede ser revisado.</p> </li> <li> <p>Revisi\u00f3n del Sprint: El equipo muestra lo que se ha desarrollado durante el sprint a los interesados y obtiene feedback.</p> </li> <li> <p>Retrospectiva del Sprint: El equipo analiza lo que funcion\u00f3 bien y lo que no, y define acciones de mejora para futuros sprints.</p> </li> </ol>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#beneficios-de-scrum","title":"Beneficios de Scrum","text":"<ul> <li>Adaptabilidad: Permite cambios y ajustes en funci\u00f3n de los comentarios del cliente o del mercado.</li> <li>Colaboraci\u00f3n: Fomenta la interacci\u00f3n constante entre el equipo de desarrollo y los interesados.</li> <li>Entrega r\u00e1pida: Los sprints cortos garantizan entregas frecuentes de software funcional.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#sprints","title":"Sprints","text":"<p>Cada sprint tiene una duraci\u00f3n fija y produce un resultado que se puede mostrar al cliente. Esto asegura que se ve progreso de manera constante y que el producto se desarrolla de manera iterativa. El equipo tiene la libertad de ajustar la carga de trabajo en funci\u00f3n del feedback recibido al final de cada sprint.</p> <ul> <li>Duraci\u00f3n: De 1 a 4 semanas.</li> <li>Objetivo: Completar una serie de tareas del Sprint Backlog que tengan valor para el usuario final.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/1desarrollodesoftware/#ciclo-de-retroalimentacion-continua","title":"Ciclo de Retroalimentaci\u00f3n Continua","text":"<p>Scrum est\u00e1 dise\u00f1ado para recibir y procesar retroalimentaci\u00f3n de forma continua, lo que permite mejorar tanto el producto como el proceso de desarrollo. La retroalimentaci\u00f3n constante durante y al final de cada sprint ayuda a asegurar que el software se ajuste a las necesidades del cliente.</p> <p>Scrum es ideal para proyectos donde los requisitos no est\u00e1n completamente definidos desde el principio y donde se espera que haya muchos cambios a lo largo del tiempo.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/2tiposdeaplicaciones/","title":"2. Tipos de aplicaciones","text":"<p>En el desarrollo web, las aplicaciones se pueden clasificar en varios tipos seg\u00fan su funcionalidad y el entorno en el que operan. Cada tipo tiene caracter\u00edsticas espec\u00edficas y se utiliza en diferentes contextos para satisfacer diversas necesidades.</p> Tipo de Aplicaci\u00f3n Descripci\u00f3n Ejemplos Comunes Aplicaciones Web Aplicaciones dise\u00f1adas para ser accedidas a trav\u00e9s de un navegador web. Estas aplicaciones requieren conexi\u00f3n a Internet y son accesibles desde cualquier dispositivo con un navegador. Ofrecen versatilidad y pueden adaptarse a diferentes tama\u00f1os de pantalla. Google Docs, Facebook, Amazon Aplicaciones Web Progresivas (PWA) Aplicaciones web que ofrecen una experiencia similar a la de las aplicaciones nativas en dispositivos m\u00f3viles. Pueden funcionar offline y se pueden instalar en la pantalla de inicio del dispositivo. Twitter Lite, Pinterest, Starbucks Aplicaciones de Una P\u00e1gina (SPA) Aplicaciones web que cargan una sola p\u00e1gina HTML y actualizan el contenido din\u00e1micamente sin recargar la p\u00e1gina completa. Mejoran la experiencia del usuario al ofrecer una navegaci\u00f3n m\u00e1s fluida. Gmail, Netflix, Trello Aplicaciones M\u00f3viles Web Aplicaciones optimizadas para dispositivos m\u00f3viles, accesibles a trav\u00e9s del navegador del dispositivo. Est\u00e1n dise\u00f1adas para adaptarse a pantallas m\u00e1s peque\u00f1as y pueden ofrecer una experiencia de usuario optimizada. eBay, Wikipedia, LinkedIn Aplicaciones de Backend Aplicaciones que operan en el servidor y gestionan la l\u00f3gica del negocio, el almacenamiento de datos y la autenticaci\u00f3n de usuarios. Se comunican con las aplicaciones front-end a trav\u00e9s de APIs. Firebase, AWS Lambda, Stripe Frameworks y Bibliotecas de Desarrollo Herramientas y conjuntos de c\u00f3digo que facilitan el desarrollo web al proporcionar funcionalidades predefinidas y estructuras de c\u00f3digo. Ayudan a acelerar el proceso de desarrollo y asegurar la calidad del software. React, Angular, Vue.js, Bootstrap <p>Cada tipo de aplicaci\u00f3n tiene caracter\u00edsticas distintas que influyen en su dise\u00f1o y desarrollo, permitiendo a los desarrolladores web elegir la mejor opci\u00f3n seg\u00fan las necesidades espec\u00edficas del proyecto y del usuario final.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/","title":"3. Desarrollo de aplicaciones Web","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#desarrollo-de-aplicaciones-web","title":"Desarrollo de Aplicaciones Web","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#navegadores","title":"Navegadores","text":"<p>Los navegadores son software que permite a los usuarios acceder y visualizar contenido en la web. Algunos de los navegadores m\u00e1s populares son Google Chrome, Mozilla Firefox, Safari, Microsoft Edge y Opera. Cada navegador tiene sus propias caracter\u00edsticas y motores de renderizado, lo que puede afectar la forma en que se muestra el contenido web y c\u00f3mo se ejecutan los scripts.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#funcionamiento-de-los-navegadores-protocolo-http","title":"Funcionamiento de los Navegadores. Protocolo HTTP","text":"<p>El funcionamiento de un navegador se basa en el Protocolo de Transferencia de Hipertexto (HTTP), que es el protocolo fundamental para la comunicaci\u00f3n en la web. Cuando un usuario ingresa una URL o hace clic en un enlace, el navegador env\u00eda una petici\u00f3n HTTP al servidor que aloja el recurso solicitado. Esta petici\u00f3n incluye informaci\u00f3n sobre el tipo de recurso que se desea obtener y el navegador que la est\u00e1 realizando. El servidor, a su vez, responde con el contenido solicitado, que puede ser un documento HTML, im\u00e1genes, o archivos CSS y JavaScript.</p> <pre><code>sequenceDiagram\n    participant User as Usuario\n    participant Browser as Navegador\n    participant Server as Servidor\n\n    User-&gt;&gt;Browser: Ingresa URL\n    Browser-&gt;&gt;Server: Solicitud HTTP (GET)\n    Server--&gt;&gt;Browser: Respuesta HTTP (HTML, CSS, JS)\n    Browser-&gt;&gt;Browser: Renderiza contenido\n    Browser--&gt;&gt;User: Muestra p\u00e1gina web</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#arquitectura-cliente-y-servidor","title":"Arquitectura Cliente y Servidor","text":"<p>La arquitectura de las aplicaciones web se basa en un modelo cliente-servidor. En este modelo, el cliente (generalmente un navegador web) realiza solicitudes al servidor, que es donde se almacenan y procesan los datos. El servidor responde a las solicitudes del cliente enviando los recursos necesarios. Esta interacci\u00f3n permite que los usuarios accedan a aplicaciones y servicios en l\u00ednea desde cualquier lugar con conexi\u00f3n a Internet.</p> <pre><code>graph TD\n    A[Cliente] --&gt;|Solicita recurso| B[Servidor]\n    B --&gt;|Env\u00eda recurso| A\n    B --&gt;|Accede a base de datos| C[Base de Datos]\n    C --&gt;|Devuelve datos| B</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#interprete-de-codigo-web","title":"Int\u00e9rprete de C\u00f3digo Web","text":"<p>Los navegadores incluyen int\u00e9rpretes que procesan diferentes tipos de c\u00f3digo. Por ejemplo, el motor de renderizado interpreta el HTML y CSS para mostrar la p\u00e1gina, mientras que el int\u00e9rprete de JavaScript ejecuta scripts que pueden modificar el contenido de la p\u00e1gina de manera din\u00e1mica. Cada navegador utiliza diferentes motores e int\u00e9rpretes; por ejemplo, Chrome utiliza el motor Blink y el int\u00e9rprete V8, mientras que Firefox utiliza Gecko y SpiderMonkey.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#todos-los-navegadores-son-iguales","title":"\u00bfTodos los Navegadores son Iguales?","text":"<p>No, no todos los navegadores son iguales. Aunque todos cumplen la funci\u00f3n b\u00e1sica de mostrar contenido web, pueden diferir en su rendimiento, compatibilidad con est\u00e1ndares web, y caracter\u00edsticas adicionales. Algunos navegadores pueden manejar ciertas tecnolog\u00edas web de manera m\u00e1s eficiente que otros, lo que puede afectar la experiencia del usuario. Adem\u00e1s, la forma en que cada navegador interpreta y ejecuta el c\u00f3digo puede variar, lo que puede llevar a diferencias en la visualizaci\u00f3n de las p\u00e1ginas web.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#tecnologias-de-desarrollo-web","title":"Tecnolog\u00edas de Desarrollo Web","text":"Tecnolog\u00eda Descripci\u00f3n Logo HTML HTML (HyperText Markup Language) es el lenguaje de marcado est\u00e1ndar para crear p\u00e1ginas web. Permite estructurar el contenido en la web mediante el uso de etiquetas que definen elementos como encabezados, p\u00e1rrafos, enlaces, im\u00e1genes, y m\u00e1s. Es fundamental para cualquier desarrollo web, ya que proporciona la base sobre la cual se construyen las aplicaciones y sitios web. CSS CSS (Cascading Style Sheets) es el lenguaje utilizado para describir la presentaci\u00f3n de un documento HTML. Permite aplicar estilos a los elementos HTML, como colores, fuentes, m\u00e1rgenes y dise\u00f1o en general. CSS es esencial para crear interfaces atractivas y responsivas que mejoren la experiencia del usuario. JavaScript JavaScript es un lenguaje de programaci\u00f3n que permite implementar funcionalidades complejas en las p\u00e1ginas web. Con JavaScript, se pueden crear interacciones din\u00e1micas, manipular el DOM (Document Object Model), y realizar solicitudes as\u00edncronas a servidores, lo que permite la creaci\u00f3n de aplicaciones web m\u00e1s interactivas y din\u00e1micas."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#frameworks-de-desarrollo-del-lado-cliente","title":"Frameworks de desarrollo del lado Cliente","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#diseno","title":"Dise\u00f1o","text":"Framework Descripci\u00f3n Logo Bootstrap Es un framework CSS que proporciona un conjunto de herramientas predefinidas para el dise\u00f1o web responsivo. Facilita la creaci\u00f3n de interfaces atractivas y adaptables a diferentes dispositivos. Tailwind CSS Es un framework CSS de utilidad que permite a los desarrolladores crear dise\u00f1os personalizados de manera r\u00e1pida y eficiente, utilizando clases predefinidas."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/3desarrollodeaplicacionesweb/#desarrollo","title":"Desarrollo","text":"Tecnolog\u00eda Descripci\u00f3n Logo Angular Un framework de JavaScript desarrollado por Google, ideal para construir aplicaciones web de una sola p\u00e1gina (SPA). Proporciona una estructura robusta y herramientas para el desarrollo de aplicaciones complejas. React Una biblioteca de JavaScript para construir interfaces de usuario, desarrollada por Facebook. Es muy popular por su enfoque en componentes reutilizables y su eficiencia en la actualizaci\u00f3n del DOM. Vue.js Un framework progresivo para construir interfaces de usuario. Es conocido por su simplicidad y flexibilidad, permitiendo a los desarrolladores adoptar sus caracter\u00edsticas de manera gradual."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/","title":"4. Entorno de desarrollo","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#entorno-de-desarrollo","title":"Entorno de Desarrollo","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#control-de-versiones","title":"Control de Versiones","text":"<p>Git es un sistema de control de versiones distribuido que permite a los desarrolladores rastrear, gestionar y revertir cambios en el c\u00f3digo fuente a lo largo del tiempo. Es una herramienta fundamental para la colaboraci\u00f3n eficiente en proyectos de software, ya que permite que varios desarrolladores trabajen simult\u00e1neamente sin conflictos. Git tambi\u00e9n facilita la creaci\u00f3n de ramas (branches) para desarrollar nuevas caracter\u00edsticas de manera independiente, permitiendo luego fusionarlas (merge) de manera controlada.</p> <p>Git permite a los desarrolladores tener su propia copia local del c\u00f3digo, trabajar en diferentes caracter\u00edsticas o soluciones de errores sin interferir con el trabajo de otros. Una vez finalizados los cambios, pueden ser integrados en la rama principal (generalmente \"main\" o \"master\"). Esto asegura que el desarrollo sea modular y escalable.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#repositorios-remotos","title":"Repositorios remotos","text":"<p>Los repositorios remotos permiten almacenar y gestionar el c\u00f3digo de manera centralizada en servidores remotos o en la nube. Estas plataformas no solo proporcionan almacenamiento, sino tambi\u00e9n herramientas colaborativas como control de permisos, revisiones de c\u00f3digo (pull requests) y CI/CD (Integraci\u00f3n y Entrega Continua). Algunas de las plataformas m\u00e1s populares incluyen:</p> Plataforma Descripci\u00f3n Logo GitHub GitHub es una de las plataformas m\u00e1s populares para alojar repositorios Git. Proporciona caracter\u00edsticas como control de versiones, colaboraci\u00f3n, gesti\u00f3n de proyectos y CI/CD. Permite repositorios p\u00fablicos y privados, con una interfaz amigable para equipos de todo el mundo. GitLab GitLab es una soluci\u00f3n integral que ofrece alojamiento de repositorios Git, CI/CD y herramientas de gesti\u00f3n de proyectos. Su c\u00f3digo abierto y la posibilidad de instalarlo en servidores privados lo hacen popular en grandes organizaciones. Bitbucket Bitbucket permite almacenar repositorios de Git (y Mercurial) en la nube, con un enfoque fuerte en la integraci\u00f3n con Jira y otras herramientas de Atlassian. Ideal para equipos que ya utilizan la suite de Atlassian. Ofrece tanto repositorios privados como p\u00fablicos. Azure Repos Parte de Azure DevOps, Azure Repos ofrece alojamiento de repositorios Git con integraci\u00f3n directa con otros servicios de Microsoft, ideal para empresas que ya utilizan el ecosistema Azure. Permite la automatizaci\u00f3n de flujos de trabajo mediante pipelines CI/CD. AWS CodeCommit AWS CodeCommit es un servicio de control de versiones privado y seguro que se integra con otras herramientas de AWS. Ofrece una soluci\u00f3n completamente gestionada y escalable, lo que lo convierte en una opci\u00f3n popular entre empresas que ya operan en la nube de Amazon."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#ciclo-de-trabajo-con-git","title":"Ciclo de trabajo con Git","text":"<pre><code>sequenceDiagram\n    participant WD as Working Directory\n    participant SA as Staging Area\n    participant LR as Local Repository\n    participant RR as Remote Repository\n\n    WD-&gt;&gt;WD: Editar archivos\n    WD-&gt;&gt;SA: git add\n    SA-&gt;&gt;LR: git commit\n    LR-&gt;&gt;RR: git push\n    RR--&gt;&gt;LR: git pull\n    LR-&gt;&gt;WD: git checkout\n    WD-&gt;&gt;WD: git status</code></pre> <p>Este diagrama es claro y muestra el flujo de trabajo de Git, desde que haces cambios en el Working Directory, los a\u00f1ades al Staging Area, los confirmas en el Local Repository, y finalmente los subes al Remote Repository para colaborar con otros.</p> Etapa Descripci\u00f3n Comando importante Working Directory Zona donde trabajas en tus archivos localmente. Aqu\u00ed editas el c\u00f3digo y haces los cambios. <code>git status</code>: Revisar el estado de los archivos (modificados, nuevos o eliminados). Staging Area Los archivozzzzs que deseas incluir en el pr\u00f3ximo commit son a\u00f1adidos aqu\u00ed mediante el comando <code>git add</code>. <code>git add [archivo]</code>: Mover archivos al \u00e1rea de preparaci\u00f3n. Local Repository Una vez que los archivos est\u00e1n en el Staging Area, los confirmas al repositorio local con <code>git commit</code>. Esto guarda el historial de cambios localmente. <code>git commit -m \"mensaje del commit\"</code>: Confirmar los cambios en el repositorio local. Remote Repository Despu\u00e9s de confirmar tus cambios localmente, puedes sincronizarlos con un repositorio remoto (como GitHub, GitLab o Bitbucket) mediante el comando <code>git push</code>. <code>git push</code>: Enviar los cambios al repositorio remoto. git pull Trae los cambios realizados en el repositorio remoto hacia el repositorio local, manteniendo tu trabajo sincronizado con el de otros colaboradores. <code>git pull</code>: Obtener y fusionar cambios del repositorio remoto. git checkout Cambia entre ramas o versiones del c\u00f3digo, llevando el contenido de la rama seleccionada a tu Working Directory. <code>git checkout [rama]</code>: Cambiar a otra rama del c\u00f3digo."},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/4entornodedesarrollo/#ides","title":"IDEs","text":"<p>Los IDEs (Entornos de Desarrollo Integrados) son herramientas que proporcionan un entorno completo para el desarrollo de software. Adem\u00e1s de un editor de c\u00f3digo, muchos incluyen herramientas para depurar, gestionar versiones y ejecutar proyectos. A continuaci\u00f3n, se enumeran algunos de los principales IDEs utilizados en desarrollo web y otras \u00e1reas:</p> IDE Descripci\u00f3n Popularidad Costo Logo Visual Studio Code Un editor de c\u00f3digo ligero pero potente de Microsoft, con soporte para m\u00faltiples lenguajes de programaci\u00f3n mediante extensiones. Incluye depurador, terminal integrado y soporte para Git. Muy alto, uno de los m\u00e1s populares Gratuito WebStorm IDE especializado en JavaScript y tecnolog\u00edas web modernas, desarrollado por JetBrains. Ofrece soporte avanzado para frameworks como React, Angular y Node.js. Alto, muy popular entre desarrolladores web Pago (con prueba gratuita) o Versi\u00f3n Community Sublime Text Un editor de texto muy r\u00e1pido y minimalista que puede ser ampliado con m\u00faltiples extensiones para soportar diversos lenguajes de programaci\u00f3n. Ideal para desarrolladores que prefieren un editor ligero. Alto, muy usado en desarrollo ligero Pago (con prueba gratuita) o Versi\u00f3n Community Atom Editor de c\u00f3digo de GitHub, conocido por su alta personalizaci\u00f3n y su fuerte integraci\u00f3n con Git. Es una opci\u00f3n flexible para desarrolladores web y cuenta con una gran variedad de extensiones. Moderado, popular entre desarrolladores de GitHub Gratuito"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/","title":"5. Integrar c\u00f3digo JavaScript en HTML","text":"<p>Integrar c\u00f3digo JavaScript en un documento HTML es una pr\u00e1ctica fundamental en el desarrollo web. JavaScript se utiliza para hacer que las p\u00e1ginas web sean interactivas y din\u00e1micas. A continuaci\u00f3n, se detalla c\u00f3mo se puede integrar JavaScript en HTML, abordando los m\u00e9todos m\u00e1s comunes y sus particularidades.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#formas-de-integrar-codigo-javascript","title":"Formas de integrar c\u00f3digo JavaScript","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#1-codigo-javascript-en-linea","title":"1. C\u00f3digo JavaScript en L\u00ednea","text":"<p>Puedes incluir c\u00f3digo JavaScript directamente dentro de una etiqueta HTML usando el atributo <code>onclick</code>, <code>onmouseover</code>, o cualquier otro evento. Este m\u00e9todo se utiliza para peque\u00f1os fragmentos de c\u00f3digo o para manejar eventos espec\u00edficos.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;JavaScript en L\u00ednea&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button onclick=\"alert('\u00a1Hola, mundo!')\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En este ejemplo, el c\u00f3digo JavaScript <code>alert('\u00a1Hola, mundo!')</code> se ejecutar\u00e1 cuando el usuario haga clic en el bot\u00f3n.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#2-codigo-javascript-interno","title":"2. C\u00f3digo JavaScript Interno","text":"<p>Para incluir JavaScript directamente en el archivo HTML pero en una secci\u00f3n separada, utiliza la etiqueta <code>&lt;script&gt;</code> en la secci\u00f3n <code>&lt;head&gt;</code> o al final del <code>&lt;body&gt;</code>. Este m\u00e9todo es \u00fatil para scripts que son espec\u00edficos de una sola p\u00e1gina.</p> <p>Ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;JavaScript Interno&lt;/title&gt;\n    &lt;script&gt;\n        function saludar() {\n            alert('\u00a1Hola, mundo!');\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button onclick=\"saludar()\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En este caso, el script definido dentro de la etiqueta <code>&lt;script&gt;</code> puede ser llamado desde el HTML. Este enfoque permite que el c\u00f3digo JavaScript sea m\u00e1s organizado y reutilizable dentro de la misma p\u00e1gina.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#3-codigo-javascript-externo","title":"3. C\u00f3digo JavaScript Externo","text":"<p>Para proyectos m\u00e1s grandes y para mantener el c\u00f3digo HTML m\u00e1s limpio, es recomendable usar archivos JavaScript externos. El c\u00f3digo JavaScript se coloca en un archivo separado con extensi\u00f3n <code>.js</code>, que luego se enlaza en el HTML usando la etiqueta <code>&lt;script&gt;</code> con el atributo <code>src</code>.</p> <p>Ejemplo de archivo HTML (<code>index.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;JavaScript Externo&lt;/title&gt;\n    &lt;script src=\"script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"myButton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ejemplo de archivo JavaScript (<code>script.js</code>):</p> <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n    document.getElementById('myButton').addEventListener('click', () =&gt; {\n        alert('\u00a1Hola, mundo!');\n    });\n});\n</code></pre> <p>En este ejemplo, el archivo <code>script.js</code> contiene el c\u00f3digo JavaScript, y se enlaza a trav\u00e9s del atributo <code>src</code> en la etiqueta <code>&lt;script&gt;</code>. El atributo <code>defer</code> asegura que el script se ejecute solo despu\u00e9s de que el documento HTML se haya cargado completamente.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#4-buenas-practicas","title":"4. Buenas Pr\u00e1cticas","text":"<ul> <li>Separaci\u00f3n de Responsabilidades: Mant\u00e9n el c\u00f3digo JavaScript en archivos separados para facilitar la organizaci\u00f3n y mantenimiento.</li> <li>Carga Diferida (<code>defer</code> y <code>async</code>): Utiliza los atributos <code>defer</code> o <code>async</code> en la etiqueta <code>&lt;script&gt;</code> para controlar la carga y ejecuci\u00f3n del JavaScript sin bloquear la carga de la p\u00e1gina.</li> <li><code>defer</code>: El script se ejecuta en el orden en que aparece en el HTML despu\u00e9s de que el documento se haya cargado.</li> <li><code>async</code>: El script se descarga en paralelo con el HTML y se ejecuta tan pronto como est\u00e9 disponible.</li> <li>Evita el JavaScript en L\u00ednea: Para proyectos m\u00e1s grandes, es preferible evitar el JavaScript en l\u00ednea por razones de seguridad y mantenimiento.</li> </ul> <p>Integrar JavaScript en HTML puede mejorar significativamente la interactividad y funcionalidad de una p\u00e1gina web. Utilizar estos m\u00e9todos y buenas pr\u00e1cticas ayudar\u00e1 a mantener tu c\u00f3digo organizado y eficiente.</p> <p>Claro, aqu\u00ed tienes un ejemplo de c\u00f3mo usar los atributos <code>async</code> y <code>defer</code> en la etiqueta <code>&lt;script&gt;</code> para controlar la carga y ejecuci\u00f3n de scripts en un documento HTML:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#defer-y-async","title":"Defer y Async","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#1-uso-de-defer","title":"1. Uso de <code>defer</code>","text":"<p>El atributo <code>defer</code> se utiliza para garantizar que el script se ejecute en el orden en que aparece en el HTML, pero solo despu\u00e9s de que el documento HTML haya sido completamente cargado. Esto es \u00fatil para scripts que necesitan interactuar con el DOM.</p> <p>Ejemplo con <code>defer</code>:</p> <p>Archivo HTML (<code>index.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Uso de defer&lt;/title&gt;\n    &lt;!-- Cargar el script con defer --&gt;\n    &lt;script src=\"deferred-script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hola Mundo&lt;/h1&gt;\n    &lt;button id=\"deferButton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Archivo JavaScript (<code>deferred-script.js</code>):</p> <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n    document.getElementById('deferButton').addEventListener('click', () =&gt; {\n        alert('\u00a1Bot\u00f3n con defer clicado!');\n    });\n});\n</code></pre> <p>En este ejemplo, el script <code>deferred-script.js</code> se cargar\u00e1 en el orden en que aparece en el HTML, pero solo despu\u00e9s de que el documento se haya cargado completamente. Esto asegura que el bot\u00f3n exista en el DOM antes de que el script intente a\u00f1adir un manejador de eventos.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#2-uso-de-async","title":"2. Uso de <code>async</code>","text":"<p>El atributo <code>async</code> se utiliza para cargar el script en paralelo con la carga del HTML y ejecutarlo tan pronto como est\u00e9 disponible. Esto es \u00fatil para scripts que no dependen del DOM o de otros scripts y pueden ejecutarse de forma independiente.</p> <p>Ejemplo con <code>async</code>:</p> <p>*Archivo HTML (<code>index.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Uso de async&lt;/title&gt;\n    &lt;!-- Cargar el script con async --&gt;\n    &lt;script src=\"async-script.js\" async&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hola Mundo&lt;/h1&gt;\n    &lt;button id=\"asyncButton\"&gt;Haz clic en m\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Archivo JavaScript (<code>async-script.js</code>):</p> <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n    // Este script se ejecutar\u00e1 tan pronto como est\u00e9 disponible\n    alert('\u00a1Script con async ejecutado!');\n});\n</code></pre> <p>En este caso, el script <code>async-script.js</code> se cargar\u00e1 de forma as\u00edncrona y se ejecutar\u00e1 tan pronto como est\u00e9 disponible, sin esperar a que el documento se haya cargado completamente. Esto puede ser adecuado para scripts que no afectan a la estructura del DOM o que no dependen de otros scripts.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/5integrarcodigojsenhtml/#comparacion-de-async-y-defer","title":"Comparaci\u00f3n de <code>async</code> y <code>defer</code>","text":"Atributo Caracter\u00edsticas Uso Ideal <code>defer</code> - Carga el script en paralelo con el HTML.- Ejecuta el script en el orden en que aparece en el HTML despu\u00e9s de que el documento se haya cargado completamente. Ideal para scripts que interact\u00faan con el DOM. <code>async</code> - Carga el script en paralelo con el HTML.- Ejecuta el script tan pronto como est\u00e9 disponible, sin esperar a que el HTML se haya cargado completamente. Ideal para scripts independientes que no dependen del DOM ni de otros scripts. <p>Utilizar <code>defer</code> y <code>async</code> correctamente puede ayudar a optimizar la carga de tu p\u00e1gina web y mejorar la experiencia del usuario al garantizar que los scripts no bloqueen el renderizado de la p\u00e1gina.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/","title":"Recursos y Preguntas Frecuentes","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#recursos","title":"Recursos","text":"<p>A continuaci\u00f3n, te dejo una lista de recursos \u00fatiles para profundizar en los temas clave de este m\u00f3dulo:</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#entornos-y-herramientas-de-desarrollo-de-codigo-en-el-cliente-web","title":"Entornos y herramientas de desarrollo de c\u00f3digo en el cliente web","text":"<ul> <li>Visual Studio Code: Uno de los entornos de desarrollo m\u00e1s utilizados para trabajar con JavaScript y HTML.</li> <li>CodePen: Plataforma para probar c\u00f3digo en HTML, CSS y JavaScript en tiempo real.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#preguntas-frecuentes-faq","title":"Preguntas Frecuentes (FAQ)","text":""},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#1-que-es-un-mecanismo-de-ejecucion-de-codigo-en-un-navegador-web","title":"1. \u00bfQu\u00e9 es un mecanismo de ejecuci\u00f3n de c\u00f3digo en un navegador web?","text":"<p>El mecanismo de ejecuci\u00f3n de c\u00f3digo se refiere a c\u00f3mo los navegadores interpretan y ejecutan el c\u00f3digo, como JavaScript, para crear interactividad en una p\u00e1gina web. Esto incluye el proceso de descarga, an\u00e1lisis y ejecuci\u00f3n de scripts.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#2-cuales-son-las-limitaciones-de-ejecutar-codigo-en-el-navegador","title":"2. \u00bfCu\u00e1les son las limitaciones de ejecutar c\u00f3digo en el navegador?","text":"<p>El c\u00f3digo que se ejecuta en el navegador est\u00e1 limitado por el entorno del cliente, es decir, depende del rendimiento del dispositivo del usuario y de la compatibilidad del navegador. No puede acceder directamente a los recursos del sistema operativo por razones de seguridad.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#3-que-lenguajes-de-programacion-se-utilizan-comunmente-en-el-entorno-cliente","title":"3. \u00bfQu\u00e9 lenguajes de programaci\u00f3n se utilizan com\u00fanmente en el entorno cliente?","text":"<p>JavaScript es el lenguaje m\u00e1s com\u00fanmente utilizado en el lado del cliente. Adem\u00e1s, tecnolog\u00edas como HTML y CSS son fundamentales para el desarrollo web en el cliente, ya que definen la estructura y el estilo del contenido.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#4-cual-es-la-diferencia-entre-un-script-en-linea-y-un-script-externo","title":"4. \u00bfCu\u00e1l es la diferencia entre un script en l\u00ednea y un script externo?","text":"<ul> <li>Un script en l\u00ednea es el c\u00f3digo JavaScript que se incluye directamente en el archivo HTML mediante la etiqueta <code>&lt;script&gt;</code>.</li> <li>Un script externo se aloja en un archivo separado con la extensi\u00f3n <code>.js</code> y se referencia en el HTML con <code>&lt;script src=\"archivo.js\"&gt;&lt;/script&gt;</code>.</li> </ul>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#5-que-ventajas-tiene-utilizar-frameworks-como-react-o-angular","title":"5. \u00bfQu\u00e9 ventajas tiene utilizar frameworks como React o Angular?","text":"<p>Los frameworks de JavaScript como React y Angular simplifican el desarrollo de aplicaciones web complejas. Ofrecen herramientas y bibliotecas que facilitan la creaci\u00f3n de componentes reutilizables, optimizan el rendimiento y mejoran la organizaci\u00f3n del c\u00f3digo.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#6-cuales-son-los-entornos-de-desarrollo-mas-recomendados-para-trabajar-en-el-cliente-web","title":"6. \u00bfCu\u00e1les son los entornos de desarrollo m\u00e1s recomendados para trabajar en el cliente web?","text":"<p>Algunas de las mejores herramientas para el desarrollo en el cliente web son Visual Studio Code (un editor de c\u00f3digo potente y con muchas extensiones) y CodePen (una plataforma en l\u00ednea para experimentar con HTML, CSS y JavaScript).</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#7-que-es-la-etiqueta-defer-y-como-se-utiliza-en-los-scripts","title":"7. \u00bfQu\u00e9 es la etiqueta <code>defer</code> y c\u00f3mo se utiliza en los scripts?","text":"<p>La etiqueta <code>defer</code> permite que el navegador descargue el script mientras contin\u00faa procesando el HTML. El script se ejecuta solo despu\u00e9s de que el documento HTML est\u00e9 completamente cargado. Esto es \u00fatil cuando tu script depende del contenido HTML.</p> <pre><code>&lt;script src=\"script.js\" defer&gt;&lt;/script&gt;\n</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#8-cuando-deberia-usar-async-en-lugar-de-defer","title":"8. \u00bfCu\u00e1ndo deber\u00eda usar <code>async</code> en lugar de <code>defer</code>?","text":"<p><code>async</code> es \u00fatil cuando el script no depende del DOM ni de otros scripts. Con <code>async</code>, el script se ejecuta tan pronto como est\u00e9 disponible, sin esperar a que el HTML termine de cargarse.</p> <pre><code>&lt;script src=\"script.js\" async&gt;&lt;/script&gt;\n</code></pre>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#9-como-elegir-la-arquitectura-adecuada-para-mi-proyecto","title":"9. \u00bfC\u00f3mo elegir la arquitectura adecuada para mi proyecto?","text":"<p>La elecci\u00f3n de la arquitectura depende del tama\u00f1o y los requisitos del proyecto. Por ejemplo, una arquitectura monol\u00edtica puede ser suficiente para una aplicaci\u00f3n peque\u00f1a, pero si el proyecto crece, podr\u00eda ser mejor adoptar una arquitectura de microservicios para facilitar el mantenimiento y la escalabilidad.</p>"},{"location":"ut1-seleccionarquitecturasyherramientasprogramacion/6recursosyfaq/#10-que-herramientas-son-recomendables-para-probar-codigo-en-el-cliente","title":"10. \u00bfQu\u00e9 herramientas son recomendables para probar c\u00f3digo en el cliente?","text":"<p>Herramientas como Chrome DevTools, Firefox Developer Tools y plataformas como CodePen son muy \u00fatiles para depurar y probar tu c\u00f3digo JavaScript en tiempo real.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/","title":"Index","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#recursos-y-faq-de-javascript-todo-lo-que-necesitas-saber","title":"Recursos y FAQ de JavaScript: \u00a1Todo lo que Necesitas Saber! \ud83d\ude80\ud83d\udcda","text":"<p>Bienvenido a tu gu\u00eda definitiva de Recursos y Preguntas Frecuentes sobre JavaScript. Aqu\u00ed encontrar\u00e1s desde las mejores herramientas para aprender hasta respuestas a las dudas m\u00e1s comunes. Adem\u00e1s, te ense\u00f1aremos c\u00f3mo ejecutar un script de JavaScript usando Node.js, paso a paso, con diagramas interactivos y ejemplos de c\u00f3digo. \u00a1Vamos a sumergirnos en el fascinante mundo de JavaScript! \ud83c\udf10\u2728</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#recursos-imprescindibles-para-aprender-javascript","title":"\ud83d\udcda Recursos Imprescindibles para Aprender JavaScript","text":"<p>Para dominar JavaScript, necesitas los mejores recursos. Aqu\u00ed te comparto los m\u00e1s \u00fatiles y recomendados:</p> <ul> <li>MDN Web Docs: La referencia definitiva para JavaScript. Detalles sobre funciones, m\u00e9todos y buenas pr\u00e1cticas.</li> <li>JavaScript.info: Una gu\u00eda completa y did\u00e1ctica que va desde lo b\u00e1sico hasta conceptos avanzados.</li> <li>Eloquent JavaScript: Un libro interactivo y gratuito que te lleva a explorar JavaScript a profundidad con ejercicios pr\u00e1cticos.</li> <li>Codecademy y freeCodeCamp: Plataformas interactivas para aprender a programar JavaScript mientras escribes c\u00f3digo.</li> <li>Stack Overflow: Resuelve todas tus dudas viendo c\u00f3mo otros desarrolladores solucionan problemas similares.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#guia-para-ejecutar-un-script-de-javascript-con-nodejs","title":"\ud83d\udcbb Gu\u00eda para Ejecutar un Script de JavaScript con Node.js","text":"<p>Node.js es la herramienta perfecta para ejecutar JavaScript en tu computadora fuera del navegador. Esto te permite desarrollar aplicaciones backend, automatizar procesos y probar scripts de manera sencilla. A continuaci\u00f3n, te explicamos c\u00f3mo hacerlo paso a paso.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#paso-1-instalar-nodejs","title":"\ud83d\udee0\ufe0f Paso 1: Instalar Node.js","text":"<p>Primero, debes instalar Node.js en tu computadora. Dir\u00edgete al sitio oficial de Node.js y descarga la versi\u00f3n m\u00e1s reciente. Una vez instalada, verifica la instalaci\u00f3n con los siguientes comandos en tu terminal:</p> <pre><code>node -v  # Verifica la versi\u00f3n de Node.js\nnpm -v   # Verifica la versi\u00f3n de npm (Node Package Manager)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#paso-2-crear-tu-primer-script-en-javascript","title":"\ud83d\udcdc Paso 2: Crear tu Primer Script en JavaScript","text":"<p>Usa tu editor de c\u00f3digo favorito (como Visual Studio Code) y crea un archivo llamado <code>app.js</code>. Dentro de este archivo, escribe tu primer script de JavaScript, por ejemplo:</p> <pre><code>// app.js\nconsole.log(\"\u00a1Hola, Node.js! \ud83d\ude80\"); // Este mensaje se mostrar\u00e1 en la terminal\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#paso-3-ejecutar-tu-script-con-nodejs","title":"\u25b6\ufe0f Paso 3: Ejecutar tu Script con Node.js","text":"<p>Ahora, abre tu terminal, navega hasta la carpeta donde guardaste <code>app.js</code> y escribe el siguiente comando:</p> <pre><code>node app.js\n</code></pre> <p>Si todo ha ido bien, ver\u00e1s el mensaje <code>\u00a1Hola, Node.js! \ud83d\ude80</code> aparecer en tu terminal. \u00a1Felicidades, acabas de ejecutar tu primer script con Node.js! \ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#diagrama-de-ejecucion-con-mermaid","title":"\ud83d\udcca Diagrama de Ejecuci\u00f3n con Mermaid","text":"<pre><code>graph TD\n    A[Crear archivo app.js] --&gt; B[Escribir c\u00f3digo JavaScript]\n    B --&gt; C[Abrir terminal]\n    C --&gt; D{Ejecutar comando: node app.js}\n    D --&gt; E[Mostrar resultado en terminal]\n    E --&gt; F[\u00a1Felicidades! \ud83c\udf89]</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#preguntas-frecuentes-sobre-javascript","title":"\u2753 Preguntas Frecuentes sobre JavaScript","text":"<p>1. \u00bfQu\u00e9 es JavaScript? JavaScript es un lenguaje de programaci\u00f3n utilizado principalmente para crear p\u00e1ginas web din\u00e1micas e interactivas. Adem\u00e1s, gracias a Node.js, tambi\u00e9n se puede usar en el servidor para desarrollo backend.</p> <p>2. \u00bfPara qu\u00e9 sirve Node.js? Node.js permite ejecutar JavaScript en el servidor, lo cual es ideal para crear aplicaciones web r\u00e1pidas, APIs, y realizar tareas automatizadas.</p> <p>3. \u00bfCu\u00e1l es la diferencia entre <code>let</code>, <code>const</code> y <code>var</code>?</p> <ul> <li><code>let</code>: Permite declarar variables que pueden cambiar de valor y tiene un alcance de bloque.</li> <li><code>const</code>: Declara variables cuyo valor no puede cambiar una vez asignado.</li> <li><code>var</code>: Similar a <code>let</code>, pero tiene un alcance global o de funci\u00f3n, lo que puede causar problemas de \u00e1mbito.</li> </ul> <p>4. \u00bfQu\u00e9 es una Promesa en JavaScript? Una Promesa es un objeto que representa la eventual finalizaci\u00f3n o falla de una operaci\u00f3n as\u00edncrona. Es ideal para manejar tareas como llamadas a APIs y otras operaciones que toman tiempo.</p> <p>5. \u00bfC\u00f3mo manejo errores en JavaScript? Utiliza <code>try...catch</code> para capturar y manejar errores en tu c\u00f3digo:</p> <pre><code>try {\n  // C\u00f3digo que puede fallar\n  let resultado = 10 / 0;\n  console.log(resultado);\n} catch (error) {\n  console.error(\"\u00a1Ups! Algo sali\u00f3 mal: \", error);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/#consejos-y-buenas-practicas","title":"\ud83c\udf1f Consejos y Buenas Pr\u00e1cticas","text":"<ul> <li>Escribe c\u00f3digo limpio y comentado: Facilita la lectura y mantenimiento del c\u00f3digo.</li> <li>Practica a diario: La pr\u00e1ctica constante es clave para dominar JavaScript.</li> <li>Explora y comparte c\u00f3digo: Revisar el c\u00f3digo de otros y colaborar con la comunidad es una excelente forma de aprender.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/","title":"Clases y Objetos en JavaScript","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#que-son-las-clases-en-javascript","title":"\ud83e\uddd1\u200d\ud83d\udcbb \u00bfQu\u00e9 son las Clases en JavaScript?","text":"<p>Las clases en JavaScript son plantillas para crear objetos que encapsulan datos y comportamientos. Introducidas en ECMAScript 6 (ES6), las clases hacen que la programaci\u00f3n orientada a objetos sea m\u00e1s intuitiva y f\u00e1cil de implementar.</p> <pre><code>// Definici\u00f3n de una clase simple\nclass Persona {\n    constructor(nombre, edad) {\n        this.nombre = nombre;\n        this.edad = edad;\n    }\n\n    // M\u00e9todo de la clase\n    saludar() {\n        console.log(`\u00a1Hola! Me llamo ${this.nombre} y tengo ${this.edad} a\u00f1os.`);\n    }\n}\n\n// Crear un objeto (instancia) de la clase\nconst persona1 = new Persona('Carlos', 30);\npersona1.saludar(); // Output: \u00a1Hola! Me llamo Carlos y tengo 30 a\u00f1os.\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#componentes-de-una-clase","title":"\ud83c\udfd7\ufe0f Componentes de una Clase","text":"<ol> <li> <p>Constructor: Es un m\u00e9todo especial para inicializar los objetos creados con la clase. Se ejecuta autom\u00e1ticamente al crear una nueva instancia.</p> <pre><code>class Animal {\n    constructor(nombre) {\n        this.nombre = nombre; // Propiedad del objeto\n    }\n}\n\nconst perro = new Animal('Rex');\nconsole.log(perro.nombre); // Output: Rex\n</code></pre> </li> <li> <p>Propiedades: Son las variables definidas dentro de la clase y se asignan dentro del constructor.</p> </li> <li> <p>M\u00e9todos: Son funciones asociadas a los objetos creados por la clase. Pueden realizar acciones o manipular las propiedades del objeto.</p> <pre><code>class Coche {\n    constructor(marca, modelo) {\n        this.marca = marca;\n        this.modelo = modelo;\n    }\n\n    detalles() {\n        return `Este coche es un ${this.marca} ${this.modelo}.`;\n    }\n}\n\nconst miCoche = new Coche('Toyota', 'Corolla');\nconsole.log(miCoche.detalles()); // Output: Este coche es un Toyota Corolla.\n</code></pre> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#objetos-en-javascript","title":"\ud83e\udde9 Objetos en JavaScript","text":"<p>Los objetos son instancias de las clases, representando entidades del mundo real con propiedades (atributos) y m\u00e9todos (funcionalidades).</p> <pre><code>// Definici\u00f3n de un objeto usando una clase\nconst gato = new Animal('Miau');\nconsole.log(gato.nombre); // Output: Miau\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#herencia-en-clases","title":"\ud83d\udcda Herencia en Clases","text":"<p>La herencia permite crear nuevas clases basadas en clases existentes, reutilizando c\u00f3digo y agregando nuevas funcionalidades. Para ello, se utiliza la palabra clave <code>extends</code>.</p> <pre><code>// Clase base\nclass Vehiculo {\n    constructor(marca) {\n        this.marca = marca;\n    }\n\n    mostrarMarca() {\n        console.log(`Veh\u00edculo de marca: ${this.marca}`);\n    }\n}\n\n// Clase derivada\nclass Moto extends Vehiculo {\n    constructor(marca, tipo) {\n        super(marca); // Llama al constructor de la clase padre\n        this.tipo = tipo;\n    }\n\n    mostrarTipo() {\n        console.log(`Esta moto es de tipo: ${this.tipo}`);\n    }\n}\n\nconst miMoto = new Moto('Honda', 'Deportiva');\nmiMoto.mostrarMarca(); // Output: Veh\u00edculo de marca: Honda\nmiMoto.mostrarTipo(); // Output: Esta moto es de tipo: Deportiva\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#encapsulamiento-y-metodos-privados","title":"\ud83d\udee0\ufe0f Encapsulamiento y M\u00e9todos Privados","text":"<p>El encapsulamiento permite controlar el acceso a los datos de un objeto. En JavaScript, se puede utilizar el s\u00edmbolo <code>#</code> para definir propiedades y m\u00e9todos privados.</p> <pre><code>class CuentaBancaria {\n    #saldo = 0; // Propiedad privada\n\n    depositar(cantidad) {\n        this.#saldo += cantidad;\n        console.log(`Dep\u00f3sito exitoso. Saldo actual: ${this.#saldo}`);\n    }\n\n    retirar(cantidad) {\n        if (cantidad &lt;= this.#saldo) {\n            this.#saldo -= cantidad;\n            console.log(`Retiro exitoso. Saldo actual: ${this.#saldo}`);\n        } else {\n            console.log('Saldo insuficiente.');\n        }\n    }\n}\n\nconst miCuenta = new CuentaBancaria();\nmiCuenta.depositar(100); // Output: Dep\u00f3sito exitoso. Saldo actual: 100\nmiCuenta.retirar(50);    // Output: Retiro exitoso. Saldo actual: 50\n// miCuenta.#saldo;       // Error: No se puede acceder a una propiedad privada\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/10clases/#polimorfismo-flexibilidad-en-la-orientacion-a-objetos","title":"\ud83c\udfa8 Polimorfismo: Flexibilidad en la Orientaci\u00f3n a Objetos","text":"<p>El polimorfismo permite que las clases hijas redefinan m\u00e9todos de la clase padre. Esto hace que el comportamiento de los m\u00e9todos cambie dependiendo del objeto que los invoque.</p> <pre><code>class Animal {\n    hacerSonido() {\n        console.log('El animal hace un sonido.');\n    }\n}\n\nclass Perro extends Animal {\n    hacerSonido() {\n        console.log('El perro ladra: \u00a1Guau!');\n    }\n}\n\nconst animal = new Animal();\nconst perro = new Perro();\n\nanimal.hacerSonido(); // Output: El animal hace un sonido.\nperro.hacerSonido();  // Output: El perro ladra: \u00a1Guau!\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/","title":"Recursos y FAQ de JavaScript: \u00a1Todo lo que Necesitas Saber! \ud83d\ude80\ud83d\udcda","text":"<p>Bienvenido a tu gu\u00eda definitiva de Recursos y Preguntas Frecuentes sobre JavaScript. Aqu\u00ed encontrar\u00e1s desde las mejores herramientas para aprender hasta respuestas a las dudas m\u00e1s comunes. Adem\u00e1s, te ense\u00f1aremos c\u00f3mo ejecutar un script de JavaScript usando Node.js, paso a paso, con diagramas interactivos y ejemplos de c\u00f3digo. \u00a1Vamos a sumergirnos en el fascinante mundo de JavaScript! \ud83c\udf10\u2728</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#recursos-imprescindibles-para-aprender-javascript","title":"\ud83d\udcda Recursos Imprescindibles para Aprender JavaScript","text":"<p>Para dominar JavaScript, necesitas los mejores recursos. Aqu\u00ed te comparto los m\u00e1s \u00fatiles y recomendados:</p> <ul> <li>MDN Web Docs: La referencia definitiva para JavaScript. Detalles sobre funciones, m\u00e9todos y buenas pr\u00e1cticas.</li> <li>JavaScript.info: Una gu\u00eda completa y did\u00e1ctica que va desde lo b\u00e1sico hasta conceptos avanzados.</li> <li>Eloquent JavaScript: Un libro interactivo y gratuito que te lleva a explorar JavaScript a profundidad con ejercicios pr\u00e1cticos.</li> <li>Codecademy y freeCodeCamp: Plataformas interactivas para aprender a programar JavaScript mientras escribes c\u00f3digo.</li> <li>Stack Overflow: Resuelve todas tus dudas viendo c\u00f3mo otros desarrolladores solucionan problemas similares.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#guia-para-ejecutar-un-script-de-javascript-con-nodejs","title":"\ud83d\udcbb Gu\u00eda para Ejecutar un Script de JavaScript con Node.js","text":"<p>Node.js es la herramienta perfecta para ejecutar JavaScript en tu computadora fuera del navegador. Esto te permite desarrollar aplicaciones backend, automatizar procesos y probar scripts de manera sencilla. A continuaci\u00f3n, te explicamos c\u00f3mo hacerlo paso a paso.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#paso-1-instalar-nodejs","title":"\ud83d\udee0\ufe0f Paso 1: Instalar Node.js","text":"<p>Primero, debes instalar Node.js en tu computadora. Dir\u00edgete al sitio oficial de Node.js y descarga la versi\u00f3n m\u00e1s reciente. Una vez instalada, verifica la instalaci\u00f3n con los siguientes comandos en tu terminal:</p> <pre><code>node -v  # Verifica la versi\u00f3n de Node.js\nnpm -v   # Verifica la versi\u00f3n de npm (Node Package Manager)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#paso-2-crear-tu-primer-script-en-javascript","title":"\ud83d\udcdc Paso 2: Crear tu Primer Script en JavaScript","text":"<p>Usa tu editor de c\u00f3digo favorito (como Visual Studio Code) y crea un archivo llamado <code>app.js</code>. Dentro de este archivo, escribe tu primer script de JavaScript, por ejemplo:</p> <pre><code>// app.js\nconsole.log(\"\u00a1Hola, Node.js! \ud83d\ude80\"); // Este mensaje se mostrar\u00e1 en la terminal\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#paso-3-ejecutar-tu-script-con-nodejs","title":"\u25b6\ufe0f Paso 3: Ejecutar tu Script con Node.js","text":"<p>Ahora, abre tu terminal, navega hasta la carpeta donde guardaste <code>app.js</code> y escribe el siguiente comando:</p> <pre><code>node app.js\n</code></pre> <p>Si todo ha ido bien, ver\u00e1s el mensaje <code>\u00a1Hola, Node.js! \ud83d\ude80</code> aparecer en tu terminal. \u00a1Felicidades, acabas de ejecutar tu primer script con Node.js! \ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#diagrama-de-ejecucion-con-mermaid","title":"\ud83d\udcca Diagrama de Ejecuci\u00f3n con Mermaid","text":"<pre><code>graph TD\n    A[Crear archivo app.js] --&gt; B[Escribir c\u00f3digo JavaScript]\n    B --&gt; C[Abrir terminal]\n    C --&gt; D{Ejecutar comando: node app.js}\n    D --&gt; E[Mostrar resultado en terminal]\n    E --&gt; F[\u00a1Felicidades! \ud83c\udf89]</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#guia-para-leer-variables-por-consola-en-javascript","title":"\ud83d\udce5 Gu\u00eda para Leer Variables por Consola en JavaScript","text":"<p>Cuando trabajamos con JavaScript en entornos de l\u00ednea de comandos, es com\u00fan necesitar capturar entradas del usuario. Para esto, podemos usar la librer\u00eda <code>readline-sync</code>, que permite interactuar f\u00e1cilmente con el usuario desde la consola.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#instalacion-de-readline-sync","title":"\ud83d\udee0\ufe0f Instalaci\u00f3n de <code>readline-sync</code>","text":"<p>Antes de comenzar, es necesario instalar la librer\u00eda usando npm:</p> <pre><code>npm install readline-sync\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#ejemplo-de-uso-de-readline-sync","title":"\ud83d\ude80 Ejemplo de Uso de <code>readline-sync</code>","text":"<p>A continuaci\u00f3n, te muestro un ejemplo b\u00e1sico de c\u00f3mo usar <code>readline-sync</code> para capturar la entrada del usuario:</p> <pre><code>// Importamos la librer\u00eda readline-sync\nvar readlineSync = require('readline-sync');\n\n// Esperamos la respuesta del usuario.\nvar userName = readlineSync.question('\u00bfPuedo conocer tu nombre? ');\nconsole.log('Hi ' + userName + '!');\n\n// Manejo de texto secreto (por ejemplo, contrase\u00f1as).\nvar favFood = readlineSync.question('\u00bfCu\u00e1l es tu comida favorita? ', {\n    hideEchoBack: true // El texto introducido se oculta en pantalla.\n});\nconsole.log('\u00a1A ' + userName + ' le gusta ' + favFood + '!');\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#explicacion-del-codigo","title":"\ud83d\udcd6 Explicaci\u00f3n del C\u00f3digo","text":"<ol> <li>Instalaci\u00f3n: <code>readline-sync</code> se instala ejecutando el comando <code>npm install readline-sync</code>.</li> <li>Importaci\u00f3n de la Librer\u00eda: Utilizamos <code>require('readline-sync')</code> para importar la librer\u00eda y poder usar sus funcionalidades.</li> <li>Captura de Datos: </li> <li><code>question()</code> se usa para mostrar un mensaje y capturar la respuesta del usuario.</li> <li>En el ejemplo, pedimos el nombre del usuario y lo saludamos.</li> <li>Entrada Oculta:</li> <li>La opci\u00f3n <code>{ hideEchoBack: true }</code> se usa para ocultar lo que escribe el usuario, \u00fatil para contrase\u00f1as o informaci\u00f3n sensible.</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#aplicaciones-comunes","title":"\ud83d\udd27 Aplicaciones Comunes","text":"<ul> <li>Captura de Datos en Aplicaciones CLI: Ideal para aplicaciones de l\u00ednea de comandos que requieren interacci\u00f3n del usuario.</li> <li>Formularios y Encuestas Simples: Se puede usar para crear formularios simples y recopilar datos sin una interfaz gr\u00e1fica.</li> <li>Prototipos y Pruebas R\u00e1pidas: \u00datil para prototipar r\u00e1pidamente funciones que requieren entrada del usuario.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#preguntas-frecuentes-sobre-javascript","title":"\u2753 Preguntas Frecuentes sobre JavaScript","text":"<p>1. \u00bfQu\u00e9 es JavaScript? JavaScript es un lenguaje de programaci\u00f3n utilizado principalmente para crear p\u00e1ginas web din\u00e1micas e interactivas. Adem\u00e1s, gracias a Node.js, tambi\u00e9n se puede usar en el servidor para desarrollo backend.</p> <p>2. \u00bfPara qu\u00e9 sirve Node.js? Node.js permite ejecutar JavaScript en el servidor, lo cual es ideal para crear aplicaciones web r\u00e1pidas, APIs, y realizar tareas automatizadas.</p> <p>3. \u00bfCu\u00e1l es la diferencia entre <code>let</code>, <code>const</code> y <code>var</code>?</p> <ul> <li><code>let</code>: Permite declarar variables que pueden cambiar de valor y tiene un alcance de bloque.</li> <li><code>const</code>: Declara variables cuyo valor no puede cambiar una vez asignado.</li> <li><code>var</code>: Similar a <code>let</code>, pero tiene un alcance global o de funci\u00f3n, lo que puede causar problemas de \u00e1mbito.</li> </ul> <p>4. \u00bfQu\u00e9 es una Promesa en JavaScript? Una Promesa es un objeto que representa la eventual finalizaci\u00f3n o falla de una operaci\u00f3n as\u00edncrona. Es ideal para manejar tareas como llamadas a APIs y otras operaciones que toman tiempo.</p> <p>5. \u00bfC\u00f3mo manejo errores en JavaScript? Utiliza <code>try...catch</code> para capturar y manejar errores en tu c\u00f3digo:</p> <pre><code>try {\n  // C\u00f3digo que puede fallar\n  let resultado = 10 / 0;\n  console.log(resultado);\n} catch (error) {\n  console.error(\"\u00a1Ups! Algo sali\u00f3 mal: \", error);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/11recursosyfaq/#consejos-y-buenas-practicas","title":"\ud83c\udf1f Consejos y Buenas Pr\u00e1cticas","text":"<ul> <li>Escribe c\u00f3digo limpio y comentado: Facilita la lectura y mantenimiento del c\u00f3digo.</li> <li>Practica a diario: La pr\u00e1ctica constante es clave para dominar JavaScript.</li> <li>Explora y comparte c\u00f3digo: Revisar el c\u00f3digo de otros y colaborar con la comunidad es una excelente forma de aprender.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/","title":"\ud83c\udf1f Variables en JavaScript: Declaraci\u00f3n, Inicializaci\u00f3n y \u00c1mbito","text":"<p>Las variables son uno de los conceptos m\u00e1s fundamentales en cualquier lenguaje de programaci\u00f3n, \u00a1y JavaScript no es la excepci\u00f3n! Nos permiten almacenar datos que podemos usar y manipular a lo largo de nuestro c\u00f3digo. Vamos a explorar c\u00f3mo declarar, inicializar y trabajar con variables en JavaScript, adem\u00e1s de comprender los diferentes \u00e1mbitos. \u00a1Vamos all\u00e1! \ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#1-declaracion-de-variables","title":"1\ufe0f\u20e3 Declaraci\u00f3n de Variables","text":"<p>En JavaScript, hay tres formas principales de declarar variables: <code>var</code>, <code>let</code>, y <code>const</code>. Cada una tiene sus particularidades y es importante saber cu\u00e1ndo usar cada una.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#var","title":"\ud83d\udd39 <code>var</code>","text":"<p><code>var</code> es la forma m\u00e1s antigua de declarar variables en JavaScript. Antes de ES6, <code>var</code> era la \u00fanica forma de declarar variables, pero tiene algunos problemas con el \u00e1mbito que veremos m\u00e1s adelante.</p> <p>Ejemplo de Declaraci\u00f3n con <code>var</code>:</p> <pre><code>var nombre = \"Juan\";\nconsole.log(nombre); // Output: Juan\n</code></pre> <ul> <li>\u00bfCu\u00e1ndo usar <code>var</code>?: Actualmente, se recomienda evitar <code>var</code> debido a problemas de \u00e1mbito y hoisting (m\u00e1s sobre esto despu\u00e9s). \u00a1Mejor usa <code>let</code> o <code>const</code>! \ud83d\udeab</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#let","title":"\ud83d\udd39 <code>let</code>","text":"<p><code>let</code> es la forma moderna y recomendada para declarar variables que pueden cambiar su valor.</p> <p>Ejemplo de Declaraci\u00f3n con <code>let</code>:</p> <pre><code>let edad = 25;\nedad = 26; // Cambiamos el valor\nconsole.log(edad); // Output: 26\n</code></pre> <ul> <li>\u00bfCu\u00e1ndo usar <code>let</code>?: Usa <code>let</code> cuando necesitas que una variable cambie su valor a lo largo del tiempo.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#const","title":"\ud83d\udd39 <code>const</code>","text":"<p><code>const</code> se utiliza para declarar variables cuyo valor no cambiar\u00e1. Es perfecta para valores que sabes que permanecer\u00e1n constantes, como configuraciones, nombres que no cambian, o referencias a objetos.</p> <p>Ejemplo de Declaraci\u00f3n con <code>const</code>:</p> <pre><code>const PI = 3.14;\nconsole.log(PI); // Output: 3.14\n\n// PI = 3.1416; // \u274c Error: No puedes reasignar una variable declarada con const\n</code></pre> <ul> <li>\u00bfCu\u00e1ndo usar <code>const</code>?: Usa <code>const</code> siempre que declares algo que no deber\u00eda cambiar su valor. Es una buena pr\u00e1ctica preferir <code>const</code> para hacer tu c\u00f3digo m\u00e1s seguro y claro.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#2-inicializacion-de-variables","title":"2\ufe0f\u20e3 Inicializaci\u00f3n de Variables","text":"<p>Inicializar una variable significa asignarle un valor en el momento de su declaraci\u00f3n. En JavaScript, puedes declarar una variable sin inicializarla, y luego asignarle un valor m\u00e1s adelante.</p> <p>Ejemplos de Declaraci\u00f3n e Inicializaci\u00f3n:</p> <pre><code>let nombre; // Declaraci\u00f3n sin inicializaci\u00f3n\nconsole.log(nombre); // Output: undefined\n\nnombre = \"Carlos\"; // Inicializaci\u00f3n\nconsole.log(nombre); // Output: Carlos\n</code></pre> <ul> <li>Nota: Si declaras una variable sin inicializarla, su valor ser\u00e1 <code>undefined</code>. \u00a1Aseg\u00farate de asignar un valor antes de usarla para evitar errores inesperados! \ud83d\uded1</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#3-ambito-scope-de-variables","title":"3\ufe0f\u20e3 \u00c1mbito (Scope) de Variables","text":"<p>El \u00e1mbito determina d\u00f3nde puede accederse a una variable en tu c\u00f3digo. Hay tres tipos principales de \u00e1mbito en JavaScript: global, local (funci\u00f3n) y bloque.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#ambito-global","title":"\ud83d\udd39 \u00c1mbito Global \ud83c\udf0d","text":"<p>Las variables declaradas fuera de cualquier funci\u00f3n o bloque tienen un \u00e1mbito global y pueden ser accedidas desde cualquier parte del c\u00f3digo.</p> <p>Ejemplo de \u00c1mbito Global:</p> <pre><code>let saludo = \"\u00a1Hola a todos!\"; // \u00c1mbito global\n\nfunction mostrarSaludo() {\n  console.log(saludo); // Puede acceder a 'saludo' porque es global\n}\n\nmostrarSaludo(); // Output: \u00a1Hola a todos!\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#ambito-local-funcion","title":"\ud83d\udd39 \u00c1mbito Local (Funci\u00f3n) \ud83d\udee0\ufe0f","text":"<p>Las variables declaradas dentro de una funci\u00f3n tienen un \u00e1mbito local y solo pueden ser accedidas dentro de esa funci\u00f3n.</p> <p>Ejemplo de \u00c1mbito Local:</p> <pre><code>function calcular() {\n  let resultado = 42; // \u00c1mbito local dentro de la funci\u00f3n\n  console.log(resultado); // Output: 42\n}\n\ncalcular();\n// console.log(resultado); // \u274c Error: 'resultado' no est\u00e1 definida fuera de la funci\u00f3n\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#ambito-de-bloque","title":"\ud83d\udd39 \u00c1mbito de Bloque \ud83d\udea7","text":"<p>Las variables declaradas con <code>let</code> y <code>const</code> dentro de un bloque (por ejemplo, dentro de <code>{}</code>) tienen un \u00e1mbito de bloque, lo que significa que solo son accesibles dentro de ese bloque.</p> <p>Ejemplo de \u00c1mbito de Bloque:</p> <pre><code>if (true) {\n  let mensaje = \"\u00a1Esto es un bloque!\";\n  console.log(mensaje); // Output: \u00a1Esto es un bloque!\n}\n\n// console.log(mensaje); // \u274c Error: 'mensaje' no est\u00e1 definido fuera del bloque\n</code></pre> <ul> <li>Importante: <code>var</code> no respeta el \u00e1mbito de bloque y puede llevar a comportamientos inesperados, por lo que es mejor usar <code>let</code> o <code>const</code>.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#resumen-de-ambitos","title":"\ud83d\udea6 Resumen de \u00c1mbitos","text":"<ul> <li>Global: Accesible desde cualquier parte del c\u00f3digo.</li> <li>Local (Funci\u00f3n): Solo accesible dentro de la funci\u00f3n en la que se declara.</li> <li>Bloque: Solo accesible dentro del bloque <code>{}</code> en el que se declara (con <code>let</code> y <code>const</code>).</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/1variables/#buenas-practicas-con-variables-en-javascript","title":"\ud83c\udf1f Buenas Pr\u00e1cticas con Variables en JavaScript","text":"<ol> <li>Usa <code>const</code> siempre que sea posible para definir valores constantes y evitar errores de reasignaci\u00f3n.</li> <li>Usa <code>let</code> cuando necesites reasignar un valor.</li> <li>Evita <code>var</code> para prevenir problemas de hoisting y \u00e1mbito no deseado.</li> <li>Nombra tus variables de manera descriptiva para hacer tu c\u00f3digo m\u00e1s legible y f\u00e1cil de entender.</li> <li>Mant\u00e9n las variables dentro del \u00e1mbito m\u00e1s peque\u00f1o posible para evitar efectos secundarios y mejorar la claridad del c\u00f3digo.</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/","title":"\ud83e\udde9 Tipos de Datos en JavaScript","text":"<p>En JavaScript, los tipos de datos son fundamentales para manejar y manipular la informaci\u00f3n. Conocerlos te ayudar\u00e1 a escribir c\u00f3digo m\u00e1s robusto y comprender mejor c\u00f3mo funcionan las variables en tu programa. JavaScript tiene tipos de datos primitivos y tipos de datos complejos. \u00a1Vamos a explorarlos! \ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#1-tipos-de-datos-primitivos","title":"1\ufe0f\u20e3 Tipos de Datos Primitivos","text":"<p>Los tipos de datos primitivos son los m\u00e1s b\u00e1sicos y no tienen m\u00e9todos ni propiedades. Estos incluyen:</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#string-cadenas-de-texto","title":"\ud83d\udd39 <code>string</code> (Cadenas de texto)","text":"<p>Las cadenas son secuencias de caracteres, y se definen entre comillas simples (<code>' '</code>) o dobles (<code>\" \"</code>).</p> <p>Ejemplo:</p> <pre><code>let nombre = \"JavaScript\"; // String\nconsole.log(nombre); // Output: JavaScript\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#number-numeros","title":"\ud83d\udd39 <code>number</code> (N\u00fameros)","text":"<p>En JavaScript, todos los n\u00fameros (enteros y decimales) son del mismo tipo: <code>number</code>.</p> <p>Ejemplo:</p> <pre><code>let edad = 30; // Entero\nlet precio = 19.99; // Decimal\nconsole.log(edad, precio); // Output: 30 19.99\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#boolean-booleanos","title":"\ud83d\udd39 <code>boolean</code> (Booleanos)","text":"<p>Un booleano solo puede tener dos valores: <code>true</code> (verdadero) o <code>false</code> (falso).</p> <p>Ejemplo:</p> <pre><code>let esMayor = true;\nlet esMenor = false;\nconsole.log(esMayor); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#undefined","title":"\ud83d\udd39 <code>undefined</code>","text":"<p>Una variable sin un valor asignado autom\u00e1ticamente tiene el tipo <code>undefined</code>.</p> <p>Ejemplo:</p> <pre><code>let sinDefinir;\nconsole.log(sinDefinir); // Output: undefined\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#null","title":"\ud83d\udd39 <code>null</code>","text":"<p><code>null</code> representa la ausencia intencionada de cualquier valor.</p> <p>Ejemplo:</p> <pre><code>let vacio = null;\nconsole.log(vacio); // Output: null\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#symbol-simbolos","title":"\ud83d\udd39 <code>symbol</code> (S\u00edmbolos)","text":"<p>Los <code>symbol</code> son valores \u00fanicos e inmutables, \u00fatiles para identificar propiedades de objetos.</p> <p>Ejemplo:</p> <pre><code>let simbolo1 = Symbol(\"miSimbolo\");\nconsole.log(simbolo1); // Output: Symbol(miSimbolo)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#bigint-numeros-grandes","title":"\ud83d\udd39 <code>bigint</code> (N\u00fameros Grandes)","text":"<p><code>bigint</code> permite manejar n\u00fameros enteros extremadamente grandes, m\u00e1s all\u00e1 del l\u00edmite de <code>number</code>.</p> <p>Ejemplo:</p> <pre><code>let numeroGrande = 1234567890123456789012345678901234567890n; // Usa 'n' al final\nconsole.log(numeroGrande); // Output: 1234567890123456789012345678901234567890n\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#2-tipos-de-datos-complejos-objetos","title":"2\ufe0f\u20e3 Tipos de Datos Complejos (Objetos)","text":"<p>Los objetos son colecciones de pares clave-valor y pueden contener m\u00faltiples tipos de datos, incluso otros objetos.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#object","title":"\ud83d\udd39 <code>Object</code>","text":"<p>Un objeto es una colecci\u00f3n de datos y funciones relacionadas.</p> <p>Ejemplo:</p> <pre><code>let persona = {\n  nombre: \"Ana\",\n  edad: 28,\n  esProgramador: true,\n};\n\nconsole.log(persona); // Output: { nombre: 'Ana', edad: 28, esProgramador: true }\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#array-arreglos","title":"\ud83d\udd39 <code>Array</code> (Arreglos)","text":"<p>Un array es un tipo especial de objeto que almacena valores en forma de lista ordenada.</p> <p>Ejemplo:</p> <pre><code>let colores = [\"rojo\", \"verde\", \"azul\"];\nconsole.log(colores); // Output: [ 'rojo', 'verde', 'azul' ]\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#date-fechas","title":"\ud83d\udd39 <code>Date</code> (Fechas)","text":"<p>El tipo <code>Date</code> en JavaScript se utiliza para manejar fechas y horas, permiti\u00e9ndote crear, manipular y formatear fechas f\u00e1cilmente. </p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#principales-operaciones-con-date","title":"Principales Operaciones con <code>Date</code>","text":"<ul> <li> <p>Crear una Fecha Actual     Para obtener la fecha y hora actuales, puedes usar el constructor <code>Date()</code> sin par\u00e1metros.</p> <pre><code>let fechaActual = new Date();\nconsole.log(fechaActual); // Output: fecha y hora actuales\n</code></pre> </li> <li> <p>Crear una Fecha Espec\u00edfica    Puedes crear una fecha espec\u00edfica pasando una cadena de texto o valores de a\u00f1o, mes, d\u00eda, etc.</p> </li> </ul> <pre><code>let fechaEspecifica = new Date('2023-09-27');\nconsole.log(fechaEspecifica); // Output: Wed Sep 27 2023\n</code></pre> <ul> <li>Obtener Partes de la Fecha    Usa m\u00e9todos como <code>getFullYear()</code>, <code>getMonth()</code>, <code>getDate()</code>, <code>getDay()</code> para extraer partes espec\u00edficas de la fecha.</li> </ul> <pre><code>let anio = fechaActual.getFullYear();\nlet mes = fechaActual.getMonth(); // Nota: Enero es 0\nlet dia = fechaActual.getDate();\nconsole.log(`A\u00f1o: ${anio}, Mes: ${mes + 1}, D\u00eda: ${dia}`); // Output: A\u00f1o, Mes y D\u00eda\n</code></pre> <ul> <li>Modificar Fechas    Puedes modificar una fecha usando m\u00e9todos <code>setFullYear()</code>, <code>setMonth()</code>, <code>setDate()</code>, entre otros.</li> </ul> <pre><code>fechaActual.setFullYear(2025);\nconsole.log(fechaActual); // Output: Nueva fecha con a\u00f1o modificado a 2025\n</code></pre> <ul> <li>Formatear Fechas    Usa <code>toLocaleDateString()</code> o <code>toISOString()</code> para mostrar fechas en formatos espec\u00edficos.</li> </ul> <pre><code>console.log(fechaActual.toLocaleDateString()); // Output: formato local de la fecha\nconsole.log(fechaActual.toISOString()); // Output: formato ISO 8601\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#conversion-de-tipos-de-datos","title":"\ud83d\udee0\ufe0f Conversi\u00f3n de Tipos de Datos","text":"<p>La conversi\u00f3n de tipos (type casting) es el proceso de cambiar un tipo de dato a otro. Esto es \u00fatil cuando necesitas manipular datos de diferentes formas en tu programa.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#1-conversion-de-numeros-a-cadenas-number-string","title":"1\ufe0f\u20e3 Conversi\u00f3n de N\u00fameros a Cadenas (<code>number</code> \u27a1\ufe0f <code>string</code>)","text":"<p>Para convertir un n\u00famero a una cadena, puedes usar <code>String()</code> o el m\u00e9todo <code>.toString()</code>.</p> <p>Ejemplo:</p> <pre><code>let numero = 123;\nlet cadenaNumero = String(numero); // Conversi\u00f3n usando String()\nlet cadenaNumero2 = numero.toString(); // Conversi\u00f3n usando .toString()\nconsole.log(cadenaNumero, cadenaNumero2); // Output: \"123\" \"123\"\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#2-conversion-de-cadenas-a-numeros-string-number","title":"2\ufe0f\u20e3 Conversi\u00f3n de Cadenas a N\u00fameros (<code>string</code> \u27a1\ufe0f <code>number</code>)","text":"<p>Para convertir una cadena a un n\u00famero, usa <code>Number()</code>, <code>parseInt()</code>, o <code>parseFloat()</code>.</p> <p>Ejemplo:</p> <pre><code>let cadena = \"456\";\nlet numeroEntero = Number(cadena); // Conversi\u00f3n a n\u00famero\nlet numeroEntero2 = parseInt(cadena); // Conversi\u00f3n a n\u00famero entero\nlet numeroDecimal = parseFloat(\"456.78\"); // Conversi\u00f3n a n\u00famero decimal\nconsole.log(numeroEntero, numeroEntero2, numeroDecimal); // Output: 456 456 456.78\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#3-conversion-a-booleanos-boolean","title":"3\ufe0f\u20e3 Conversi\u00f3n a Booleanos (<code>boolean</code>)","text":"<p>Puedes convertir otros tipos a <code>boolean</code> usando <code>Boolean()</code>.</p> <p>Ejemplo:</p> <pre><code>let valor = 1; // Cualquier n\u00famero distinto de 0 es true\nlet cadenaVacia = \"\"; // Cadenas vac\u00edas son false\nconsole.log(Boolean(valor)); // Output: true\nconsole.log(Boolean(cadenaVacia)); // Output: false\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#4-conversion-automatica-coercion-de-tipos","title":"4\ufe0f\u20e3 Conversi\u00f3n Autom\u00e1tica (Coerci\u00f3n de Tipos)","text":"<p>JavaScript a menudo convierte tipos autom\u00e1ticamente en segundo plano, \u00a1lo que puede llevar a algunos comportamientos inesperados! \u26a0\ufe0f</p> <p>Ejemplo:</p> <pre><code>console.log(\"5\" + 2); // Output: \"52\" (convierte 2 a string)\nconsole.log(\"5\" - 2); // Output: 3 (convierte \"5\" a n\u00famero)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/2tiposdedatosyconversiones/#buenas-practicas-al-trabajar-con-tipos-de-datos","title":"\ud83c\udf1f Buenas Pr\u00e1cticas al Trabajar con Tipos de Datos","text":"<ol> <li>Evita Coerciones Inesperadas: S\u00e9 expl\u00edcito con las conversiones para evitar errores.</li> <li>Usa <code>===</code> para Comparaciones Estrictas: Esto evita comparaciones con coerci\u00f3n de tipo, asegurando que tanto el tipo como el valor coincidan.</li> <li>Prefiere <code>Number()</code>, <code>String()</code> y <code>Boolean()</code> para conversiones claras y predecibles.</li> <li>Verifica Tipos con <code>typeof</code>: Usa <code>typeof</code> para asegurarte del tipo de una variable antes de manipularla.</li> </ol> <pre><code>let valor = \"123\";\nconsole.log(typeof valor); // Output: string\n</code></pre> <p>\u00a1Y eso es todo sobre los tipos de datos y la conversi\u00f3n de tipos en JavaScript! Ahora tienes el conocimiento para manipular y cambiar tipos de datos como un profesional. \u00a1Aseg\u00farate de usar estas herramientas sabiamente para evitar errores inesperados en tu c\u00f3digo! \ud83c\udfaf\u2728</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/","title":"\ud83d\udcdd Asignaciones en JavaScript","text":"<p>Las asignaciones son fundamentales en JavaScript; es como decirle a una variable cu\u00e1l es su valor. Pero, \u00a1JavaScript va m\u00e1s all\u00e1 de solo usar el signo igual <code>=</code>! Existen muchos operadores de asignaci\u00f3n que nos ayudan a trabajar con los valores de manera m\u00e1s eficiente. \u00a1Vamos a verlos todos! \ud83c\udfaf</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#1-asignacion-basica","title":"1\ufe0f\u20e3 Asignaci\u00f3n B\u00e1sica (<code>=</code>)","text":"<p>El operador de asignaci\u00f3n b\u00e1sica <code>=</code> se usa para asignar un valor a una variable. Es el operador de asignaci\u00f3n m\u00e1s sencillo y com\u00fan.</p> <p>Ejemplo:</p> <pre><code>let nombre = \"JavaScript\"; // Asigna la cadena \"JavaScript\" a la variable nombre\nlet numero = 42; // Asigna el n\u00famero 42 a la variable numero\nconsole.log(nombre); // Output: JavaScript\nconsole.log(numero); // Output: 42\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#2-asignacion-combinada-con-operadores-matematicos","title":"2\ufe0f\u20e3 Asignaci\u00f3n Combinada con Operadores Matem\u00e1ticos","text":"<p>En JavaScript, puedes combinar la asignaci\u00f3n con operadores matem\u00e1ticos para hacer el c\u00f3digo m\u00e1s compacto y legible. \u00a1Veamos algunos de los operadores m\u00e1s comunes!</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-suma","title":"\ud83d\udd39 Asignaci\u00f3n de Suma (<code>+=</code>)","text":"<p>Este operador suma un valor a la variable y asigna el resultado a esa misma variable.</p> <p>Ejemplo:</p> <pre><code>let x = 10;\nx += 5; // Es lo mismo que x = x + 5\nconsole.log(x); // Output: 15\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-resta-","title":"\ud83d\udd39 Asignaci\u00f3n de Resta (<code>-=</code>)","text":"<p>Este operador resta un valor a la variable y asigna el resultado.</p> <p>Ejemplo:</p> <pre><code>let y = 20;\ny -= 8; // Es lo mismo que y = y - 8\nconsole.log(y); // Output: 12\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-multiplicacion","title":"\ud83d\udd39 Asignaci\u00f3n de Multiplicaci\u00f3n (<code>*=</code>)","text":"<p>Multiplica la variable por un valor y asigna el resultado.</p> <p>Ejemplo:</p> <pre><code>let z = 7;\nz *= 3; // Es lo mismo que z = z * 3\nconsole.log(z); // Output: 21\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-division","title":"\ud83d\udd39 Asignaci\u00f3n de Divisi\u00f3n (<code>/=</code>)","text":"<p>Divide la variable por un valor y asigna el resultado.</p> <p>Ejemplo:</p> <pre><code>let a = 50;\na /= 10; // Es lo mismo que a = a / 10\nconsole.log(a); // Output: 5\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-modulo","title":"\ud83d\udd39 Asignaci\u00f3n de M\u00f3dulo (<code>%=</code>)","text":"<p>Calcula el resto de la divisi\u00f3n de la variable y un valor, y asigna el resultado.</p> <p>Ejemplo:</p> <pre><code>let b = 29;\nb %= 5; // Es lo mismo que b = b % 5\nconsole.log(b); // Output: 4\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-de-exponenciacion","title":"\ud83d\udd39 Asignaci\u00f3n de Exponenciaci\u00f3n (<code>**=</code>)","text":"<p>Eleva la variable a la potencia de un valor y asigna el resultado.</p> <p>Ejemplo:</p> <pre><code>let c = 4;\nc **= 2; // Es lo mismo que c = c ** 2 (4 elevado a la potencia 2)\nconsole.log(c); // Output: 16\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#3-asignacion-con-desestructuracion","title":"3\ufe0f\u20e3 Asignaci\u00f3n con Desestructuraci\u00f3n \u2728","text":"<p>La desestructuraci\u00f3n es una forma avanzada de asignar valores de arreglos o propiedades de objetos a variables de manera m\u00e1s compacta y legible. \u00a1Es una herramienta poderosa!</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#desestructuracion-de-arreglos","title":"\ud83d\udd39 Desestructuraci\u00f3n de Arreglos","text":"<p>Puedes extraer valores de un arreglo y asignarlos a variables individuales.</p> <p>Ejemplo:</p> <pre><code>let [primero, segundo, tercero] = [\"\ud83c\udf4e\", \"\ud83c\udf4c\", \"\ud83c\udf53\"];\nconsole.log(primero); // Output: \ud83c\udf4e\nconsole.log(segundo); // Output: \ud83c\udf4c\nconsole.log(tercero); // Output: \ud83c\udf53\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#desestructuracion-de-objetos","title":"\ud83d\udd39 Desestructuraci\u00f3n de Objetos","text":"<p>Extrae propiedades de un objeto y as\u00edgnalas a variables.</p> <p>Ejemplo:</p> <pre><code>let persona = { nombre: \"Carlos\", edad: 30, pais: \"Espa\u00f1a\" };\nlet { nombre, edad, pais } = persona;\nconsole.log(nombre); // Output: Carlos\nconsole.log(edad); // Output: 30\nconsole.log(pais); // Output: Espa\u00f1a\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#desestructuracion-con-alias","title":"\ud83d\udd39 Desestructuraci\u00f3n con Alias","text":"<p>Puedes asignar propiedades a variables con nombres diferentes usando alias.</p> <p>Ejemplo:</p> <pre><code>let usuario = { nombreUsuario: \"Ana\", rol: \"admin\" };\nlet { nombreUsuario: nombre, rol: puesto } = usuario;\nconsole.log(nombre); // Output: Ana\nconsole.log(puesto); // Output: admin\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#4-operador-de-asignacion-logica","title":"4\ufe0f\u20e3 Operador de Asignaci\u00f3n L\u00f3gica","text":"<p>JavaScript tambi\u00e9n permite asignaciones con operadores l\u00f3gicos (<code>&amp;&amp;=</code>, <code>||=</code>, <code>??=</code>) que hacen tu c\u00f3digo m\u00e1s compacto y expresivo.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-con","title":"\ud83d\udd39 Asignaci\u00f3n con <code>&amp;&amp;=</code>","text":"<p>Asigna el valor solo si la condici\u00f3n previa es verdadera (<code>true</code>).</p> <p>Ejemplo:</p> <pre><code>let isActive = true;\nlet status = \"offline\";\nisActive &amp;&amp;= \"online\"; // Solo asigna \"online\" si isActive es true\nconsole.log(isActive); // Output: online\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-con_1","title":"\ud83d\udd39 Asignaci\u00f3n con <code>||=</code>","text":"<p>Asigna el valor solo si la variable previa es <code>falsy</code> (por ejemplo, <code>null</code>, <code>undefined</code>, <code>0</code>, <code>false</code>).</p> <p>Ejemplo:</p> <pre><code>let nombreUsuario = \"\";\nnombreUsuario ||= \"Invitado\"; // Si nombreUsuario es vac\u00edo, asigna \"Invitado\"\nconsole.log(nombreUsuario); // Output: Invitado\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#asignacion-con_2","title":"\ud83d\udd39 Asignaci\u00f3n con <code>??=</code>","text":"<p>Asigna el valor solo si la variable es <code>null</code> o <code>undefined</code>.</p> <p>Ejemplo:</p> <pre><code>let valor = null;\nvalor ??= 10; // Solo asigna 10 si valor es null o undefined\nconsole.log(valor); // Output: 10\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/3asignaciones/#buenas-practicas-al-usar-asignaciones","title":"\ud83c\udf1f Buenas Pr\u00e1cticas al Usar Asignaciones","text":"<ol> <li>Utiliza operadores combinados (<code>+=</code>, <code>-=</code>) para simplificar tu c\u00f3digo.</li> <li>Desestructura objetos y arreglos para asignar m\u00faltiples valores de una forma m\u00e1s legible.</li> <li>Verifica los tipos de datos antes de asignar valores para evitar errores inesperados.</li> <li>Usa <code>const</code> y <code>let</code> adecuadamente para evitar reasignaciones no deseadas.</li> </ol> <p>Con estas t\u00e9cnicas de asignaci\u00f3n, tu c\u00f3digo ser\u00e1 m\u00e1s compacto, claro y eficiente. \u00a1Ahora tienes todas las herramientas para manejar las asignaciones en JavaScript como un verdadero ninja del c\u00f3digo! \u26a1\ud83d\udda5\ufe0f</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/","title":"\ud83e\uddee Operadores en JavaScript","text":"<p>Los operadores en JavaScript son s\u00edmbolos especiales que realizan operaciones sobre datos. Son como herramientas m\u00e1gicas que nos permiten sumar, restar, comparar, asignar, y mucho m\u00e1s. \u00a1Explor\u00e9moslos uno a uno! \u2728</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#1-operadores-aritmeticos","title":"1\ufe0f\u20e3 Operadores Aritm\u00e9ticos \ud83e\uddee","text":"<p>Los operadores aritm\u00e9ticos se utilizan para realizar c\u00e1lculos matem\u00e1ticos b\u00e1sicos como suma, resta, multiplicaci\u00f3n y divisi\u00f3n.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#suma","title":"\ud83d\udd39 Suma (<code>+</code>)","text":"<p>Suma dos valores. Tambi\u00e9n se usa para concatenar cadenas de texto.</p> <p>Ejemplo:</p> <pre><code>let a = 10;\nlet b = 5;\nconsole.log(a + b); // Output: 15\n\nlet saludo = \"Hola, \";\nlet nombre = \"Mundo!\";\nconsole.log(saludo + nombre); // Output: Hola, Mundo!\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#resta-","title":"\ud83d\udd39 Resta (<code>-</code>)","text":"<p>Resta un valor de otro.</p> <p>Ejemplo:</p> <pre><code>let x = 20;\nlet y = 7;\nconsole.log(x - y); // Output: 13\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#multiplicacion","title":"\ud83d\udd39 Multiplicaci\u00f3n (<code>*</code>)","text":"<p>Multiplica dos valores.</p> <p>Ejemplo:</p> <pre><code>let base = 4;\nlet altura = 5;\nconsole.log(base * altura); // Output: 20\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#division","title":"\ud83d\udd39 Divisi\u00f3n (<code>/</code>)","text":"<p>Divide un valor entre otro.</p> <p>Ejemplo:</p> <pre><code>let total = 100;\nlet partes = 4;\nconsole.log(total / partes); // Output: 25\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#modulo","title":"\ud83d\udd39 M\u00f3dulo (<code>%</code>)","text":"<p>Devuelve el resto de una divisi\u00f3n.</p> <p>Ejemplo:</p> <pre><code>let numero = 17;\nlet divisor = 3;\nconsole.log(numero % divisor); // Output: 2 (el resto de 17/3)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#exponenciacion","title":"\ud83d\udd39 Exponenciaci\u00f3n (<code>**</code>)","text":"<p>Eleva un n\u00famero a la potencia de otro.</p> <p>Ejemplo:</p> <pre><code>let base = 3;\nlet exponente = 3;\nconsole.log(base ** exponente); // Output: 27 (3 elevado a la 3)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#2-operadores-de-comparacion","title":"2\ufe0f\u20e3 Operadores de Comparaci\u00f3n \ud83e\udd14","text":"<p>Los operadores de comparaci\u00f3n comparan dos valores y devuelven un booleano (<code>true</code> o <code>false</code>). \u00a1Perfecto para decisiones en el c\u00f3digo!</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#igualdad-y-estricta-igualdad","title":"\ud83d\udd39 Igualdad (<code>==</code>) y Estricta Igualdad (<code>===</code>)","text":"<ul> <li><code>==</code> compara valores y convierte tipos si es necesario.</li> <li><code>===</code> compara valores y tipos, sin conversiones autom\u00e1ticas.</li> </ul> <p>Ejemplo:</p> <pre><code>console.log(5 == \"5\"); // Output: true (convierte \"5\" a n\u00famero)\nconsole.log(5 === \"5\"); // Output: false (diferentes tipos: n\u00famero vs. string)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#desigualdad-y-estricta-desigualdad","title":"\ud83d\udd39 Desigualdad (<code>!=</code>) y Estricta Desigualdad (<code>!==</code>)","text":"<ul> <li><code>!=</code> verifica si los valores son diferentes.</li> <li><code>!==</code> verifica si los valores y tipos son diferentes.</li> </ul> <p>Ejemplo:</p> <pre><code>console.log(10 != \"10\"); // Output: false (convierte \"10\" a n\u00famero)\nconsole.log(10 !== \"10\"); // Output: true (diferentes tipos)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#mayor-que-y-menor-que","title":"\ud83d\udd39 Mayor que (<code>&gt;</code>) y Menor que (<code>&lt;</code>)","text":"<p>Comparan si un valor es mayor o menor que otro.</p> <p>Ejemplo:</p> <pre><code>console.log(8 &gt; 3); // Output: true\nconsole.log(3 &lt; 8); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#mayor-o-igual-y-menor-o-igual","title":"\ud83d\udd39 Mayor o Igual (<code>&gt;=</code>) y Menor o Igual (<code>&lt;=</code>)","text":"<p>Comparan si un valor es mayor o igual, o menor o igual.</p> <p>Ejemplo:</p> <pre><code>console.log(5 &gt;= 5); // Output: true\nconsole.log(4 &lt;= 3); // Output: false\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#3-operadores-logicos","title":"3\ufe0f\u20e3 Operadores L\u00f3gicos \ud83e\udde0","text":"<p>Los operadores l\u00f3gicos nos permiten combinar m\u00faltiples condiciones, perfectos para estructuras de control como <code>if</code> o <code>while</code>.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#y-logico","title":"\ud83d\udd39 Y L\u00f3gico (<code>&amp;&amp;</code>)","text":"<p>Devuelve <code>true</code> si ambas condiciones son verdaderas.</p> <p>Ejemplo:</p> <pre><code>let esMayor = true;\nlet tienePermiso = true;\nconsole.log(esMayor &amp;&amp; tienePermiso); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#o-logico","title":"\ud83d\udd39 O L\u00f3gico (<code>||</code>)","text":"<p>Devuelve <code>true</code> si una o ambas condiciones son verdaderas.</p> <p>Ejemplo:</p> <pre><code>let esAdulto = false;\nlet tienePermisoEspecial = true;\nconsole.log(esAdulto || tienePermisoEspecial); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#no-logico","title":"\ud83d\udd39 No L\u00f3gico (<code>!</code>)","text":"<p>Niega el valor de una condici\u00f3n, invirti\u00e9ndola.</p> <p>Ejemplo:</p> <pre><code>let esDia = false;\nconsole.log(!esDia); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#4-operadores-de-asignacion","title":"4\ufe0f\u20e3 Operadores de Asignaci\u00f3n \ud83d\udce5","text":"<p>Los operadores de asignaci\u00f3n asignan valores a variables. Adem\u00e1s del b\u00e1sico <code>=</code>, hay combinaciones para operaciones m\u00e1s avanzadas.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#asignacion-basica","title":"\ud83d\udd39 Asignaci\u00f3n B\u00e1sica (<code>=</code>)","text":"<p>Ejemplo:</p> <pre><code>let puntos = 100; // Asigna 100 a la variable puntos\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#combinados-con-aritmeticos-etc","title":"\ud83d\udd39 Combinados con Aritm\u00e9ticos (<code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, etc.)","text":"<p>Ejemplo:</p> <pre><code>let score = 10;\nscore += 5; // Es lo mismo que score = score + 5\nconsole.log(score); // Output: 15\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#5-operador-ternario","title":"5\ufe0f\u20e3 Operador Ternario \ud83e\uddd0","text":"<p>El operador ternario (<code>? :</code>) es una forma abreviada de escribir <code>if...else</code> en una sola l\u00ednea. Se usa para evaluar una condici\u00f3n y devolver uno de dos valores.</p> <p>Ejemplo:</p> <pre><code>let edad = 18;\nlet acceso = edad &gt;= 18 ? \"Permitido\" : \"Denegado\";\nconsole.log(acceso); // Output: Permitido\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#6-operador-de-encadenamiento-opcional","title":"6\ufe0f\u20e3 Operador de Encadenamiento Opcional (<code>?.</code>) \ud83d\udea6","text":"<p>Este operador permite acceder a propiedades de objetos sin causar errores si alguna parte de la cadena no existe.</p> <p>Ejemplo:</p> <pre><code>let usuario = { nombre: \"Ana\", direccion: { ciudad: \"Madrid\" } };\nconsole.log(usuario.direccion?.ciudad); // Output: Madrid\nconsole.log(usuario.contacto?.telefono); // Output: undefined (no causa error)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/4operadores/#buenas-practicas-al-usar-operadores","title":"\ud83c\udf1f Buenas Pr\u00e1cticas al Usar Operadores","text":"<ol> <li>Prefiere <code>===</code> en lugar de <code>==</code> para evitar conversiones inesperadas de tipos.</li> <li>Combina operadores l\u00f3gicos con par\u00e9ntesis para asegurar claridad en condiciones complejas.</li> <li>Utiliza el operador ternario para simplificar decisiones simples en tu c\u00f3digo.</li> <li>Prueba el operador de encadenamiento opcional para evitar errores al acceder a propiedades de objetos que pueden no existir.</li> </ol> <p>Con estos operadores, tienes una caja de herramientas poderosa para manipular y comparar datos en JavaScript. \u00a1\u00dasalos sabiamente para crear c\u00f3digo m\u00e1s eficiente y expresivo! \u26a1\ud83d\udda5\ufe0f</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/","title":"\ud83d\udcdd Comentarios en el C\u00f3digo JavaScript","text":"<p>Los comentarios en JavaScript son l\u00edneas de texto que el navegador ignora al ejecutar el c\u00f3digo. Son herramientas esenciales para describir qu\u00e9 hace el c\u00f3digo, dejar notas para otros desarrolladores (o para ti mismo en el futuro), y desactivar partes del c\u00f3digo temporalmente. \u00a1Vamos a ver c\u00f3mo y cu\u00e1ndo usar los comentarios! \ud83e\uddd0</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#1-por-que-usar-comentarios","title":"1\ufe0f\u20e3 \u00bfPor qu\u00e9 Usar Comentarios? \ud83e\udd14","text":"<p>Los comentarios ayudan a:</p> <ul> <li>Explicar la l\u00f3gica detr\u00e1s de fragmentos de c\u00f3digo.</li> <li>Anotar ideas para mejorar o cambiar el c\u00f3digo m\u00e1s adelante.</li> <li>Desactivar partes del c\u00f3digo temporalmente sin borrarlas.</li> <li>Facilitar la colaboraci\u00f3n en equipo, haciendo que el c\u00f3digo sea m\u00e1s legible para otros desarrolladores.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#2-tipos-de-comentarios-en-javascript","title":"2\ufe0f\u20e3 Tipos de Comentarios en JavaScript","text":"<p>JavaScript admite dos tipos de comentarios: Comentarios de una sola l\u00ednea y Comentarios de varias l\u00edneas.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#comentarios-de-una-sola-linea","title":"\ud83d\udd39 Comentarios de Una Sola L\u00ednea (<code>//</code>)","text":"<p>Se usan para comentarios cortos o para explicar una sola l\u00ednea de c\u00f3digo. Se a\u00f1aden al comienzo de la l\u00ednea y todo lo que sigue despu\u00e9s de <code>//</code> es ignorado por JavaScript.</p> <p>Ejemplo:</p> <pre><code>// Este es un comentario de una sola l\u00ednea\nlet nombre = \"Carlos\"; // Declara una variable con el nombre \"Carlos\"\nconsole.log(nombre); // Muestra \"Carlos\" en la consola\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#comentarios-de-varias-lineas","title":"\ud83d\udd39 Comentarios de Varias L\u00edneas (<code>/* */</code>)","text":"<p>Son \u00fatiles para comentarios m\u00e1s largos o para descripciones detalladas. Todo lo que se encuentra entre <code>/*</code> y <code>*/</code> es ignorado por JavaScript.</p> <p>Ejemplo:</p> <pre><code>/*\n  Esta funci\u00f3n calcula la suma de dos n\u00fameros.\n  Par\u00e1metros:\n  - a: Primer n\u00famero\n  - b: Segundo n\u00famero\n  Retorna: La suma de a y b\n*/\nfunction sumar(a, b) {\n  return a + b;\n}\n\nconsole.log(sumar(10, 5)); // Output: 15\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#3-usos-comunes-de-los-comentarios","title":"3\ufe0f\u20e3 Usos Comunes de los Comentarios \ud83d\udee0\ufe0f","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#explicar-la-logica-compleja","title":"\ud83d\udd39 Explicar la L\u00f3gica Compleja","text":"<p>Usa comentarios para explicar la l\u00f3gica detr\u00e1s de fragmentos de c\u00f3digo complejos. Esto ayuda a otros (\u00a1y a ti mismo!) a entender el prop\u00f3sito de un bloque de c\u00f3digo.</p> <p>Ejemplo:</p> <pre><code>// Comprobamos si el n\u00famero es primo\nfunction esPrimo(numero) {\n  if (numero &lt;= 1) return false; // Los n\u00fameros menores o iguales a 1 no son primos\n  for (let i = 2; i &lt; numero; i++) {\n    if (numero % i === 0) return false; // Si es divisible por otro n\u00famero, no es primo\n  }\n  return true; // Si pasa todas las pruebas, es primo\n}\n\nconsole.log(esPrimo(7)); // Output: true\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#desactivar-codigo-temporalmente","title":"\ud83d\udd39 Desactivar C\u00f3digo Temporalmente","text":"<p>Puedes usar comentarios para desactivar c\u00f3digo sin eliminarlo, lo cual es \u00fatil para probar o depurar sin perder l\u00edneas de c\u00f3digo.</p> <p>Ejemplo:</p> <pre><code>let resultado = 0;\n\n// Desactiva la siguiente l\u00ednea mientras pruebas otra cosa\n// resultado = sumar(3, 7);\n\n// Activamos una l\u00ednea alternativa para la prueba\nresultado = 10 + 5;\nconsole.log(resultado); // Output: 15\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#dejar-notas-o-recordatorios","title":"\ud83d\udd39 Dejar Notas o Recordatorios \ud83d\udccc","text":"<p>Los comentarios tambi\u00e9n son un excelente lugar para dejar notas sobre mejoras futuras, arreglos necesarios, o cualquier cosa que debas recordar.</p> <p>Ejemplo:</p> <pre><code>// TODO: Mejorar la eficiencia de este bucle\nfor (let i = 0; i &lt; 100; i++) {\n  console.log(i);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#4-buenas-practicas-al-usar-comentarios","title":"4\ufe0f\u20e3 Buenas Pr\u00e1cticas al Usar Comentarios \ud83c\udf1f","text":"<ol> <li>S\u00e9 Claro y Conciso: Los comentarios deben explicar el \"por qu\u00e9\" y el \"c\u00f3mo\" del c\u00f3digo de manera clara y breve.</li> <li>No Comentes lo Obvio: No es necesario comentar cosas evidentes como <code>let x = 10; // Asigna 10 a x</code>. Mejor explica la l\u00f3gica.</li> <li>Actualiza los Comentarios: Si cambias el c\u00f3digo, aseg\u00farate de actualizar los comentarios para que sigan siendo precisos.</li> <li>Usa Comentarios para Planificar: Al comenzar a escribir c\u00f3digo, usa comentarios para estructurar tu l\u00f3gica y pasos a seguir.</li> </ol> <p>Ejemplo de Planificaci\u00f3n con Comentarios:</p> <pre><code>// 1. Solicitar el nombre del usuario\n// 2. Saludar al usuario por su nombre\n// 3. Mostrar la fecha actual\n\n// Paso 1\nlet nombreUsuario = prompt(\"\u00bfCu\u00e1l es tu nombre?\");\n\n// Paso 2\nconsole.log(`Hola, ${nombreUsuario}! \ud83d\udc4b`);\n\n// Paso 3\nlet fechaActual = new Date();\nconsole.log(`Hoy es: ${fechaActual.toDateString()}`);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/5comentarios/#5-comentarios-en-el-codigo-limpio","title":"5\ufe0f\u20e3 Comentarios en el C\u00f3digo Limpio \u2728","text":"<p>Mantener comentarios relevantes y actualizados es clave para un c\u00f3digo limpio y profesional. Usa los comentarios para agregar valor, no para llenar l\u00edneas innecesariamente.</p> <p>Ejemplo de C\u00f3digo Limpio con Comentarios \u00datiles:</p> <pre><code>// Genera un n\u00famero aleatorio entre un rango dado\nfunction numeroAleatorio(min, max) {\n  // Math.random() genera un n\u00famero entre 0 y 1, que escalamos y ajustamos al rango\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconsole.log(numeroAleatorio(1, 10)); // Output: Un n\u00famero entre 1 y 10\n</code></pre> <p>Los comentarios son una parte fundamental del desarrollo de software, especialmente cuando trabajas en equipo o vuelves a revisar tu propio c\u00f3digo despu\u00e9s de un tiempo. Usa los comentarios para guiar, explicar, y documentar tu c\u00f3digo de manera efectiva. \u00a1Con estos consejos, tendr\u00e1s un c\u00f3digo claro y f\u00e1cil de mantener! \u270d\ufe0f\ud83e\uddd1\u200d\ud83d\udcbb</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/","title":"Condicionales en JavaScript: \u00a1Aprende de Manera Visual y Divertida! \ud83d\ude80","text":"<p>En JavaScript, las condicionales son la clave para tomar decisiones en el c\u00f3digo. Son como sem\u00e1foros para tus programas: dependiendo de ciertas condiciones, el flujo de ejecuci\u00f3n cambia de direcci\u00f3n. Vamos a desglosarlo con ejemplos, diagramas y hasta algunos emojis para que quede todo clar\u00edsimo.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#que-son-las-condicionales","title":"\ud83d\uded1 \u00bfQu\u00e9 son las Condicionales?","text":"<p>Las condicionales son estructuras de control que permiten que tu programa tome decisiones basadas en condiciones verdaderas o falsas. Los principales tipos en JavaScript son:</p> <ol> <li>if</li> <li>else if</li> <li>else</li> <li>switch</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#estructura-basica","title":"\ud83d\udcdc Estructura B\u00e1sica","text":"<pre><code>if (condici\u00f3n) {\n  // C\u00f3digo a ejecutar si la condici\u00f3n es verdadera\n} else {\n  // C\u00f3digo a ejecutar si la condici\u00f3n es falsa\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#ejemplo-practico","title":"\ud83c\udf1f Ejemplo Pr\u00e1ctico","text":"<p>Imagina que tienes que decidir si un usuario es mayor de edad:</p> <pre><code>let edad = 18;\n\nif (edad &gt;= 18) {\n  console.log(\"Eres mayor de edad. \ud83c\udf89\");\n} else {\n  console.log(\"A\u00fan eres menor de edad. \ud83e\uddd2\");\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#diagrama-de-flujo","title":"\ud83e\udde9 Diagrama de Flujo","text":"<pre><code>        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502 Edad \u2265 18 \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502   S\u00ed      \u2502\n        \u2502   (\"Mayor de edad\") \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502   No      \u2502\n        \u2502  (\"Menor de edad\") \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#anidacion-de-condicionales-else-if","title":"\ud83c\udf00 Anidaci\u00f3n de Condicionales (else if)","text":"<p>Si necesitas evaluar m\u00faltiples condiciones, puedes usar <code>else if</code>. Esto permite evaluar varias posibilidades de forma secuencial:</p> <pre><code>let temperatura = 30;\n\nif (temperatura &gt; 30) {\n  console.log(\"\u00a1Hace mucho calor! \ud83c\udf1e\");\n} else if (temperatura &gt; 20) {\n  console.log(\"El clima es agradable. \ud83c\udf24\ufe0f\");\n} else {\n  console.log(\"\u00a1Hace fr\u00edo! \u2744\ufe0f\");\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#switch-otra-forma-de-tomar-decisiones","title":"\ud83d\udd04 Switch: Otra Forma de Tomar Decisiones","text":"<p>Cuando tienes muchas opciones, <code>switch</code> es tu mejor amigo:</p> <pre><code>let dia = \"martes\";\n\nswitch (dia) {\n  case \"lunes\":\n    console.log(\"\u00a1Empezamos la semana! \ud83d\udcaa\");\n    break;\n  case \"martes\":\n    console.log(\"\u00a1Segundo d\u00eda, seguimos adelante! \ud83d\ude80\");\n    break;\n  default:\n    console.log(\"\u00a1Disfruta tu d\u00eda! \ud83c\udf89\");\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#tips-y-buenas-practicas","title":"\ud83d\udd0d Tips y Buenas Pr\u00e1cticas","text":"<ul> <li>Usa <code>else if</code> para reducir redundancias y evitar condiciones innecesarias.</li> <li><code>switch</code> es ideal para comparar m\u00faltiples valores, como d\u00edas de la semana o niveles de acceso.</li> <li>Simplifica tu c\u00f3digo: Evita condicionales complejas dividi\u00e9ndolas en funciones.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#ejercicios-interactivos","title":"\ud83c\udfaf Ejercicios Interactivos","text":"<p>\u00a1Pon en pr\u00e1ctica lo que has aprendido con estos desaf\u00edos! \ud83d\ude80</p> <ol> <li>Crea un sistema de calificaciones: Usa <code>if-else</code> para evaluar notas escolares.</li> <li>Simulador de Clima: Usa <code>switch</code> para mostrar mensajes personalizados seg\u00fan la temporada del a\u00f1o.</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/6condicionales/#conclusion","title":"\ud83d\udcca Conclusi\u00f3n","text":"<p>Las condicionales son fundamentales en cualquier lenguaje de programaci\u00f3n, y dominarlas har\u00e1 que tu c\u00f3digo sea m\u00e1s inteligente y eficiente. \u00a1Sigue practicando y ver\u00e1s c\u00f3mo te conviertes en un experto en decisiones! \ud83e\uddd1\u200d\ud83d\udcbb\ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/","title":"Bucles en JavaScript: Domina la Repetici\u00f3n con Estilo \ud83d\ude80\ud83d\udd04","text":"<p>En JavaScript, los bucles son la herramienta perfecta para realizar tareas repetitivas de forma eficiente. Son como las ruedas de tu bicicleta: una vez que empiezan a girar, \u00a1no paran hasta llegar a su destino! \ud83c\udf1f Vamos a explorar los tipos m\u00e1s comunes de bucles, c\u00f3mo funcionan y c\u00f3mo puedes usarlos en tus proyectos. \u00a1Acomp\u00e1\u00f1ame en este viaje interactivo con ejemplos, diagramas y un poco de diversi\u00f3n! \ud83d\ude04</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#que-son-los-bucles","title":"\ud83d\udd04 \u00bfQu\u00e9 son los Bucles?","text":"<p>Los bucles te permiten ejecutar un bloque de c\u00f3digo varias veces, hasta que una condici\u00f3n deje de cumplirse. En JavaScript, existen varios tipos de bucles que puedes usar dependiendo de la situaci\u00f3n:</p> <ol> <li>for</li> <li>while</li> <li>do...while</li> <li>for...of</li> <li>for...in</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#bucles-for-itera-con-control-total","title":"\ud83e\uddd1\u200d\ud83d\udcbb Bucles <code>for</code>: Itera con Control Total","text":"<p>El bucle <code>for</code> es ideal cuando conoces cu\u00e1ntas veces quieres repetir una acci\u00f3n. \u00a1Es como un contador que sabes exactamente hasta d\u00f3nde debe llegar!</p> <pre><code>// Ejemplo de bucle for\nfor (let i = 0; i &lt; 5; i++) {\n  console.log(`Iteraci\u00f3n n\u00famero: ${i + 1} \ud83d\udeb4\u200d\u2642\ufe0f`);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#desglose-del-codigo","title":"\ud83d\udd0d Desglose del C\u00f3digo:","text":"<ul> <li><code>let i = 0</code>: Inicia el contador.</li> <li><code>i &lt; 5</code>: Condici\u00f3n que mantiene el bucle activo.</li> <li><code>i++</code>: Incrementa el contador en 1 despu\u00e9s de cada iteraci\u00f3n.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#bucles-while-repite-hasta-que-quieras","title":"\ud83d\udd01 Bucles <code>while</code>: Repite Hasta que Quieras","text":"<p>Los bucles <code>while</code> son perfectos cuando no sabes cu\u00e1ntas veces necesitar\u00e1s repetir una acci\u00f3n, y quieres que se repita hasta que una condici\u00f3n se cumpla. \u00a1Es como seguir jugando hasta que te canses! \ud83c\udfae</p> <pre><code>let contador = 0;\n\nwhile (contador &lt; 3) {\n  console.log(`Contador: ${contador} \ud83c\udfaf`);\n  contador++;\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#desglose","title":"\ud83e\udd13 Desglose:","text":"<ul> <li>Comienza con <code>contador = 0</code>.</li> <li>Mientras <code>contador &lt; 3</code>, ejecuta el bloque de c\u00f3digo.</li> <li>Incrementa el contador despu\u00e9s de cada iteraci\u00f3n.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#dowhile-al-menos-una-vez","title":"\ud83d\udd19 <code>do...while</code>: Al Menos Una Vez","text":"<p>El bucle <code>do...while</code> garantiza que el c\u00f3digo se ejecute al menos una vez, incluso si la condici\u00f3n es falsa desde el inicio. \u00a1Piensa en esto como probar una comida nueva: al menos un bocado, aunque no est\u00e9s seguro de que te guste! \ud83c\udf55\ud83d\ude05</p> <pre><code>let intentos = 0;\n\ndo {\n  console.log(`Intento n\u00famero: ${intentos + 1} \ud83e\udd1e`);\n  intentos++;\n} while (intentos &lt; 2);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#bucles-modernos-forof-y-forin","title":"\ud83d\ude80 Bucles Modernos: <code>for...of</code> y <code>for...in</code>","text":"<ul> <li><code>for...of</code>: Ideal para iterar sobre elementos de un array, mostrando cada uno de ellos. \ud83d\udc40</li> </ul> <pre><code>let frutas = [\"\ud83c\udf4e\", \"\ud83c\udf4c\", \"\ud83c\udf47\"];\n\nfor (let fruta of frutas) {\n  console.log(`Fruta: ${fruta}`);\n}\n</code></pre> <ul> <li><code>for...in</code>: Perfecto para recorrer las propiedades de un objeto. \ud83d\udee0\ufe0f</li> </ul> <pre><code>let persona = { nombre: \"Juan\", edad: 25 };\n\nfor (let propiedad in persona) {\n  console.log(`${propiedad}: ${persona[propiedad]}`);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#consejos-pro-para-usar-bucles","title":"\ud83c\udf1f Consejos Pro para Usar Bucles","text":"<ul> <li>Evita los bucles infinitos: Aseg\u00farate de que siempre haya una condici\u00f3n que detenga el bucle.</li> <li>Utiliza <code>break</code> y <code>continue</code>: <code>break</code> para salir del bucle y <code>continue</code> para saltar a la siguiente iteraci\u00f3n.</li> <li>Anidar con cuidado: Los bucles anidados pueden volverse complejos r\u00e1pidamente. \u00dasalos solo cuando sea necesario.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#ejercicios-interactivos","title":"\ud83e\uddea Ejercicios Interactivos","text":"<ol> <li>Crea una tabla de multiplicar usando <code>for</code>. \ud83e\uddee</li> <li>Simula una cuenta regresiva con <code>while</code>. \ud83d\ude80</li> <li>Recorre los elementos de un array de emojis con <code>for...of</code>. \ud83c\udf89</li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/7bucles/#conclusion","title":"\ud83c\udfc1 Conclusi\u00f3n","text":"<p>Los bucles son esenciales en la programaci\u00f3n y dominarlos te permitir\u00e1 automatizar tareas repetitivas con facilidad. Recuerda siempre planificar bien la condici\u00f3n de parada para evitar problemas y sigue practicando para mejorar tu fluidez con ellos. \u00a1Felices iteraciones! \ud83d\ude80\ud83c\udf89</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/","title":"Funciones y Par\u00e1metros en JavaScript","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#que-son-las-funciones-en-javascript","title":"\ud83e\uddd1\u200d\ud83d\udcbb \u00bfQu\u00e9 son las Funciones en JavaScript?","text":"<p>Las funciones son bloques de c\u00f3digo reutilizables que permiten realizar tareas espec\u00edficas. En JavaScript, son fundamentales para la modularizaci\u00f3n del c\u00f3digo y la reutilizaci\u00f3n de l\u00f3gica, ayudando a mantener el c\u00f3digo limpio y organizado.</p> <pre><code>// Declaraci\u00f3n de una funci\u00f3n simple\nfunction saludar() {\n    console.log(\"\u00a1Hola, mundo!\");\n}\n\n// Llamada a la funci\u00f3n\nsaludar(); // Output: \u00a1Hola, mundo!\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#tipos-de-funciones-en-javascript","title":"\ud83d\udd0d Tipos de Funciones en JavaScript","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#1-funciones-declarativas","title":"1. Funciones Declarativas","text":"<p>Son las funciones definidas utilizando la palabra clave <code>function</code>. Son f\u00e1ciles de leer y permiten ser llamadas antes de ser declaradas, gracias al concepto de hoisting.</p> <pre><code>// Declaraci\u00f3n de funci\u00f3n\nfunction sumar(a, b) {\n    return a + b;\n}\n\nconsole.log(sumar(3, 4)); // Output: 7\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#2-funciones-anonimas-funciones-de-expresion","title":"2. Funciones An\u00f3nimas (Funciones de Expresi\u00f3n)","text":"<p>Son funciones sin nombre que se asignan a variables. A diferencia de las declarativas, no pueden ser llamadas antes de su definici\u00f3n.</p> <pre><code>// Funci\u00f3n an\u00f3nima asignada a una variable\nconst restar = function(a, b) {\n    return a - b;\n};\n\nconsole.log(restar(10, 3)); // Output: 7\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#3-funciones-flecha-arrow-functions","title":"3. Funciones Flecha (Arrow Functions)","text":"<p>Introducidas en ES6, las funciones flecha (<code>=&gt;</code>) permiten una sintaxis m\u00e1s compacta y no tienen su propio <code>this</code>, lo cual es \u00fatil en algunos contextos.</p> <pre><code>// Ejemplo de funci\u00f3n flecha\nconst multiplicar = (a, b) =&gt; a * b;\n\nconsole.log(multiplicar(5, 2)); // Output: 10\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#parametros-y-argumentos-en-javascript","title":"\ud83c\udfaf Par\u00e1metros y Argumentos en JavaScript","text":"<p>Los par\u00e1metros son variables que se definen en la declaraci\u00f3n de la funci\u00f3n, mientras que los argumentos son los valores que pasamos a la funci\u00f3n cuando la llamamos.</p> <pre><code>// Funci\u00f3n con par\u00e1metros\nfunction presentar(nombre, edad) {\n    console.log(`\u00a1Hola! Soy ${nombre} y tengo ${edad} a\u00f1os.`);\n}\n\n// Llamada a la funci\u00f3n con argumentos\npresentar(\"Ana\", 25); // Output: \u00a1Hola! Soy Ana y tengo 25 a\u00f1os.\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#parametros-predeterminados","title":"\ud83c\udf1f Par\u00e1metros Predeterminados","text":"<p>JavaScript permite definir valores predeterminados para los par\u00e1metros. Si no se proporciona un argumento, la funci\u00f3n usar\u00e1 el valor por defecto.</p> <pre><code>// Par\u00e1metro con valor predeterminado\nfunction saludar(nombre = \"Invitado\") {\n    console.log(`Hola, ${nombre}!`);\n}\n\nsaludar(); // Output: Hola, Invitado!\nsaludar(\"Carlos\"); // Output: Hola, Carlos!\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#parametros-rest-y-spread","title":"\ud83d\udcca Par\u00e1metros Rest y Spread","text":"<ul> <li>Rest (<code>...</code>): Permite agrupar m\u00faltiples argumentos en un solo par\u00e1metro como un array.</li> </ul> <pre><code>function sumarTodos(...numeros) {\n    return numeros.reduce((total, num) =&gt; total + num, 0);\n}\n\nconsole.log(sumarTodos(1, 2, 3, 4)); // Output: 10\n</code></pre> <ul> <li>Spread (<code>...</code>): Permite expandir un array en m\u00faltiples elementos, \u00fatil para pasar un conjunto de valores a una funci\u00f3n.</li> </ul> <pre><code>const numeros = [10, 20, 30];\nconsole.log(Math.max(...numeros)); // Output: 30\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/8funciones/#funciones-anidadas-y-funciones-de-orden-superior","title":"\ud83c\udfa8 Funciones Anidadas y Funciones de Orden Superior","text":"<p>JavaScript permite funciones dentro de otras funciones, as\u00ed como pasar funciones como argumentos o retornarlas como valores.</p> <pre><code>// Funci\u00f3n de orden superior\nfunction calcular(operacion, a, b) {\n    return operacion(a, b);\n}\n\n// Funci\u00f3n que se pasa como argumento\nconst division = (x, y) =&gt; x / y;\n\nconsole.log(calcular(division, 10, 2)); // Output: 5\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/","title":"\ud83d\udcda Gu\u00eda B\u00e1sica de Arrays en JavaScript: Manipula tus Datos con Estilo \ud83d\ude80","text":"<p>Trabajar con arrays es una de las habilidades esenciales para cualquier desarrollador JavaScript. Las operaciones b\u00e1sicas como a\u00f1adir, eliminar y seleccionar elementos son la base de muchas aplicaciones y scripts. Aqu\u00ed te mostramos c\u00f3mo hacerlo de manera clara y visualmente atractiva, \u00a1para que le saques el m\u00e1ximo provecho a tus datos! \ud83e\uddd1\u200d\ud83d\udcbb</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#operaciones-basicas-con-arrays-en-javascript","title":"\ud83d\udee0\ufe0f Operaciones B\u00e1sicas con Arrays en JavaScript","text":"<p>Los arrays son listas ordenadas de elementos, y aprender a manipularlos es clave. Vamos a ver c\u00f3mo puedes trabajar con ellos con ejemplos pr\u00e1cticos y f\u00e1ciles de seguir. \ud83c\udfaf</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#1-anadir-un-elemento-al-final-del-array-push","title":"1. \u2795 A\u00f1adir un Elemento al Final del Array (<code>push()</code>)","text":"<p>\u00bfQuieres agregar algo al final de tu lista? <code>push()</code> es tu mejor amigo.</p> <pre><code>const frutas = [\"manzana\", \"banana\"];\nfrutas.push(\"naranja\"); // A\u00f1ade \"naranja\" al final\nconsole.log(frutas); // [\"manzana\", \"banana\", \"naranja\"]\n</code></pre> <p>Diagrama:</p> <pre><code>graph TD;\n    A[manzana] --&gt; B[banana];\n    B --&gt; C[naranja];</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#2-anadir-un-elemento-al-inicio-del-array-unshift","title":"2. \u23ea A\u00f1adir un Elemento al Inicio del Array (<code>unshift()</code>)","text":"<p>Si necesitas insertar un elemento al principio, <code>unshift()</code> lo hace por ti.</p> <pre><code>const frutas = [\"manzana\", \"banana\"];\nfrutas.unshift(\"uva\"); // A\u00f1ade \"uva\" al inicio\nconsole.log(frutas); // [\"uva\", \"manzana\", \"banana\"]\n</code></pre> <p>Diagrama:</p> <pre><code>graph TD;\n    U[uva] --&gt; M[manzana];\n    M --&gt; B[banana];</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#3-eliminar-el-ultimo-elemento-del-array-pop","title":"3. \u274c Eliminar el \u00daltimo Elemento del Array (<code>pop()</code>)","text":"<p>Para eliminar el \u00faltimo elemento de tu array, <code>pop()</code> es la funci\u00f3n indicada.</p> <pre><code>const frutas = [\"manzana\", \"banana\", \"naranja\"];\nfrutas.pop(); // Elimina \"naranja\"\nconsole.log(frutas); // [\"manzana\", \"banana\"]\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#4-eliminar-el-primer-elemento-del-array-shift","title":"4. \ud83d\uddd1\ufe0f Eliminar el Primer Elemento del Array (<code>shift()</code>)","text":"<p>Si deseas deshacerte del primer elemento, utiliza <code>shift()</code>.</p> <pre><code>const frutas = [\"manzana\", \"banana\", \"naranja\"];\nfrutas.shift(); // Elimina \"manzana\"\nconsole.log(frutas); // [\"banana\", \"naranja\"]\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#5-eliminar-un-elemento-en-una-posicion-especifica-splice","title":"5. \u2702\ufe0f Eliminar un Elemento en una Posici\u00f3n Espec\u00edfica (<code>splice()</code>)","text":"<p><code>splice()</code> te permite eliminar elementos en una posici\u00f3n espec\u00edfica.</p> <pre><code>const frutas = [\"manzana\", \"banana\", \"naranja\"];\nfrutas.splice(1, 1); // Elimina \"banana\" en la posici\u00f3n 1\nconsole.log(frutas); // [\"manzana\", \"naranja\"]\n</code></pre> <p>Diagrama:</p> <pre><code>graph TD;\n    M[manzana] --&gt; N[naranja];</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#6-seleccionar-un-elemento-especifico-por-su-indice","title":"6. \ud83d\udd0d Seleccionar un Elemento Espec\u00edfico por su \u00cdndice","text":"<p>Accede directamente a cualquier elemento por su \u00edndice. F\u00e1cil y r\u00e1pido.</p> <pre><code>const frutas = [\"manzana\", \"banana\", \"naranja\"];\nconsole.log(frutas[0]); // Selecciona \"manzana\"\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/9objetosyarrays/#7-seleccionar-un-elemento-aleatorio","title":"7. \ud83c\udfb2 Seleccionar un Elemento Aleatorio","text":"<p>Para seleccionar un elemento aleatorio, combina <code>Math.random()</code> y <code>Math.floor()</code>.</p> <pre><code>const frutas = [\"manzana\", \"banana\", \"naranja\"];\nconst randomIndex = Math.floor(Math.random() * frutas.length);\nconsole.log(frutas[randomIndex]); // Selecciona un elemento aleatorio\n</code></pre> <p>Diagrama:</p> <pre><code>graph TD;\n    R[Random Index] --&gt; F1[manzana];\n    R --&gt; F2[banana];\n    R --&gt; F3[naranja];</code></pre> <p>Estas son las operaciones b\u00e1sicas que necesitas para manipular arrays en JavaScript sin complicaciones. \u00a1Practica estas t\u00e9cnicas y tendr\u00e1s el control total de tus datos! \ud83d\udca1</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/","title":"Ejercicios","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#ejercicios-de-javascript-sintaxis-y-conceptos-basicos","title":"Ejercicios de JavaScript: Sintaxis y conceptos b\u00e1sicos","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#1-variables-declaracion-inicializacion-y-ambito","title":"1. Variables: Declaraci\u00f3n, Inicializaci\u00f3n, y \u00c1mbito","text":"<p>Ejercicio 1.1: Declaraci\u00f3n e Inicializaci\u00f3n de Variables Declara tres variables: una de tipo <code>var</code>, otra de tipo <code>let</code> y otra de tipo <code>const</code>. Inicial\u00edzalas con cualquier valor.</p> <pre><code>// Declara una variable con var\nvar nombre = \"Juan\";\n\n// Declara una variable con let\nlet edad = 25;\n\n// Declara una constante con const\nconst PI = 3.1416;\n</code></pre> <p>Ejercicio 1.2: \u00c1mbito de Variables Escribe un c\u00f3digo donde demuestres el comportamiento de <code>var</code>, <code>let</code>, y <code>const</code> dentro y fuera de un bloque (<code>if</code>, <code>for</code>, etc.).</p> <pre><code>function pruebaAmbito() {\n    if (true) {\n        var variableVar = \"Dentro del bloque con var\";\n        let variableLet = \"Dentro del bloque con let\";\n        const variableConst = \"Dentro del bloque con const\";\n    }\n    console.log(variableVar); // Accesible\n    console.log(variableLet); // Error: No accesible\n    console.log(variableConst); // Error: No accesible\n}\npruebaAmbito();\n</code></pre> <p>Ejercicio 1.3: Reasignaci\u00f3n de Variables Declara una variable con <code>let</code> y reas\u00edgnale un nuevo valor m\u00e1s adelante en el c\u00f3digo. Haz lo mismo con una variable <code>var</code> y una constante <code>const</code> para observar qu\u00e9 sucede.</p> <pre><code>let ciudad = \"Madrid\";\nciudad = \"Barcelona\"; // Reasignaci\u00f3n v\u00e1lida\n\nvar pais = \"Espa\u00f1a\";\npais = \"Francia\"; // Reasignaci\u00f3n v\u00e1lida\n\nconst continente = \"Europa\";\n// continente = \"Asia\"; // Error: No se puede reasignar una constante\n</code></pre> <p>Ejercicio 1.4: Hoisting Demuestra el comportamiento del hoisting con <code>var</code>, <code>let</code> y <code>const</code>. Escribe un c\u00f3digo donde declares variables despu\u00e9s de usarlas, para ver c\u00f3mo act\u00faa el hoisting en cada caso.</p> <pre><code>console.log(x); // Undefined, debido al hoisting de var\nvar x = 5;\n\ntry {\n    console.log(y); // Error: no se puede acceder antes de la declaraci\u00f3n\n    let y = 10;\n} catch (e) {\n    console.log(e.message);\n}\n\ntry {\n    console.log(z); // Error: no se puede acceder antes de la declaraci\u00f3n\n    const z = 15;\n} catch (e) {\n    console.log(e.message);\n}\n</code></pre> <p>Ejercicio 1.5: \u00c1mbito Funcional vs \u00c1mbito de Bloque Crea una funci\u00f3n y dentro de ella declara variables con <code>var</code>, <code>let</code> y <code>const</code>. Muestra la diferencia de comportamiento de <code>var</code> frente a <code>let</code> y <code>const</code> en el \u00e1mbito funcional y de bloque.</p> <pre><code>function pruebaAmbitoFuncional() {\n    if (true) {\n        var varEnBloque = \"var dentro del bloque\";\n        let letEnBloque = \"let dentro del bloque\";\n        const constEnBloque = \"const dentro del bloque\";\n    }\n    console.log(varEnBloque); // Accesible: var tiene \u00e1mbito funcional\n    try {\n        console.log(letEnBloque); // Error: let tiene \u00e1mbito de bloque\n    } catch (e) {\n        console.log(e.message);\n    }\n    try {\n        console.log(constEnBloque); // Error: const tiene \u00e1mbito de bloque\n    } catch (e) {\n        console.log(e.message);\n    }\n}\npruebaAmbitoFuncional();\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#2-tipos-de-datos-y-conversion-de-tipos","title":"2. Tipos de Datos y Conversi\u00f3n de Tipos","text":"<p>Ejercicio 2.1: Tipos de Datos B\u00e1sicos Declara variables de los siguientes tipos: string, number, boolean, array, objeto.</p> <pre><code>let cadena = \"Hola Mundo\";\nlet numero = 42;\nlet booleano = true;\nlet arreglo = [1, 2, 3, 4];\nlet objeto = { nombre: \"Juan\", edad: 25 };\n</code></pre> <p>Ejercicio 2.2: Conversi\u00f3n de Tipos Convierte los siguientes valores:  1. De n\u00famero a string. 2. De string a n\u00famero. 3. De booleano a n\u00famero.</p> <pre><code>let num = 10;\nlet str = num.toString(); // Conversi\u00f3n a string\nlet nuevoNum = Number(\"20\"); // Conversi\u00f3n a n\u00famero\nlet booleanoANum = Number(true); // Conversi\u00f3n de booleano a n\u00famero (1)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#3-asignaciones","title":"3. Asignaciones","text":"<p>Ejercicio 3.1: Asignaciones B\u00e1sicas Declara una variable y as\u00edgnale un valor. Luego, actualiza su valor usando operadores de asignaci\u00f3n como <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>.</p> <pre><code>let contador = 5;\ncontador += 3; // Ahora contador es 8\ncontador -= 2; // Ahora contador es 6\ncontador *= 2; // Ahora contador es 12\ncontador /= 3; // Ahora contador es 4\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#4-operadores","title":"4. Operadores","text":"<p>Ejercicio 4.1: Operadores Aritm\u00e9ticos Crea una funci\u00f3n que reciba dos n\u00fameros y devuelva la suma, resta, multiplicaci\u00f3n, y divisi\u00f3n de ambos.</p> <pre><code>function operacionesBasicas(a, b) {\n    console.log(\"Suma:\", a + b);\n    console.log(\"Resta:\", a - b);\n    console.log(\"Multiplicaci\u00f3n:\", a * b);\n    console.log(\"Divisi\u00f3n:\", a / b);\n}\noperacionesBasicas(10, 5);\n</code></pre> <p>Ejercicio 4.2: Operadores L\u00f3gicos Usa operadores l\u00f3gicos (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>) para evaluar condiciones.</p> <pre><code>let a = true;\nlet b = false;\n\nconsole.log(a &amp;&amp; b); // false\nconsole.log(a || b); // true\nconsole.log(!a); // false\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#5-comentarios-al-codigo","title":"5. Comentarios al C\u00f3digo","text":"<p>Ejercicio 5.1: A\u00f1ade Comentarios Escribe un c\u00f3digo b\u00e1sico y a\u00f1ade comentarios que expliquen cada paso. Usa comentarios de l\u00ednea y de bloque.</p> <pre><code>// Comentario de una l\u00ednea\nlet numero = 10; // Inicializa una variable\n\n/*\n   Este bloque de c\u00f3digo multiplica el valor de la variable por 2\n   y lo imprime en la consola.\n*/\nnumero *= 2;\nconsole.log(numero);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#6-sentencias-y-condicionales","title":"6. Sentencias y Condicionales","text":"<p>Ejercicio 6.1: Condicionales If/Else Escribe una funci\u00f3n que reciba un n\u00famero y muestre un mensaje dependiendo de si es positivo, negativo o cero.</p> <pre><code>function evaluarNumero(numero) {\n    if (numero &gt; 0) {\n        console.log(\"El n\u00famero es positivo\");\n    } else if (numero &lt; 0) {\n        console.log(\"El n\u00famero es negativo\");\n    } else {\n        console.log(\"El n\u00famero es cero\");\n    }\n}\nevaluarNumero(10);\n</code></pre> <p>Ejercicio 6.2: Switch Case Crea un programa que use <code>switch</code> para elegir una acci\u00f3n basada en el d\u00eda de la semana.</p> <pre><code>let dia = \"martes\";\n\nswitch (dia) {\n    case \"lunes\":\n        console.log(\"Es lunes, comienzo de la semana\");\n        break;\n    case \"martes\":\n        console.log(\"Es martes, sigue adelante\");\n        break;\n    case \"viernes\":\n        console.log(\"Es viernes, casi fin de semana\");\n        break;\n    default:\n        console.log(\"D\u00eda no v\u00e1lido\");\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/ejercicios/#7-bucles","title":"7. Bucles","text":"<p>Ejercicio 7.1: Bucle For Escribe un bucle <code>for</code> que imprima los n\u00fameros del 1 al 10.</p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    console.log(i);\n}\n</code></pre> <p>Ejercicio 7.2: Bucle While Usa un bucle <code>while</code> para contar hacia atr\u00e1s desde 5 hasta 1.</p> <pre><code>let contador = 5;\nwhile (contador &gt; 0) {\n    console.log(contador);\n    contador--;\n}\n</code></pre> <p>Ejercicio 7.3: Sentencias de Ruptura de Bucle Usa las sentencias <code>break</code> y <code>continue</code> en un bucle <code>for</code>.</p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i === 5) {\n        continue; // Salta la iteraci\u00f3n cuando i es 5\n    }\n    if (i === 8) {\n        break; // Termina el bucle cuando i es 8\n    }\n    console.log(i);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios-sol/","title":"Ejercicios B\u00e1sicos de JavaScript - Soluciones","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios-sol/#nivel-1-principiante","title":"Nivel 1: Principiante","text":"<ol> <li>Declaraci\u00f3n e Inicializaci\u00f3n de Variables</li> </ol> <p>Enunciado: Declara tres variables usando <code>let</code>, <code>const</code>, y <code>var</code>. Inicializa una con tu nombre, otra con tu edad, y otra con un booleano que indique si te gusta programar. Muestra los valores en la consola.</p> <pre><code>const readline = require('readline-sync');\n\nlet nombre = readline.question(\"\u00bfCu\u00e1l es tu nombre? \");\nconst edad = parseInt(readline.question(\"\u00bfCu\u00e1l es tu edad? \"));\nvar gustaProgramar = readline.keyInYN(\"\u00bfTe gusta programar? \");\n\nconsole.log(`Nombre: ${nombre}, Edad: ${edad}, \u00bfGusta Programar?: ${gustaProgramar}`);\n</code></pre> <ol> <li>Suma de Dos N\u00fameros</li> </ol> <p>Enunciado: Declara dos variables <code>a</code> y <code>b</code>, as\u00edgnales valores num\u00e9ricos y muestra en la consola la suma de ambos.</p> <pre><code>const readline = require('readline-sync');\n\nlet a = parseFloat(readline.question(\"Introduce el primer n\u00famero: \"));\nlet b = parseFloat(readline.question(\"Introduce el segundo n\u00famero: \"));\nconsole.log(`La suma es: ${a + b}`);\n</code></pre> <ol> <li>Concatenaci\u00f3n de Cadenas</li> </ol> <p>Enunciado: Declara dos variables con tu nombre y apellido. Conc\u00e1t\u00e9nalas para mostrar tu nombre completo en la consola.</p> <pre><code>const readline = require('readline-sync');\n\nlet nombre = readline.question(\"Introduce tu nombre: \");\nlet apellido = readline.question(\"Introduce tu apellido: \");\nconsole.log(`Nombre completo: ${nombre} ${apellido}`);\n</code></pre> <ol> <li>Conversi\u00f3n de Tipos</li> </ol> <p>Enunciado: Declara una variable con el valor <code>\"50\"</code>. Convierte esta variable a un n\u00famero utilizando <code>Number()</code> y muestra el tipo resultante usando <code>typeof</code>.</p> <pre><code>let valor = \"50\";\nlet numero = Number(valor);\nconsole.log(`Valor: ${numero}, Tipo: ${typeof numero}`);\n</code></pre> <ol> <li>Operaciones Matem\u00e1ticas B\u00e1sicas</li> </ol> <p>Enunciado: Declara dos variables num\u00e9ricas. Realiza y muestra en la consola la suma, resta, multiplicaci\u00f3n, y divisi\u00f3n de ambas.</p> <pre><code>const readline = require('readline-sync');\n\nlet x = parseFloat(readline.question(\"Introduce el primer n\u00famero: \"));\nlet y = parseFloat(readline.question(\"Introduce el segundo n\u00famero: \"));\nconsole.log(`Suma: ${x + y}`);\nconsole.log(`Resta: ${x - y}`);\nconsole.log(`Multiplicaci\u00f3n: ${x * y}`);\nconsole.log(`Divisi\u00f3n: ${x / y}`);\n</code></pre> <ol> <li>Condicional Simple: Mayor o Menor</li> </ol> <p>Enunciado: Pide al usuario un n\u00famero y verifica si es mayor o menor que 10. Muestra un mensaje indicando el resultado.</p> <pre><code>const readline = require('readline-sync');\n\nlet numero = parseInt(readline.question(\"Introduce un n\u00famero: \"));\nif (numero &gt; 10) {\n    console.log(\"El n\u00famero es mayor que 10.\");\n} else {\n    console.log(\"El n\u00famero es menor o igual a 10.\");\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios-sol/#nivel-2-intermedio","title":"Nivel 2: Intermedio","text":"<ol> <li>Determinar Par o Impar</li> </ol> <p>Enunciado: Escribe un programa que pida un n\u00famero al usuario y determine si es par o impar usando un condicional <code>if-else</code>.</p> <pre><code>const readline = require('readline-sync');\n\nlet numero = parseInt(readline.question(\"Introduce un n\u00famero: \"));\nif (numero % 2 === 0) {\n    console.log(\"El n\u00famero es par.\");\n} else {\n    console.log(\"El n\u00famero es impar.\");\n}\n</code></pre> <ol> <li>Contador de N\u00fameros del 1 al 10</li> </ol> <p>Enunciado: Usa un bucle <code>for</code> para imprimir los n\u00fameros del 1 al 10 en la consola.</p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    console.log(i);\n}\n</code></pre> <ol> <li>Calcular Factorial</li> </ol> <p>Enunciado: Escribe un programa que pida un n\u00famero al usuario y calcule su factorial utilizando un bucle <code>while</code>.</p> <pre><code>const readline = require('readline-sync');\n\nlet numero = parseInt(readline.question(\"Introduce un n\u00famero: \"));\nlet factorial = 1;\nwhile (numero &gt; 1) {\n    factorial *= numero;\n    numero--;\n}\nconsole.log(`El factorial es: ${factorial}`);\n</code></pre> <ol> <li> <p>Tabla de Multiplicar</p> <p>Enunciado: Pide al usuario un n\u00famero y muestra su tabla de multiplicar del 1 al 10 usando un bucle <code>for</code>.</p> <pre><code>const readline = require('readline-sync');\n\nlet numero = parseInt(readline.question(\"Introduce un n\u00famero: \"));\nfor (let i = 1; i &lt;= 10; i++) {\n    console.log(`${numero} x ${i} = ${numero * i}`);\n}\n</code></pre> </li> <li> <p>Contar Vocales en una Cadena</p> <p>Enunciado: Solicita al usuario una cadena de texto y cuenta cu\u00e1ntas vocales tiene. Imprime el resultado en la consola.</p> <pre><code>const readline = require('readline-sync');\n\nlet cadena = readline.question(\"Introduce una cadena: \");\nlet contadorVocales = (cadena.match(/[aeiouAEIOU]/g) || []).length;\nconsole.log(`La cadena tiene ${contadorVocales} vocales.`);\n</code></pre> </li> <li> <p>Array de Nombres</p> <p>Enunciado: Declara un array con tres nombres y usa un bucle <code>for</code> para imprimir cada nombre en la consola.</p> <pre><code>let nombres = [\"Ana\", \"Luis\", \"Marta\"];\nfor (let nombre of nombres) {\n    console.log(nombre);\n}\n</code></pre> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios-sol/#nivel-3-avanzado","title":"Nivel 3: Avanzado","text":"<ol> <li> <p>Calculadora B\u00e1sica</p> <p>Enunciado: Crea un programa que pida dos n\u00fameros y un operador (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) al usuario. Realiza la operaci\u00f3n y muestra el resultado en la consola.</p> <pre><code>const readline = require('readline-sync');\n\nlet num1 = parseFloat(readline.question(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(readline.question(\"Introduce el segundo n\u00famero: \"));\nlet operador = readline.question(\"Introduce un operador (+, -, *, /): \");\n\nswitch (operador) {\n    case \"+\":\n        console.log(`Resultado: ${num1 + num2}`);\n        break;\n    case \"-\":\n        console.log(`Resultado: ${num1 - num2}`);\n        break;\n    case \"*\":\n        console.log(`Resultado: ${num1 * num2}`);\n        break;\n    case \"/\":\n        console.log(`Resultado: ${num1 / num2}`);\n        break;\n    default:\n        console.log(\"Operador no v\u00e1lido.\");\n}\n</code></pre> </li> <li> <p>Contador de Palabras</p> <p>Enunciado: Solicita una frase al usuario y cuenta cu\u00e1ntas palabras tiene. Usa <code>split()</code> para separar las palabras y cuenta la longitud del array resultante.</p> <pre><code>const readline = require('readline-sync');\n\nlet frase = readline.question(\"Introduce una frase: \");\nlet palabras = frase.trim().split(/\\s+/);\nconsole.log(`La frase tiene ${palabras.length} palabras.`);\n</code></pre> </li> <li> <p>Invertir una Cadena</p> <p>Enunciado: Escribe un programa que tome una cadena ingresada por el usuario e imprima la cadena invertida.</p> <pre><code>const readline = require('readline-sync');\n\nlet cadena = readline.question(\"Introduce una cadena: \");\nlet invertida = cadena.split(\"\").reverse().join(\"\");\nconsole.log(`Cadena invertida: ${invertida}`);\n</code></pre> </li> <li> <p>Encuentra el N\u00famero Mayor</p> <p>Enunciado: Pide tres n\u00fameros al usuario y determina cu\u00e1l es el mayor utilizando condicionales.</p> <pre><code>const readline = require('readline-sync');\n\nlet num1 = parseFloat(readline.question(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(readline.question(\"Introduce el segundo n\u00famero: \"));\nlet num3 = parseFloat(readline.question(\"Introduce el tercer n\u00famero: \"));\n\nif (num1 &gt;= num2 &amp;&amp; num1 &gt;= num3) {\n    console.log(`El mayor es: ${num1}`);\n} else if (num2 &gt;= num1 &amp;&amp; num2 &gt;= num3) {\n    console.log(`El mayor es: ${num2}`);\n} else {\n    console.log(`El mayor es: ${num3}`);\n}\n</code></pre> </li> <li> <p>N\u00famero Primo</p> <p>Enunciado: Pide al usuario un n\u00famero y determina si es primo. Imprime un mensaje indicando si es primo o no.</p> <p>```javascript const readline = require('readline-sync');</p> <p>let numero = parseInt(readline.question(\"Introduce un n\u00famero: \")); let esPrimo = numero &gt; 1</p> </li> </ol> <p>;</p> <pre><code>for (let i = 2; i &lt;= Math.sqrt(numero); i++) {\n    if (numero % i === 0) {\n        esPrimo = false;\n        break;\n    }\n}\nconsole.log(esPrimo ? \"Es primo.\" : \"No es primo.\");\n```\n</code></pre> <ol> <li> <p>Clase B\u00e1sica de C\u00edrculo</p> <p>Enunciado: Crea una clase <code>C\u00edrculo</code> con un atributo <code>radio</code>. A\u00f1ade un m\u00e9todo para calcular el \u00e1rea del c\u00edrculo. Instancia la clase y muestra el \u00e1rea en la consola.</p> <pre><code>class Circulo {\n    constructor(radio) {\n        this.radio = radio;\n    }\n\n    calcularArea() {\n        return Math.PI * Math.pow(this.radio, 2);\n    }\n}\n\nconst readline = require('readline-sync');\nlet radio = parseFloat(readline.question(\"Introduce el radio del c\u00edrculo: \"));\nlet miCirculo = new Circulo(radio);\nconsole.log(`El \u00e1rea del c\u00edrculo es: ${miCirculo.calcularArea()}`);\n</code></pre> </li> <li> <p>Sistema de Notas</p> <p>Enunciado: Pide al usuario su calificaci\u00f3n y usa condicionales para determinar si aprob\u00f3 o reprob\u00f3. Usa las siguientes reglas: \u2265 60 aprobado, &lt; 60 reprobado.</p> <pre><code>const readline = require('readline-sync');\n\nlet calificacion = parseFloat(readline.question(\"Introduce tu calificaci\u00f3n: \"));\nconsole.log(calificacion &gt;= 60 ? \"Aprobado\" : \"Reprobado\");\n</code></pre> </li> <li> <p>Gesti\u00f3n de Tareas (Clases y Arrays)</p> <p>Enunciado: Crea una clase <code>Tarea</code> con atributos <code>nombre</code> y <code>completada</code>. Crea un array de tareas y a\u00f1ade m\u00e9todos para agregar, completar y mostrar tareas pendientes o completadas.</p> <pre><code>class Tarea {\n    constructor(nombre) {\n        this.nombre = nombre;\n        this.completada = false;\n    }\n\n    completar() {\n        this.completada = true;\n    }\n}\n\nconst tareas = [new Tarea(\"Estudiar\"), new Tarea(\"Comprar comida\")];\n\n// Completar la primera tarea\ntareas[0].completar();\n\n// Mostrar todas las tareas\ntareas.forEach((tarea, index) =&gt; {\n    console.log(`${index + 1}. ${tarea.nombre} - Completada: ${tarea.completada}`);\n});\n</code></pre> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios-sol/#nivel-4-desafio","title":"Nivel 4: Desaf\u00edo","text":"<ol> <li> <p>Generador de Contrase\u00f1as Aleatorias</p> <p>Enunciado: Crea una funci\u00f3n que genere contrase\u00f1as aleatorias de longitud <code>n</code> usando caracteres alfanum\u00e9ricos. Pide al usuario la longitud de la contrase\u00f1a y genera una.</p> <pre><code>const readline = require('readline-sync');\n\nfunction generarContrase\u00f1a(longitud) {\n    let caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    let contrase\u00f1a = \"\";\n    for (let i = 0; i &lt; longitud; i++) {\n        contrase\u00f1a += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\n    }\n    return contrase\u00f1a;\n}\n\nlet longitud = parseInt(readline.question(\"Introduce la longitud de la contrase\u00f1a: \"));\nconsole.log(\"Contrase\u00f1a generada: \" + generarContrase\u00f1a(longitud));\n</code></pre> </li> <li> <p>Calculadora de Edad</p> <p>Enunciado: Pide al usuario su fecha de nacimiento y calcula su edad actual. Usa la clase <code>Date</code> para realizar los c\u00e1lculos.</p> <pre><code>const readline = require('readline-sync');\n\nlet fechaNacimiento = readline.question(\"Introduce tu fecha de nacimiento (YYYY-MM-DD): \");\nlet fecha = new Date(fechaNacimiento);\nlet edad = new Date().getFullYear() - fecha.getFullYear();\nconsole.log(\"Tu edad es: \" + edad + \" a\u00f1os.\");\n</code></pre> </li> <li> <p>Fibonacci con Bucle</p> <p>Enunciado: Crea un programa que genere la secuencia de Fibonacci hasta el d\u00e9cimo t\u00e9rmino usando un bucle.</p> <pre><code>let a = 0, b = 1, siguiente;\nconsole.log(a);\nfor (let i = 1; i &lt; 10; i++) {\n    console.log(b);\n    siguiente = a + b;\n    a = b;\n    b = siguiente;\n}\n</code></pre> </li> <li> <p>Ordenar N\u00fameros de un Array</p> <p>Enunciado: Crea un array con n\u00fameros desordenados y escribe un programa que los ordene de menor a mayor sin usar el m\u00e9todo <code>.sort()</code>.</p> <pre><code>let numeros = [5, 2, 9, 1, 7];\nfor (let i = 0; i &lt; numeros.length; i++) {\n    for (let j = 0; j &lt; numeros.length - i - 1; j++) {\n        if (numeros[j] &gt; numeros[j + 1]) {\n            [numeros[j], numeros[j + 1]] = [numeros[j + 1], numeros[j]];\n        }\n    }\n}\nconsole.log(numeros);\n</code></pre> </li> <li> <p>Adivina el N\u00famero</p> <p>Enunciado: Crea un juego donde la m\u00e1quina elija un n\u00famero aleatorio entre 1 y 100. El usuario debe adivinarlo con pistas como \u201cmayor\u201d o \u201cmenor\u201d hasta acertar.</p> <pre><code>const readline = require('readline-sync');\n\nlet numeroSecreto = Math.floor(Math.random() * 100) + 1;\nlet adivinanza;\n\nwhile (adivinanza !== numeroSecreto) {\n    adivinanza = parseInt(readline.question(\"Adivina el n\u00famero entre 1 y 100: \"));\n    if (adivinanza &gt; numeroSecreto) {\n        console.log(\"El n\u00famero es menor.\");\n    } else if (adivinanza &lt; numeroSecreto) {\n        console.log(\"El n\u00famero es mayor.\");\n    } else {\n        console.log(\"\u00a1Correcto! Adivinaste el n\u00famero.\");\n    }\n}\n</code></pre> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios/","title":"Ejercicios B\u00e1sicos de JavaScript","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios/#nivel-1-principiante","title":"Nivel 1: Principiante","text":"<ol> <li> <p>Declaraci\u00f3n e Inicializaci\u00f3n de Variables</p> <ul> <li>Declara tres variables usando <code>let</code>, <code>const</code>, y <code>var</code>. Inicializa una con tu nombre, otra con tu edad, y otra con un booleano que indique si te gusta programar. Muestra los valores en la consola.</li> </ul> </li> <li> <p>Suma de Dos N\u00fameros</p> <ul> <li>Declara dos variables <code>a</code> y <code>b</code>, as\u00edgnales valores num\u00e9ricos y muestra en la consola la suma de ambos.</li> </ul> </li> <li> <p>Concatenaci\u00f3n de Cadenas</p> <ul> <li>Declara dos variables con tu nombre y apellido. Conc\u00e1t\u00e9nalas para mostrar tu nombre completo en la consola.</li> </ul> </li> <li> <p>Conversi\u00f3n de Tipos</p> <ul> <li>Declara una variable con el valor <code>\"50\"</code>. Convierte esta variable a un n\u00famero utilizando <code>Number()</code> y muestra el tipo resultante usando <code>typeof</code>.</li> </ul> </li> <li> <p>Operaciones Matem\u00e1ticas B\u00e1sicas</p> <ul> <li>Declara dos variables num\u00e9ricas. Realiza y muestra en la consola la suma, resta, multiplicaci\u00f3n, y divisi\u00f3n de ambas.</li> </ul> </li> <li> <p>Condicional Simple: Mayor o Menor</p> <ul> <li>Pide al usuario un n\u00famero y verifica si es mayor o menor que 10. Muestra un mensaje indicando el resultado.</li> </ul> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios/#nivel-2-intermedio","title":"Nivel 2: Intermedio","text":"<ol> <li> <p>Determinar Par o Impar</p> <ul> <li>Escribe un programa que pida un n\u00famero al usuario y determine si es par o impar usando un condicional <code>if-else</code>.</li> </ul> </li> <li> <p>Contador de N\u00fameros del 1 al 10</p> <ul> <li>Usa un bucle <code>for</code> para imprimir los n\u00fameros del 1 al 10 en la consola.</li> </ul> </li> <li> <p>Calcular Factorial</p> <ul> <li>Escribe un programa que pida un n\u00famero al usuario y calcule su factorial utilizando un bucle <code>while</code>.</li> </ul> </li> <li> <p>Tabla de Multiplicar</p> <ul> <li>Pide al usuario un n\u00famero y muestra su tabla de multiplicar del 1 al 10 usando un bucle <code>for</code>.</li> </ul> </li> <li> <p>Contar Vocales en una Cadena</p> <ul> <li>Solicita al usuario una cadena de texto y cuenta cu\u00e1ntas vocales tiene. Imprime el resultado en la consola.</li> </ul> </li> <li> <p>Array de Nombres</p> <ul> <li>Declara un array con tres nombres y usa un bucle <code>for</code> para imprimir cada nombre en la consola.</li> </ul> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios/#nivel-3-avanzado","title":"Nivel 3: Avanzado","text":"<ol> <li> <p>Calculadora B\u00e1sica</p> <ul> <li>Crea un programa que pida dos n\u00fameros y un operador (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) al usuario. Realiza la operaci\u00f3n y muestra el resultado en la consola.</li> </ul> </li> <li> <p>Contador de Palabras</p> <ul> <li>Solicita una frase al usuario y cuenta cu\u00e1ntas palabras tiene. Usa <code>split()</code> para separar las palabras y cuenta la longitud del array resultante.</li> </ul> </li> <li> <p>Invertir una Cadena</p> <ul> <li>Escribe un programa que tome una cadena ingresada por el usuario e imprima la cadena invertida.</li> </ul> </li> <li> <p>Encuentra el N\u00famero Mayor</p> <ul> <li>Pide tres n\u00fameros al usuario y determina cu\u00e1l es el mayor utilizando condicionales.</li> </ul> </li> <li> <p>N\u00famero Primo</p> <ul> <li>Pide al usuario un n\u00famero y determina si es primo. Imprime un mensaje indicando si es primo o no.</li> </ul> </li> <li> <p>Clase B\u00e1sica de C\u00edrculo</p> <ul> <li>Crea una clase <code>C\u00edrculo</code> con un atributo <code>radio</code>. A\u00f1ade un m\u00e9todo para calcular el \u00e1rea del c\u00edrculo. Instancia la clase y muestra el \u00e1rea en la consola.</li> </ul> </li> <li> <p>Sistema de Notas</p> <ul> <li>Pide al usuario su calificaci\u00f3n y usa condicionales para determinar si aprob\u00f3 o reprob\u00f3. Usa las siguientes reglas: \u2265 60 aprobado, &lt; 60 reprobado.</li> </ul> </li> <li> <p>Gesti\u00f3n de Tareas (Clases y Arrays)</p> <ul> <li>Crea una clase <code>Tarea</code> con atributos <code>nombre</code> y <code>completada</code>. Crea un array de tareas y a\u00f1ade m\u00e9todos para agregar, completar y mostrar tareas pendientes o completadas.</li> </ul> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/zcuadernoejercicios/#nivel-4-desafio","title":"Nivel 4: Desaf\u00edo","text":"<ol> <li> <p>Generador de Contrase\u00f1as Aleatorias</p> <ul> <li>Crea una funci\u00f3n que genere contrase\u00f1as aleatorias de longitud <code>n</code> usando caracteres alfanum\u00e9ricos. Pide al usuario la longitud de la contrase\u00f1a y genera una.</li> </ul> </li> <li> <p>Calculadora de Edad</p> <ul> <li>Pide al usuario su fecha de nacimiento y calcula su edad actual. Usa la clase <code>Date</code> para realizar los c\u00e1lculos.</li> </ul> </li> <li> <p>Fibonacci con Bucle</p> <ul> <li>Crea un programa que genere la secuencia de Fibonacci hasta el d\u00e9cimo t\u00e9rmino usando un bucle.</li> </ul> </li> <li> <p>Ordenar N\u00fameros de un Array</p> <ul> <li>Crea un array con n\u00fameros desordenados y escribe un programa que los ordene de menor a mayor sin usar el m\u00e9todo <code>.sort()</code>.</li> </ul> </li> <li> <p>Adivina el N\u00famero</p> <ul> <li>Crea un juego donde la m\u00e1quina elija un n\u00famero aleatorio entre 1 y 100. El usuario debe adivinarlo con pistas como \u201cmayor\u201d o \u201cmenor\u201d hasta acertar.</li> </ul> </li> <li> <p>Sistema de Gesti\u00f3n de Libros (Clases)</p> <ul> <li>Crea una clase <code>Libro</code> con atributos <code>t\u00edtulo</code>, <code>autor</code> y <code>a\u00f1o</code>. A\u00f1ade m\u00e9todos para mostrar la informaci\u00f3n del libro y gestionar una biblioteca a\u00f1adiendo, eliminando y mostrando libros.</li> </ul> </li> <li> <p>Simulador de Compra de Tienda</p> <ul> <li>Crea un programa donde el usuario ingrese el precio de varios productos y calcule el total a pagar con un 10% de descuento si la compra supera los 100 euros.</li> </ul> </li> <li> <p>Calculadora de Promedio de Calificaciones</p> <ul> <li>Pide al usuario ingresar varias calificaciones y calcula el promedio. Muestra si aprob\u00f3 o reprob\u00f3 bas\u00e1ndose en el promedio calculado.</li> </ul> </li> <li> <p>Generar N\u00fameros Aleatorios sin Repetir</p> <ul> <li>Escribe un programa que genere 5 n\u00fameros aleatorios entre 1 y 20 sin que se repitan y los muestre en pantalla.</li> </ul> </li> <li> <p>Sistema de Reservas de Asientos (Matrices)</p> <ul> <li>Crea una matriz que simule un sistema de reservas de asientos en un teatro. Permite al usuario reservar, cancelar y ver el estado de los asientos.</li> </ul> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/enunciado/","title":"Simulador de Batallas Pok\u00e9mon en JavaScript","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/enunciado/#descripcion-del-proyecto","title":"Descripci\u00f3n del Proyecto","text":"<p>Este proyecto consiste en desarrollar un simulador de batallas Pok\u00e9mon utilizando JavaScript, recreando una experiencia de combate por turnos entre un jugador y un oponente controlado por la m\u00e1quina. Los Pok\u00e9mon tienen caracter\u00edsticas como nombre, tipo, puntos de vida (HP), ataque, defensa y una lista de movimientos \u00fanicos. Cada turno, el jugador puede optar por atacar o curarse, mientras que las acciones de la m\u00e1quina son completamente aleatorias.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/enunciado/#objetivos-especificos","title":"Objetivos Espec\u00edficos","text":"<ol> <li> <p>Dise\u00f1o de Clases y Estructura del C\u00f3digo:</p> <ul> <li>Clase <code>Pokemon</code>: Define los atributos esenciales de un Pok\u00e9mon:<ul> <li>Atributos: Nombre, tipo, HP actual, HP m\u00e1ximo (<code>hpMax</code>), ataque, defensa, y una lista de movimientos (<code>Move</code>).</li> <li>M\u00e9todo <code>attack()</code>: Permite al Pok\u00e9mon atacar seleccionando un movimiento de su lista y calculando el da\u00f1o infligido.</li> <li>M\u00e9todo <code>heal()</code>: Cura al Pok\u00e9mon un 50% de su HP m\u00e1ximo, y solo puede usarse una vez por combate.</li> </ul> </li> <li>Clase <code>Move</code>: Representa los movimientos de ataque con atributos como nombre y da\u00f1o base.</li> <li>Enumeraci\u00f3n <code>Type</code>: Enumera los diferentes tipos de Pok\u00e9mon, como Agua, Fuego, Planta, entre otros, para implementar afinidades y debilidades futuras.</li> </ul> </li> <li> <p>Mec\u00e1nica de Batalla:</p> <ul> <li>Implementar un sistema de turnos donde el jugador puede elegir entre atacar o curarse, y las acciones de la m\u00e1quina sean completamente aleatorias.</li> <li>Calcular el da\u00f1o basado en una f\u00f3rmula que considere las estad\u00edsticas de ataque y defensa de los Pok\u00e9mon involucrados.</li> <li>Incluir la posibilidad de curaci\u00f3n para ambos Pok\u00e9mon, restringi\u00e9ndola a una vez por combate.</li> </ul> </li> <li> <p>Interacci\u00f3n del Usuario y Flujo de Combate:</p> <ul> <li>Utilizar la librer\u00eda <code>readline-sync</code> para recibir las entradas del jugador y mostrar los resultados de cada acci\u00f3n.</li> <li>Estructurar el flujo del combate para mantener la claridad en la presentaci\u00f3n de cada turno y las acciones realizadas.</li> </ul> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/enunciado/#formula-para-calcular-el-dano","title":"F\u00f3rmula para Calcular el Da\u00f1o","text":"<p>El da\u00f1o infligido por un ataque se calcula usando una f\u00f3rmula que considera las estad\u00edsticas de ataque del atacante, la defensa del defensor y el da\u00f1o base del movimiento seleccionado. La f\u00f3rmula es la siguiente:</p> <pre><code>Damage = (Attack / Defense) * Move Damage * Random Factor\n</code></pre> <ul> <li>Attack: El valor de la estad\u00edstica de ataque del Pok\u00e9mon atacante.</li> <li>Defense: El valor de la estad\u00edstica de defensa del Pok\u00e9mon defensor.</li> <li>Move Damage: El valor base de da\u00f1o del movimiento utilizado.</li> <li>Random Factor: Un factor aleatorio entre 0.85 y 1.0 que introduce variabilidad en los ataques, simulando la inexactitud y el elemento de suerte presente en los juegos originales.</li> </ul> <p>La f\u00f3rmula asegura que el da\u00f1o nunca sea negativo y siempre al menos 1 punto para que cada ataque tenga un impacto m\u00ednimo.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/enunciado/#mecanica-de-las-acciones-de-la-maquina","title":"Mec\u00e1nica de las Acciones de la M\u00e1quina","text":"<ul> <li>Acciones Aleatorias: La IA selecciona sus acciones de manera completamente aleatoria en cada turno, eligiendo entre atacar o curarse si no lo ha hecho anteriormente.</li> <li>Ataque Aleatorio: Selecciona un movimiento al azar de su lista de ataques y lo utiliza contra el Pok\u00e9mon del jugador.</li> <li>Curaci\u00f3n Aleatoria: Si la IA decide curarse, esta acci\u00f3n solo puede realizarse una vez por combate, recuperando un 50% de su HP m\u00e1ximo.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/enunciado/#interaccion-del-jugador","title":"Interacci\u00f3n del Jugador","text":"<ul> <li>El jugador puede elegir entre dos opciones en cada turno:</li> <li>Atacar: Selecciona uno de los movimientos disponibles de su Pok\u00e9mon y ataca al oponente.</li> <li>Curarse: El jugador puede curar a su Pok\u00e9mon una vez durante el combate, recuperando la mitad de su HP m\u00e1ximo.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/enunciado/#diagrama-de-flujo-del-combate","title":"Diagrama de Flujo del Combate","text":"<p>A continuaci\u00f3n, se presenta un diagrama de flujo utilizando Mermaid que ilustra el proceso de toma de decisiones en cada turno del combate.</p> <pre><code>graph TD\n    A[Inicio del Combate] --&gt; B[Turno del Jugador]\n    B --&gt; C{\u00bfQu\u00e9 acci\u00f3n desea realizar?}\n    C --&gt;|Atacar| D[Selecciona Movimiento]\n    D --&gt; E[Calcula Da\u00f1o y Reduce HP del Oponente]\n    E --&gt; F[Revisa si el Oponente ha Sido Derrotado]\n    C --&gt;|Curarse| G[Recupera 50% del HP M\u00e1ximo]\n    G --&gt; H[Fin del Turno del Jugador]\n    F --&gt;|Oponente Derrotado| I[Fin del Combate - Jugador Gana]\n    F --&gt;|Oponente No Derrotado| H\n    H --&gt; J[Turno de la M\u00e1quina]\n    J --&gt; K{\u00bfAcci\u00f3n Aleatoria de la M\u00e1quina?}\n    K --&gt;|Atacar| L[Selecciona Movimiento Aleatorio]\n    L --&gt; M[Calcula Da\u00f1o y Reduce HP del Jugador]\n    M --&gt; N[Revisa si el Jugador ha Sido Derrotado]\n    K --&gt;|Curarse| O[Recupera 50% del HP M\u00e1ximo]\n    O --&gt; P[Fin del Turno de la M\u00e1quina]\n    N --&gt;|Jugador Derrotado| Q[Fin del Combate - M\u00e1quina Gana]\n    N --&gt;|Jugador No Derrotado| B</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/enunciado/#expansiones-posibles-descripcion","title":"Expansiones Posibles: Descripci\u00f3n","text":"<ol> <li> <p>Aplicar Afinidades de Tipos en el C\u00e1lculo del Da\u00f1o:     Incorporar las ventajas y desventajas de los tipos de Pok\u00e9mon en el c\u00e1lculo del da\u00f1o, haciendo que algunos ataques sean m\u00e1s o menos efectivos seg\u00fan el tipo del oponente, lo cual a\u00f1ade una capa estrat\u00e9gica a los combates.</p> </li> <li> <p>Realizar Combate Completo de Pok\u00e9mon 3vs3, 6vs6, etc.:     Permitir batallas por equipos donde varios Pok\u00e9mon se enfrentan en secuencia, gestionando los recursos de varios miembros del equipo, lo que aumenta la complejidad y estrategia del juego.</p> </li> <li> <p>Introducir Niveles Aleatorios en Pok\u00e9mon y Modificar el C\u00e1lculo del Da\u00f1o de Acuerdo a Estos:     Asignar niveles a los Pok\u00e9mon, ajustando sus estad\u00edsticas y modificando el da\u00f1o basado en la diferencia de niveles entre los combatientes, lo que a\u00f1ade un componente de progresi\u00f3n y desaf\u00edo.</p> </li> <li> <p>Posibilidad de Fallar un Movimiento:     A\u00f1adir una probabilidad de fallo en los movimientos, incorporando un elemento de riesgo y variabilidad en cada ataque, lo que incrementa la estrategia y tensi\u00f3n en los combates.</p> </li> </ol>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/","title":"readlineSync","text":"<p>Synchronous Readline for interactively running to have a conversation with the user via a console(TTY).</p> <p>readlineSync tries to let your script have a conversation with the user via a console, even when the input/output stream is redirected like <code>your-script &lt;foo.dat &gt;bar.log</code>.</p> Basic OptionsUtility MethodsPlaceholders <ul> <li>Simple case:</li> </ul> <pre><code>var readlineSync = require('readline-sync');\n\n// Wait for user's response.\nvar userName = readlineSync.question('May I have your name? ');\nconsole.log('Hi ' + userName + '!');\n\n// Handle the secret text (e.g. password).\nvar favFood = readlineSync.question('What is your favorite food? ', {\n  hideEchoBack: true // The typed text on screen is hidden by `*` (default).\n});\nconsole.log('Oh, ' + userName + ' loves ' + favFood + '!');\n</code></pre> <pre><code>May I have your name? CookieMonster\nHi CookieMonster!\nWhat is your favorite food? ****\nOh, CookieMonster loves tofu!\n</code></pre> <ul> <li>Get the user's response by a single key without the Enter key:</li> </ul> <pre><code>var readlineSync = require('readline-sync');\nif (readlineSync.keyInYN('Do you want this module?')) {\n  // 'Y' key was pressed.\n  console.log('Installing now...');\n  // Do something...\n} else {\n  // Another key was pressed.\n  console.log('Searching another...');\n  // Do something...\n}\n</code></pre> <ul> <li>Let the user choose an item from a list:</li> </ul> <pre><code>var readlineSync = require('readline-sync'),\n  animals = ['Lion', 'Elephant', 'Crocodile', 'Giraffe', 'Hippo'],\n  index = readlineSync.keyInSelect(animals, 'Which animal?');\nconsole.log('Ok, ' + animals[index] + ' goes to your room.');\n</code></pre> <pre><code>[1] Lion\n[2] Elephant\n[3] Crocodile\n[4] Giraffe\n[5] Hippo\n[0] CANCEL\n\nWhich animal? [1...5 / 0]: 2\nOk, Elephant goes to your room.\n</code></pre> <ul> <li>An UI like the Range Slider: (Press <code>Z</code> or <code>X</code> key to change a value, and Space Bar to exit)</li> </ul> <pre><code>var readlineSync = require('readline-sync'),\n  MAX = 60, MIN = 0, value = 30, key;\nconsole.log('\\n\\n' + (new Array(20)).join(' ') +\n  '[Z] &lt;- -&gt; [X]  FIX: [SPACE]\\n');\nwhile (true) {\n  console.log('\\x1B[1A\\x1B[K|' +\n    (new Array(value + 1)).join('-') + 'O' +\n    (new Array(MAX - value + 1)).join('-') + '| ' + value);\n  key = readlineSync.keyIn('',\n    {hideEchoBack: true, mask: '', limit: 'zx '});\n  if (key === 'z') { if (value &gt; MIN) { value--; } }\n  else if (key === 'x') { if (value &lt; MAX) { value++; } }\n  else { break; }\n}\nconsole.log('\\nA value the user requested: ' + value);\n</code></pre> <p></p> <ul> <li>Handle the commands repeatedly, such as the shell interface:</li> </ul> <pre><code>readlineSync.promptCLLoop({\n  add: function(target, into) {\n    console.log(target + ' is added into ' + into + '.');\n    // Do something...\n  },\n  remove: function(target) {\n    console.log(target + ' is removed.');\n    // Do something...\n  },\n  bye: function() { return true; }\n});\nconsole.log('Exited');\n</code></pre> <pre><code>&gt; add pic01.png archive\npic01.png is added into archive.\n&gt; delete pic01.png\nRequested command is not available.\n&gt; remove pic01.png\npic01.png is removed.\n&gt; bye\nExited\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#installation","title":"Installation","text":"<pre><code>npm install readline-sync\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#quick-start","title":"Quick Start","text":"<p>How does the user input?</p> <ul> <li>Type a reply to a question, and press the Enter key (A)</li> <li>Type a keyword like a command in prompt, and press the Enter key (B)</li> <li>Press a single key without the Enter key (C)</li> </ul> <p>(A) What does the user input?</p> <ul> <li>E-mail address</li> <li>New password</li> <li>Integer number</li> <li>Floating-point number</li> <li>Local file/directory path</li> <li>Others</li> </ul> <p>(B) What does your script do?</p> <ul> <li>Receive a parsed command-name and arguments</li> <li>Receive an input repeatedly</li> <li>Receive a parsed command-name and arguments repeatedly</li> <li>Receive an input with prompt that is similar to that of the user's shell</li> <li>Others</li> </ul> <p>(C) What does the user do?</p> <ul> <li>Say \"Yes\" or \"No\"</li> <li>Say \"Yes\" or \"No\" explicitly</li> <li>Make the running of script continue when ready</li> <li>Choose an item from a list</li> <li>Others</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#basic-methods","title":"Basic Methods","text":"<p>These are used to control details of the behavior. It is recommended to use the Utility Methods instead of Basic Methods if it satisfy your request.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#question","title":"<code>question</code>","text":"<pre><code>answer = readlineSync.question([query[, options]])\n</code></pre> <p>Display a <code>query</code> to the user if it's specified, and then return the input from the user after it has been typed and the Enter key was pressed. You can specify an <code>options</code> (see Basic Options) to control the behavior (e.g. refusing unexpected input, avoiding trimming white spaces, etc.). If you let the user input the secret text (e.g. password), you should consider <code>hideEchoBack</code> option.</p> <p>The <code>query</code> may be string, or may not be (e.g. number, Date, Object, etc.). It is converted to string (i.e. <code>toString</code> method is called) before it is displayed. (see Note also) It can include the placeholders.</p> <p>For example:</p> <pre><code>program = readlineSync.question('Which program starts do you want? ', {\n  defaultInput: 'firefox'\n});\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#prompt","title":"<code>prompt</code>","text":"<pre><code>input = readlineSync.prompt([options])\n</code></pre> <p>Display a prompt-sign (see <code>prompt</code> option) to the user, and then return the input from the user after it has been typed and the Enter key was pressed. You can specify an <code>options</code> (see Basic Options) to control the behavior (e.g. refusing unexpected input, avoiding trimming white spaces, etc.).</p> <p>For example:</p> <pre><code>while (true) {\n  command = readlineSync.prompt();\n  // Do something...\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#keyin","title":"<code>keyIn</code>","text":"<pre><code>pressedKey = readlineSync.keyIn([query[, options]])\n</code></pre> <p>Display a <code>query</code> to the user if it's specified, and then return a character as a key immediately it was pressed by the user, without pressing the Enter key. Note that the user has no chance to change the input. You can specify an <code>options</code> (see Basic Options) to control the behavior (e.g. ignoring keys except some keys, checking target key, etc.).</p> <p>The <code>query</code> is handled the same as that of the <code>question</code> method.</p> <p>For example:</p> <pre><code>menuId = readlineSync.keyIn('Hit 1...5 key: ', {limit: '$&lt;1-5&gt;'});\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#setdefaultoptions","title":"<code>setDefaultOptions</code>","text":"<pre><code>currentDefaultOptions = readlineSync.setDefaultOptions([newDefaultOptions])\n</code></pre> <p>Change the Default Options to the values of properties of <code>newDefaultOptions</code> Object. All it takes is to specify options that you want change, because unspecified options are not updated.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#basic-options","title":"Basic Options","text":"<p><code>prompt</code>, <code>hideEchoBack</code>, <code>mask</code>, <code>limit</code>, <code>limitMessage</code>, <code>defaultInput</code>, <code>trueValue</code>, <code>falseValue</code>, <code>caseSensitive</code>, <code>keepWhitespace</code>, <code>encoding</code>, <code>bufferSize</code>, <code>print</code>, <code>history</code>, <code>cd</code></p> <p>An <code>options</code> Object can be specified to the methods to control the behavior of readlineSync. The options that were not specified to the methods are got from the Default Options. You can change the Default Options by <code>setDefaultOptions</code> method anytime, and it is kept until a current process is exited. Specify the options that are often used to the Default Options, and specify temporary options to the methods.</p> <p>For example:</p> <pre><code>readlineSync.setDefaultOptions({limit: ['green', 'yellow', 'red']});\na1 = readlineSync.question('Which color of signal? '); // Input is limited to 3 things.\na2 = readlineSync.question('Which color of signal? '); // It's limited yet.\na3 = readlineSync.question('What is your favorite color? ', {limit: null}); // It's unlimited temporarily.\na4 = readlineSync.question('Which color of signal? '); // It's limited again.\nreadlineSync.setDefaultOptions({limit: ['beef', 'chicken']});\na5 = readlineSync.question('Beef or Chicken? ');        // Input is limited to new 2 things.\na6 = readlineSync.question('And you? ');                // It's limited to 2 things yet.\n</code></pre> <p>The Object as <code>options</code> can have following properties.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#prompt_1","title":"<code>prompt</code>","text":"<p>For <code>prompt*</code> methods only Type: string or others Default: <code>'&gt; '</code></p> <p>Set the prompt-sign that is displayed to the user by <code>prompt*</code> methods. For example you see <code>&gt;</code> that is Node.js's prompt-sign when you run <code>node</code> on the command line. This may be string, or may not be (e.g. number, Date, Object, etc.). It is converted to string every time (i.e. <code>toString</code> method is called) before it is displayed. (see Note also) It can include the placeholders.</p> <p>For example:</p> <pre><code>readlineSync.setDefaultOptions({prompt: '$ '});\n</code></pre> <pre><code>// Display the memory usage always.\nreadlineSync.setDefaultOptions({\n  prompt: { // Simple Object that has toString method.\n    toString: function() {\n      var rss = process.memoryUsage().rss;\n      return '[' + (rss &gt; 1024 ? Math.round(rss / 1024) + 'k' : rss) + 'b]$ ';\n    }\n  }\n});\n</code></pre> <pre><code>[13148kb]$ foo\n[13160kb]$ bar\n[13200kb]$\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#hideechoback","title":"<code>hideEchoBack</code>","text":"<p>Type: boolean Default: <code>false</code></p> <p>If <code>true</code> is specified, hide the secret text (e.g. password) which is typed by user on screen by the mask characters (see <code>mask</code> option).</p> <p>For example:</p> <pre><code>password = readlineSync.question('PASSWORD: ', {hideEchoBack: true});\nconsole.log('Login ...');\n</code></pre> <pre><code>PASSWORD: ********\nLogin ...\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#mask","title":"<code>mask</code>","text":"<p>Type: string Default: <code>'*'</code></p> <p>Set the mask characters that are shown instead of the secret text (e.g. password) when <code>true</code> is specified to <code>hideEchoBack</code> option. If you want to show nothing, specify <code>''</code>. (But it might be not user friendly in some cases.) Note: In some cases (e.g. when the input stream is redirected on Windows XP), <code>'*'</code> or <code>''</code> might be used whether other one is specified.</p> <p>For example:</p> <pre><code>secret = readlineSync.question('Please whisper sweet words: ', {\n  hideEchoBack: true,\n  mask: require('chalk').magenta('\\u2665')\n});\n</code></pre> <p></p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#limit","title":"<code>limit</code>","text":"<p>Limit the user's input. The usage differ depending on the method.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#for-question-and-prompt-methods","title":"For <code>question*</code> and <code>prompt*</code> methods","text":"<p>Type: string, number, RegExp, function or Array Default: <code>[]</code></p> <p>Accept only the input that matches value that is specified to this. If the user input others, display a string that is specified to <code>limitMessage</code> option, and wait for reinput.</p> <ul> <li>The string is compared with the input. It is affected by <code>caseSensitive</code> option.</li> <li>The number is compared with the input that is converted to number by <code>parseFloat()</code>. For example, it interprets <code>'   3.14   '</code>, <code>'003.1400'</code>, <code>'314e-2'</code> and <code>'3.14PI'</code> as <code>3.14</code>. And it interprets <code>'005'</code>, <code>'5files'</code>, <code>'5kb'</code> and <code>'5px'</code> as <code>5</code>.</li> <li>The RegExp tests the input.</li> <li>The function that returns a boolean to indicate whether it matches is called with the input.</li> </ul> <p>One of above or an Array that includes multiple things (or Array includes Array) can be specified.</p> <p>For example:</p> <pre><code>command = readlineSync.prompt({limit: ['add', 'remove', /^clear( all)?$/]});\n// ** But `promptCL` method should be used instead of this. **\n</code></pre> <pre><code>file = readlineSync.question('Text File: ', {limit: /\\.txt$/i});\n// ** But `questionPath` method should be used instead of this. **\n</code></pre> <pre><code>ip = readlineSync.question('IP Address: ', {limit: function(input) {\n  return require('net').isIP(input); // Valid IP Address\n}});\n</code></pre> <pre><code>availableActions = [];\nif (!blockExists())  { availableActions.push('jump'); }\nif (isLarge(place))  { availableActions.push('run'); }\nif (isNew(shoes))    { availableActions.push('kick'); }\nif (isNearby(enemy)) { availableActions.push('punch'); }\naction = readlineSync.prompt({limit: availableActions});\n// ** But `promptCL` method should be used instead of this. **\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#for-keyin-method","title":"For <code>keyIn*</code> method","text":"<p>Type: string, number or Array Default: <code>[]</code></p> <p>Accept only the key that matches value that is specified to this, ignore others. Specify the characters as the key. All strings or Array of those are decomposed into single characters. For example, <code>'abcde'</code> or <code>['a', 'bc', ['d', 'e']]</code> are the same as <code>['a', 'b', 'c', 'd', 'e']</code>. These strings are compared with the input. It is affected by <code>caseSensitive</code> option.</p> <p>The placeholders like <code>'$&lt;a-e&gt;'</code> are replaced to an Array that is the character list like <code>['a', 'b', 'c', 'd', 'e']</code>.</p> <p>For example:</p> <pre><code>direction = readlineSync.keyIn('Left or Right? ', {limit: 'lr'}); // 'l' or 'r'\n</code></pre> <pre><code>dice = readlineSync.keyIn('Roll the dice, What will the result be? ',\n  {limit: '$&lt;1-6&gt;'}); // range of '1' to '6'\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#limitmessage","title":"<code>limitMessage</code>","text":"<p>For <code>question*</code> and <code>prompt*</code> methods only Type: string Default: <code>'Input another, please.$&lt;( [)limit(])&gt;'</code></p> <p>Display this to the user when the <code>limit</code> option is specified and the user input others. The placeholders can be included.</p> <p>For example:</p> <pre><code>file = readlineSync.question('Name of Text File: ', {\n  limit: /\\.txt$/i,\n  limitMessage: 'Sorry, $&lt;lastInput&gt; is not text file.'\n});\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#defaultinput","title":"<code>defaultInput</code>","text":"<p>For <code>question*</code> and <code>prompt*</code> methods only Type: string Default: <code>''</code></p> <p>If the user input empty text (i.e. pressed the Enter key only), return this.</p> <p>For example:</p> <pre><code>lang = readlineSync.question('Which language? ', {defaultInput: 'javascript'});\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#truevalue-falsevalue","title":"<code>trueValue</code>, <code>falseValue</code>","text":"<p>Type: string, number, RegExp, function or Array Default: <code>[]</code></p> <p>If the input matches <code>trueValue</code>, return <code>true</code>. If the input matches <code>falseValue</code>, return <code>false</code>. In any other case, return the input.</p> <ul> <li>The string is compared with the input. It is affected by <code>caseSensitive</code> option.</li> <li>The number is compared with the input that is converted to number by <code>parseFloat()</code>. For example, it interprets <code>'   3.14   '</code>, <code>'003.1400'</code>, <code>'314e-2'</code> and <code>'3.14PI'</code> as <code>3.14</code>. And it interprets <code>'005'</code>, <code>'5files'</code>, <code>'5kb'</code> and <code>'5px'</code> as <code>5</code>. Note that in <code>keyIn*</code> method, the input is every time one character (i.e. the number that is specified must be an integer within the range of <code>0</code> to <code>9</code>).</li> <li>The RegExp tests the input.</li> <li>The function that returns a boolean to indicate whether it matches is called with the input.</li> </ul> <p>One of above or an Array that includes multiple things (or Array includes Array) can be specified.</p> <p>For example:</p> <pre><code>answer = readlineSync.question('How do you like it? ', {\n  trueValue: ['yes', 'yeah', 'yep'],\n  falseValue: ['no', 'nah', 'nope']\n});\nif (answer === true) {\n  console.log('Let\\'s go!');\n} else if (answer === false) {\n  console.log('Oh... It\\'s ok...');\n} else {\n  console.log('Sorry. What does \"' + answer + '\" you said mean?');\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#casesensitive","title":"<code>caseSensitive</code>","text":"<p>Type: boolean Default: <code>false</code></p> <p>By default, the string comparisons are case-insensitive (i.e. <code>a</code> equals <code>A</code>). If <code>true</code> is specified, it is case-sensitive, the cases are not ignored (i.e. <code>a</code> is different from <code>A</code>). It affects: <code>limit</code>, <code>trueValue</code>, <code>falseValue</code>, some placeholders, and some Utility Methods.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#keepwhitespace","title":"<code>keepWhitespace</code>","text":"<p>For <code>question*</code> and <code>prompt*</code> methods only Type: boolean Default: <code>false</code></p> <p>By default, remove the leading and trailing white spaces from the input text. If <code>true</code> is specified, don't remove those.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#encoding","title":"<code>encoding</code>","text":"<p>Type: string Default: <code>'utf8'</code></p> <p>Set the encoding method of the input and output.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#buffersize","title":"<code>bufferSize</code>","text":"<p>For <code>question*</code> and <code>prompt*</code> methods only Type: number Default: <code>1024</code></p> <p>When readlineSync reads from a console directly (without external program), use a size <code>bufferSize</code> buffer. Even if the input by user exceeds it, it's usually no problem, because the buffer is used repeatedly. But some platforms's (e.g. Windows) console might not accept input that exceeds it. And set an enough size. Note that this might be limited by version of Node.js and environment running your script (Big buffer size is usually not required). (See also: issue, PR)</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#print","title":"<code>print</code>","text":"<p>Type: function or <code>undefined</code> Default: <code>undefined</code></p> <p>Call the specified function with every output. The function is given two arguments, <code>display</code> as an output text, and a value of <code>encoding</code> option.</p> <p>For example:</p> <ul> <li>Pass the plain texts to the Logger (e.g. log4js), after clean the colored texts.</li> </ul> <p></p> <pre><code>var readlineSync = require('readline-sync'),\n  chalk = require('chalk'),\n  log4js = require('log4js'),\n  logger, user, pw, command;\n\nlog4js.configure({appenders: [{type: 'file', filename: 'fooApp.log'}]});\nlogger = log4js.getLogger('fooApp');\n\nreadlineSync.setDefaultOptions({\n  print: function(display, encoding)\n    { logger.info(chalk.stripColor(display)); }, // Remove ctrl-chars.\n  prompt: chalk.red.bold('&gt; ')\n});\n\nconsole.log(chalk.black.bold.bgYellow('    Your Account    '));\nuser = readlineSync.question(chalk.gray.underline(' USER NAME ') + ' : ');\npw = readlineSync.question(chalk.gray.underline(' PASSWORD  ') + ' : ',\n  {hideEchoBack: true});\n// Authorization ...\nconsole.log(chalk.green('Welcome, ' + user + '!'));\ncommand = readlineSync.prompt();\n</code></pre> <ul> <li>Output a conversation to a file when an output stream is redirected to record those into a file like <code>your-script &gt;foo.log</code>. That is, a conversation isn't outputted to <code>foo.log</code> without this code.</li> </ul> <pre><code>readlineSync.setDefaultOptions({\n  print: function(display, encoding)\n    { process.stdout.write(display, encoding); }\n});\nvar name = readlineSync.question('May I have your name? ');\nvar loc = readlineSync.question('Hi ' + name + '! Where do you live? ');\n</code></pre> <ul> <li>Let somebody hear our conversation in real time. It just uses a fifo with above sample code that was named <code>conv.js</code>.</li> </ul> <p>Another terminal:</p> <pre><code>mkfifo /tmp/fifo\ncat /tmp/fifo\n</code></pre> <p>My terminal:</p> <pre><code>node conv.js &gt;/tmp/fifo\n</code></pre> <pre><code>May I have your name? Oz\nHi Oz! Where do you live? Emerald City\n</code></pre> <p>And then, another terminal shows this synchronously:</p> <pre><code>May I have your name? Oz\nHi Oz! Where do you live? Emerald City\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#history","title":"<code>history</code>","text":"<p>For <code>question*</code> and <code>prompt*</code> methods only Type: boolean Default: <code>true</code></p> <p>readlineSync supports a history expansion feature that is similar to that of the shell. If <code>false</code> is specified, disable this feature. It keeps a previous input only. That is, only <code>!!</code>, <code>!-1</code>, <code>!!:p</code> and <code>!-1:p</code> like bash or zsh etc. are supported.</p> <ul> <li><code>!!</code> or <code>!-1</code>: Return a previous input.</li> <li><code>!!:p</code> or <code>!-1:p</code>: Display a previous input but do not return it, and wait for reinput.</li> </ul> <p>For example:</p> <pre><code>while (true) {\n  input = readlineSync.prompt();\n  console.log('-- You said \"' + input + '\"');\n}\n</code></pre> <pre><code>&gt; hello\n-- You said \"hello\"\n&gt; !!\nhello\n-- You said \"hello\"\n&gt; !!:p\nhello\n&gt; bye\n-- You said \"bye\"\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#cd","title":"<code>cd</code>","text":"<p>For <code>question*</code> and <code>prompt*</code> methods only Type: boolean Default: <code>false</code></p> <p>readlineSync supports the changing the current working directory feature that is similar to the <code>cd</code> and <code>pwd</code> commands in the shell. If <code>true</code> is specified, enable this feature. This helps the user when you let the user input the multiple local files or directories. It supports <code>cd</code> and <code>pwd</code> commands.</p> <ul> <li><code>cd &lt;path&gt;</code>: Change the current working directory to <code>&lt;path&gt;</code>. The <code>&lt;path&gt;</code> can include <code>~</code> as the home directory.</li> <li><code>pwd</code>: Display the current working directory.</li> </ul> <p>When these were input, do not return, and wait for reinput.</p> <p>For example:</p> <pre><code>while (true) {\n  file = readlineSync.questionPath('File: ');\n  console.log('-- Specified file is ' + file);\n}\n</code></pre> <pre><code>File: cd foo-dir/bar-dir\nFile: pwd\n/path/to/foo-dir/bar-dir\nFile: file-a.js\n-- Specified file is /path/to/foo-dir/bar-dir/file-a.js\nFile: file-b.png\n-- Specified file is /path/to/foo-dir/bar-dir/file-b.png\nFile: file-c.html\n-- Specified file is /path/to/foo-dir/bar-dir/file-c.html\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#utility-methods","title":"Utility Methods","text":"<p><code>questionEMail</code>, <code>questionNewPassword</code>, <code>questionInt</code>, <code>questionFloat</code>, <code>questionPath</code>, <code>promptCL</code>, <code>promptLoop</code>, <code>promptCLLoop</code>, <code>promptSimShell</code>, <code>keyInYN</code>, <code>keyInYNStrict</code>, <code>keyInPause</code>, <code>keyInSelect</code></p> <p>These are convenient methods that are extended Basic Methods to be used easily.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#questionemail","title":"<code>questionEMail</code>","text":"<pre><code>email = readlineSync.questionEMail([query[, options]])\n</code></pre> <p>Display a <code>query</code> to the user if it's specified, and then accept only a valid e-mail address, and then return it after the Enter key was pressed.</p> <p>The <code>query</code> is handled the same as that of the <code>question</code> method. The default value of <code>query</code> is <code>'Input e-mail address: '</code>.</p> <p>Note: The valid e-mail address requirement is a willful violation of RFC5322, this is defined in HTML5. This works enough to prevent the user mistaking. If you want to change it, specify <code>limit</code> option.</p> <p>For example:</p> <pre><code>email = readlineSync.questionEMail();\nconsole.log('-- E-mail is ' + email);\n</code></pre> <pre><code>Input e-mail address: abc\nInput valid e-mail address, please.\nInput e-mail address: mail@example.com\n-- E-mail is mail@example.com\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options","title":"Options","text":"<p>The following options have independent default value that is not affected by Default Options.</p> Option Name Default Value <code>hideEchoBack</code> <code>false</code> <code>limit</code> RegExp by HTML5 <code>limitMessage</code> <code>'Input valid e-mail address, please.'</code> <code>trueValue</code> <code>null</code> <code>falseValue</code> <code>null</code> <p>The following options work as shown in the Basic Options section.</p> <code>mask</code><code>defaultInput</code><code>caseSensitive</code><code>encoding</code><code>bufferSize</code> <code>print</code><code>history</code>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#questionnewpassword","title":"<code>questionNewPassword</code>","text":"<pre><code>password = readlineSync.questionNewPassword([query[, options]])\n</code></pre> <p>Display a <code>query</code> to the user if it's specified, and then accept only a valid password, and then request same one again, and then return it after the Enter key was pressed. It's the password, or something that is the secret text like the password. You can specify the valid password requirement to the options.</p> <p>The <code>query</code> is handled the same as that of the <code>question</code> method. The default value of <code>query</code> is <code>'Input new password: '</code>.</p> <p>Note: Only the form of password is checked. Check it more if you want. For example, zxcvbn is password strength estimation library.</p> <p>For example:</p> <pre><code>password = readlineSync.questionNewPassword();\nconsole.log('-- Password is ' + password);\n</code></pre> <pre><code>Input new password: ************\nIt can include: 0...9, A...Z, a...z, !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~\nAnd the length must be: 12...24\nInput new password: *************\nReinput a same one to confirm it: *************\nIt differs from first one. Hit only the Enter key if you want to retry from first one.\nReinput a same one to confirm it: *************\n-- Password is _my_password_\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_1","title":"Options","text":"<p>The following options have independent default value that is not affected by Default Options.</p> Option Name Default Value <code>hideEchoBack</code> <code>true</code> <code>mask</code> <code>'*'</code> <code>limitMessage</code> <code>'It can include: $&lt;charlist&gt;\\nAnd the length must be: $&lt;length&gt;'</code> <code>trueValue</code> <code>null</code> <code>falseValue</code> <code>null</code> <code>caseSensitive</code> <code>true</code> <p>The following options work as shown in the Basic Options section.</p> <code>defaultInput</code><code>keepWhitespace</code><code>encoding</code><code>bufferSize</code><code>print</code> <p>And the following additional options are available.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#charlist","title":"<code>charlist</code>","text":"<p>Type: string Default: <code>'$&lt;!-~&gt;'</code></p> <p>A string as the characters that can be included in the password. For example, if <code>'abc123'</code> is specified, the passwords that include any character other than these 6 characters are refused. The placeholders like <code>'$&lt;a-e&gt;'</code> are replaced to the characters like <code>'abcde'</code>.  </p> <p>For example, let the user input a password that is created with alphabet and some symbols:</p> <pre><code>password = readlineSync.questionNewPassword('PASSWORD: ', {charlist: '$&lt;a-z&gt;#$@%'});\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#min-max","title":"<code>min</code>, <code>max</code>","text":"<p>Type: number Default: <code>min</code>: <code>12</code>, <code>max</code>: <code>24</code></p> <p><code>min</code>: A number as a minimum length of the password. <code>max</code>: A number as a maximum length of the password.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#confirmmessage","title":"<code>confirmMessage</code>","text":"<p>Type: string or others Default: <code>'Reinput a same one to confirm it: '</code></p> <p>A message that lets the user input the same password again. It can include the placeholders. If this is not string, it is converted to string (i.e. <code>toString</code> method is called).</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#unmatchmessage","title":"<code>unmatchMessage</code>","text":"<p>Type: string or others Default: <code>'It differs from first one. Hit only the Enter key if you want to retry from first one.'</code></p> <p>A warning message that is displayed when the second input did not match first one. This is converted the same as the <code>confirmMessage</code> option.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#additional-placeholders","title":"Additional Placeholders","text":"<p>The following additional placeholder parameters are available.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#charlist_1","title":"<code>charlist</code>","text":"<p>A current value of <code>charlist</code> option that is converted to human readable if possible. (e.g. <code>'A...Z'</code>)</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#length","title":"<code>length</code>","text":"<p>A current value of <code>min</code> and <code>max</code> option that is converted to human readable. (e.g. <code>'12...24'</code>)</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#questionint","title":"<code>questionInt</code>","text":"<pre><code>numInt = readlineSync.questionInt([query[, options]])\n</code></pre> <p>Display a <code>query</code> to the user if it's specified, and then accept only an input that can be interpreted as an integer, and then return the number (not string) after the Enter key was pressed. This parses the input as much as possible by <code>parseInt()</code>. For example, it interprets <code>'   5   '</code>, <code>'5.6'</code>, <code>'005'</code>, <code>'5files'</code>, <code>'5kb'</code> and <code>'5px'</code> as <code>5</code>.</p> <p>The <code>query</code> is handled the same as that of the <code>question</code> method.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_2","title":"Options","text":"<p>The following option has independent default value that is not affected by Default Options.</p> Option Name Default Value <code>limitMessage</code> <code>'Input valid number, please.'</code> <p>The following options work as shown in the Basic Options section.</p> <code>hideEchoBack</code><code>mask</code><code>defaultInput</code><code>encoding</code><code>bufferSize</code> <code>print</code><code>history</code>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#questionfloat","title":"<code>questionFloat</code>","text":"<pre><code>numFloat = readlineSync.questionFloat([query[, options]])\n</code></pre> <p>Display a <code>query</code> to the user if it's specified, and then accept only an input that can be interpreted as a floating-point number, and then return the number (not string) after the Enter key was pressed. This parses the input as much as possible by <code>parseFloat()</code>. For example, it interprets <code>'   3.14   '</code>, <code>'003.1400'</code>, <code>'314e-2'</code> and <code>'3.14PI'</code> as <code>3.14</code>.</p> <p>The <code>query</code> is handled the same as that of the <code>question</code> method.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_3","title":"Options","text":"<p>The following option has independent default value that is not affected by Default Options.</p> Option Name Default Value <code>limitMessage</code> <code>'Input valid number, please.'</code> <p>The following options work as shown in the Basic Options section.</p> <code>hideEchoBack</code><code>mask</code><code>defaultInput</code><code>encoding</code><code>bufferSize</code> <code>print</code><code>history</code>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#questionpath","title":"<code>questionPath</code>","text":"<pre><code>path = readlineSync.questionPath([query[, options]])\n</code></pre> <p>Display a <code>query</code> to the user if it's specified, and then accept only a valid local file or directory path, and then return an absolute path after the Enter key was pressed. The <code>~</code> that is input by the user is replaced to the home directory. You can specify the valid local file or directory path requirement to the options. And you can make it create a new file or directory when it doesn't exist.  </p> <p>It is recommended to use this method with the <code>cd</code> option. (Default: <code>true</code>)</p> <p>The <code>query</code> is handled the same as that of the <code>question</code> method. The default value of <code>query</code> is <code>'Input path (you can \"cd\" and \"pwd\"): '</code>.</p> <p>For example:</p> <pre><code>sourceFile = readlineSync.questionPath('Read from: ', {\n  isFile: true\n});\nconsole.log('-- sourceFile: ' + sourceFile);\n\nsaveDir = readlineSync.questionPath('Save to: ', {\n  isDirectory: true,\n  exists: null,\n  create: true\n});\nconsole.log('-- saveDir: ' + saveDir);\n</code></pre> <pre><code>Read from: ~/fileA\nNo such file or directory: /home/user/fileA\nInput valid path, please.\nRead from: pwd\n/path/to/work\nRead from: cd ~/project-1\nRead from: fileA\n-- sourceFile: /home/user/project-1/fileA\nSave to: ~/deploy/data\n-- saveDir: /home/user/deploy/data\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_4","title":"Options","text":"<p>The following options have independent default value that is not affected by Default Options.</p> Option Name Default Value <code>hideEchoBack</code> <code>false</code> <code>limitMessage</code> <code>'$&lt;error(\\n)&gt;Input valid path, please.$&lt;( Min:)min&gt;$&lt;( Max:)max&gt;'</code> <code>history</code> <code>true</code> <code>cd</code> <code>true</code> <p>The following options work as shown in the Basic Options section.</p> <code>mask</code><code>defaultInput</code><code>encoding</code><code>bufferSize</code><code>print</code> <p>And the following additional options are available.</p> <p>Note: It does not check the coherency about a combination of the options as the path requirement. For example, the <code>{exists: false, isFile: true}</code> never check that it is a file because it is limited to the path that does not exist.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#exists","title":"<code>exists</code>","text":"<p>Type: boolean or others Default: <code>true</code></p> <p>If <code>true</code> is specified, accept only a file or directory path that exists. If <code>false</code> is specified, accept only a file or directory path that does not exist. In any other case, the existence is not checked.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#min-max_1","title":"<code>min</code>, <code>max</code>","text":"<p>Type: number or others Default: <code>undefined</code></p> <p><code>min</code>: A number as a minimum size of the file that is accepted. <code>max</code>: A number as a maximum size of the file that is accepted. If it is not specified or <code>0</code> is specified, the size is not checked. (A size of directory is <code>0</code>.)</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#isfile-isdirectory","title":"<code>isFile</code>, <code>isDirectory</code>","text":"<p>Type: boolean Default: <code>false</code></p> <p><code>isFile</code>: If <code>true</code> is specified, accept only a file path. <code>isDirectory</code>: If <code>true</code> is specified, accept only a directory path.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#validate","title":"<code>validate</code>","text":"<p>Type: function or <code>undefined</code> Default: <code>undefined</code></p> <p>If a function that returns <code>true</code> or an error message is specified, call it with a path that was input, and accept the input when the function returned <code>true</code>. If the function returned a string as an error message, that message is got by the <code>error</code> additional placeholder parameter. A path that was input is parsed before it is passed to the function. <code>~</code> is replaced to a home directory, and a path is converted to an absolute path. This is also a return value from this method.</p> <p>For example, accept only PNG file or tell it to the user:</p> <pre><code>imageFile = readlineSync.questionPath('Image File: ', {\n  validate: function(path) { return /\\.png$/i.test(path) || 'It is not PNG'; }\n});\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#create","title":"<code>create</code>","text":"<p>Type: boolean Default: <code>false</code></p> <p>If <code>true</code> is specified, create a file or directory as a path that was input when it doesn't exist. If <code>true</code> is specified to the <code>isDirectory</code> option, create a directory, otherwise a file. It does not affect the existence check. Therefore, you can get a new file or directory path anytime by specifying: <code>{exists: false, create: true}</code></p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#additional-placeholders_1","title":"Additional Placeholders","text":"<p>The following additional placeholder parameters are available.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#error","title":"<code>error</code>","text":"<p>An error message when the input was not accepted. This value is set by readlineSync, or the function that was specified to <code>validate</code> option.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#min-max_2","title":"<code>min</code>, <code>max</code>","text":"<p>A current value of <code>min</code> and <code>max</code> option.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#promptcl","title":"<code>promptCL</code>","text":"<pre><code>argsArray = readlineSync.promptCL([commandHandler[, options]])\n</code></pre> <p>Display a prompt-sign (see <code>prompt</code> option) to the user, and then consider the input as a command-line and parse it, and then return a result after the Enter key was pressed. A return value is an Array that includes the tokens that were parsed. It parses the input from the user as the command-line, and it interprets whitespaces, quotes, etc., and it splits it to tokens properly. Usually, a first element of the Array is command-name, and remaining elements are arguments.</p> <p>For example:</p> <pre><code>argsArray = readlineSync.promptCL();\nconsole.log(argsArray.join('\\n'));\n</code></pre> <pre><code>&gt; command arg \"arg\" \" a r g \" \"\" 'a\"r\"g' \"a\"\"rg\" \"arg\ncommand\narg\narg\n a r g \n\na\"r\"g\narg\narg\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#commandhandler","title":"<code>commandHandler</code>","text":"<p>By using the <code>commandHandler</code> argument, this method will come into its own. Specifying the Object to this argument has the more merit. And it has the more merit for <code>promptCLLoop</code> method.  </p> <p>If a function is specified to <code>commandHandler</code> argument, it is just called with a parsed Array as an argument list of the function. And <code>this</code> is an original input string, in the function.</p> <p>For example, the following 2 codes work same except that <code>this</code> is enabled in the second one:</p> <pre><code>argsArray = readlineSync.promptCL();\nif (argsArray[0] === 'add') {\n  console.log(argsArray[1] + ' is added.');\n} else if (argsArray[0] === 'copy') {\n  console.log(argsArray[1] + ' is copied to ' + argsArray[2] + '.');\n}\n</code></pre> <pre><code>readlineSync.promptCL(function(command, arg1, arg2) {\n  console.log('You want to: ' + this); // All of command-line.\n  if (command === 'add') {\n    console.log(arg1 + ' is added.');\n  } else if (command === 'copy') {\n    console.log(arg1 + ' is copied to ' + arg2 + '.');\n  }\n});\n</code></pre> <p>If an Object that has properties named as the command-name is specified, the command-name is interpreted, and a function as the value of matched property is called. A function is chosen properly by handling case of the command-name in accordance with the <code>caseSensitive</code> option. The function is called with a parsed Array that excludes a command-name (i.e. first element is removed from the Array) as an argument list of the function. That is, a structure of the <code>commandHandler</code> Object looks like:</p> <pre><code>{\n  commandA: function(arg) { ... },        // commandA requires one argument.\n  commandB: function(arg1, arg2) { ... }, // readlineSync doesn't care those.\n  commandC: function() { ... }            // Of course, it can also ignore all.\n}\n</code></pre> <p>readlineSync just receives the arguments from the user and passes those to these functions without checking. The functions may have to check whether the required argument was input by the user, and more validate those.</p> <p>For example, the following code works same to the above code:</p> <pre><code>readlineSync.promptCL({\n  add: function(element) { // It's called by also \"ADD\", \"Add\", \"aDd\", etc..\n    console.log(element + ' is added.');\n  },\n  copy: function(from, to) {\n    console.log(from + ' is copied to ' + to + '.');\n  }\n});\n</code></pre> <p>If the matched property is not found in the Object, a <code>_</code> property is chosen, and the function as the value of this property is called with a parsed Array as an argument list of the function. Note that this includes a command-name. That is, the function looks like <code>function(command, arg1, arg2, ...) { ... }</code>. And if the Object doesn't have a <code>_</code> property, any command that the matched property is not found in the Object is refused.</p> <p>For example:</p> <pre><code>readlineSync.promptCL({\n  copy: function(from, to) { // command-name is not included.\n    console.log(from + ' is copied to ' + to + '.');\n  },\n  _: function(command) { // command-name is included.\n    console.log('Sorry, ' + command + ' is not available.');\n  }\n});\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_5","title":"Options","text":"<p>The following options have independent default value that is not affected by Default Options.</p> Option Name Default Value <code>hideEchoBack</code> <code>false</code> <code>limitMessage</code> <code>'Requested command is not available.'</code> <code>caseSensitive</code> <code>false</code> <code>history</code> <code>true</code> <p>The following options work as shown in the Basic Options section.</p> <code>prompt</code><code>mask</code><code>defaultInput</code><code>encoding</code><code>bufferSize</code> <code>print</code><code>cd</code>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#promptloop","title":"<code>promptLoop</code>","text":"<pre><code>readlineSync.promptLoop(inputHandler[, options])\n</code></pre> <p>Display a prompt-sign (see <code>prompt</code> option) to the user, and then call <code>inputHandler</code> function with the input from the user after it has been typed and the Enter key was pressed. Do these repeatedly until <code>inputHandler</code> function returns <code>true</code>.</p> <p>For example, the following 2 codes work same:</p> <pre><code>while (true) {\n  input = readlineSync.prompt();\n  console.log('-- You said \"' + input + '\"');\n  if (input === 'bye') {\n    break;\n  }\n}\nconsole.log('It\\'s exited from loop.');\n</code></pre> <pre><code>readlineSync.promptLoop(function(input) {\n  console.log('-- You said \"' + input + '\"');\n  return input === 'bye';\n});\nconsole.log('It\\'s exited from loop.');\n</code></pre> <pre><code>&gt; hello\n-- You said \"hello\"\n&gt; good morning\n-- You said \"good morning\"\n&gt; bye\n-- You said \"bye\"\nIt's exited from loop.\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_6","title":"Options","text":"<p>The following options have independent default value that is not affected by Default Options.</p> Option Name Default Value <code>hideEchoBack</code> <code>false</code> <code>trueValue</code> <code>null</code> <code>falseValue</code> <code>null</code> <code>caseSensitive</code> <code>false</code> <code>history</code> <code>true</code> <p>The other options work as shown in the Basic Options section.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#promptclloop","title":"<code>promptCLLoop</code>","text":"<pre><code>readlineSync.promptCLLoop([commandHandler[, options]])\n</code></pre> <p>Execute <code>promptCL</code> method repeatedly until chosen <code>commandHandler</code> returns <code>true</code>. The <code>commandHandler</code> may be a function that is called like:</p> <pre><code>exit = allCommands(command, arg1, arg2, ...);\n</code></pre> <p>or an Object that has the functions that are called like:</p> <pre><code>exit = foundCommand(arg1, arg2, ...);\n</code></pre> <p>See <code>promptCL</code> method for details. This method looks like a combination of <code>promptCL</code> method and <code>promptLoop</code> method.</p> <p>For example:</p> <pre><code>readlineSync.promptCLLoop({\n  add: function(element) {\n    console.log(element + ' is added.');\n  },\n  copy: function(from, to) {\n    console.log(from + ' is copied to ' + to + '.');\n  },\n  bye: function() { return true; }\n});\nconsole.log('It\\'s exited from loop.');\n</code></pre> <pre><code>&gt; add \"New Hard Disk\"\nNew Hard Disk is added.\n&gt; move filesOnOld \"New Hard Disk\"\nRequested command is not available.\n&gt; copy filesOnOld \"New Hard Disk\"\nfilesOnOld is copied to New Hard Disk.\n&gt; bye\nIt's exited from loop.\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_7","title":"Options","text":"<p>The following options have independent default value that is not affected by Default Options.</p> Option Name Default Value <code>hideEchoBack</code> <code>false</code> <code>limitMessage</code> <code>'Requested command is not available.'</code> <code>caseSensitive</code> <code>false</code> <code>history</code> <code>true</code> <p>The following options work as shown in the Basic Options section.</p> <code>prompt</code><code>mask</code><code>defaultInput</code><code>encoding</code><code>bufferSize</code> <code>print</code><code>cd</code>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#promptsimshell","title":"<code>promptSimShell</code>","text":"<pre><code>input = readlineSync.promptSimShell([options])\n</code></pre> <p>Display a prompt-sign that is similar to that of the user's shell to the user, and then return the input from the user after it has been typed and the Enter key was pressed. This method displays a prompt-sign like:</p> <p>On Windows:</p> <pre><code>C:\\Users\\User\\Path\\To\\Directory&gt;\n</code></pre> <p>On others:</p> <pre><code>user@host:~/path/to/directory$ \n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_8","title":"Options","text":"<p>The following options have independent default value that is not affected by Default Options.</p> Option Name Default Value <code>hideEchoBack</code> <code>false</code> <code>history</code> <code>true</code> <p>The other options other than <code>prompt</code> option work as shown in the Basic Options section.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#keyinyn","title":"<code>keyInYN</code>","text":"<pre><code>boolYesOrEmpty = readlineSync.keyInYN([query[, options]])\n</code></pre> <p>Display a <code>query</code> to the user if it's specified, and then return a boolean or an empty string immediately a key was pressed by the user, without pressing the Enter key. Note that the user has no chance to change the input. This method works like the <code>window.confirm</code> method of web browsers. A return value means \"Yes\" or \"No\" the user said. It differ depending on the pressed key:</p> <ul> <li><code>Y</code>: <code>true</code></li> <li><code>N</code>: <code>false</code></li> <li>other: <code>''</code></li> </ul> <p>The <code>query</code> is handled the same as that of the <code>question</code> method. The default value of <code>query</code> is <code>'Are you sure? '</code>.</p> <p>The keys other than <code>Y</code> and <code>N</code> are also accepted (If you want to know a user's wish explicitly, use <code>keyInYNStrict</code> method). Therefore, if you let the user make an important decision (e.g. files are removed), check whether the return value is not falsy. That is, a default is \"No\".</p> <p>For example:</p> <pre><code>if (!readlineSync.keyInYN('Do you want to install this?')) {\n  // Key that is not `Y` was pressed.\n  process.exit();\n}\n// Do something...\n</code></pre> <p>Or if you let the user stop something that must be done (e.g. something about the security), check whether the return value is <code>false</code> explicitly. That is, a default is \"Yes\".</p> <p>For example:</p> <pre><code>// Don't use `(!readlineSync.keyInYN())`.\nif (readlineSync.keyInYN('Continue virus scan?') === false) {\n  // `N` key was pressed.\n  process.exit();\n}\n// Continue...\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_9","title":"Options","text":"<p>The following options work as shown in the Basic Options section.</p> <code>encoding</code><code>print</code> <p>And the following additional option is available.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#guide","title":"<code>guide</code>","text":"<p>Type: boolean Default: <code>true</code></p> <p>If <code>true</code> is specified, a string <code>'[y/n]'</code> as guide for the user is added to <code>query</code>. And <code>':'</code> is moved to the end of <code>query</code>, or it is added.</p> <p>For example:</p> <pre><code>readlineSync.keyInYN('Do you like me?'); // No colon\nreadlineSync.keyInYN('Really? :'); // Colon already exists\n</code></pre> <pre><code>Do you like me? [y/n]: y\nReally? [y/n]: y\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#keyinynstrict","title":"<code>keyInYNStrict</code>","text":"<pre><code>boolYes = readlineSync.keyInYNStrict([query[, options]])\n</code></pre> <p>Display a <code>query</code> to the user if it's specified, and then accept only <code>Y</code> or <code>N</code> key, and then return a boolean immediately it was pressed by the user, without pressing the Enter key. Note that the user has no chance to change the input. This method works like the <code>window.confirm</code> method of web browsers. A return value means \"Yes\" or \"No\" the user said. It differ depending on the pressed key:</p> <ul> <li><code>Y</code>: <code>true</code></li> <li><code>N</code>: <code>false</code></li> </ul> <p>The <code>query</code> is handled the same as that of the <code>question</code> method. The default value of <code>query</code> is <code>'Are you sure? '</code>.</p> <p>A key other than <code>Y</code> and <code>N</code> is not accepted. That is, a return value has no default. Therefore, the user has to tell an own wish explicitly. If you want to know a user's wish easily, use <code>keyInYN</code> method.</p> <p>This method works same to <code>keyInYN</code> method except that this accept only <code>Y</code> or <code>N</code> key (Therefore, a return value is boolean every time). The options also work same to <code>keyInYN</code> method.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#keyinpause","title":"<code>keyInPause</code>","text":"<pre><code>readlineSync.keyInPause([query[, options]])\n</code></pre> <p>Display a <code>query</code> to the user if it's specified, and then just wait for a key to be pressed by the user. This method works like the <code>window.alert</code> method of web browsers. This is used to make the running of script pause and show something to the user, or wait for the user to be ready. By default, any key is accepted (See: Note). You can change this behavior by specifying <code>limit</code> option  (e.g. accept only a Space Bar).</p> <p>The <code>query</code> is handled the same as that of the <code>question</code> method. The default value of <code>query</code> is <code>'Continue...'</code>.</p> <p>For example:</p> <pre><code>// Have made the preparations for something...\nconsole.log('==== Information of Your Computer ====');\nconsole.log(info); // This can be `query`.\nreadlineSync.keyInPause();\nconsole.log('It\\'s executing now...');\n// Do something...\n</code></pre> <pre><code>==== Information of Your Computer ====\nFOO: 123456\nBAR: abcdef\nContinue... (Hit any key)\nIt's executing now...\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_10","title":"Options","text":"<p>The following option has independent default value that is not affected by Default Options.</p> Option Name Default Value <code>limit</code> <code>null</code> <p>The following options work as shown in the Basic Options section.</p> <code>caseSensitive</code><code>encoding</code><code>print</code> <p>And the following additional option is available.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#guide_1","title":"<code>guide</code>","text":"<p>Type: boolean Default: <code>true</code></p> <p>If <code>true</code> is specified, a string <code>'(Hit any key)'</code> as guide for the user is added to <code>query</code>.</p> <p>For example:</p> <pre><code>readlineSync.keyInPause('It\\'s pausing now...');\n</code></pre> <pre><code>It's pausing now... (Hit any key)\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#note","title":"Note","text":"<p>Control keys including Enter key are not accepted by <code>keyIn*</code> methods. If you want to wait until the user presses Enter key, use <code>question*</code> methods instead of <code>keyIn*</code> methods. For example:</p> <pre><code>readlineSync.question('Hit Enter key to continue.', {hideEchoBack: true, mask: ''});\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#keyinselect","title":"<code>keyInSelect</code>","text":"<pre><code>index = readlineSync.keyInSelect(items[, query[, options]])\n</code></pre> <p>Display the list that was created with the <code>items</code> Array, and the <code>query</code> to the user if it's specified, and then return the number as an index of the <code>items</code> Array immediately it was chosen by pressing a key by the user, without pressing the Enter key. Note that the user has no chance to change the input.</p> <p>The <code>query</code> is handled the same as that of the <code>question</code> method. The default value of <code>query</code> is <code>'Choose one from list: '</code>.</p> <p>The minimum length of <code>items</code> Array is 1 and maximum length is 35. These elements are displayed as item list. A key to let the user choose an item is assigned to each item automatically in sequence like \"1, 2, 3 ... 9, A, B, C ...\". A number as an index of the <code>items</code> Array that corresponds to a chosen item by the user is returned.</p> <p>Note: Even if the <code>items</code> Array has only less than 35 items, a long Array that forces an user to scroll the list may irritate the user. Remember, the user might be in a console environment that doesn't support scrolling the screen. If you want to use a long <code>items</code> Array (e.g. more than 10 items), you should consider a \"Pagination\". (See example.)</p> <p>For example:</p> <pre><code>frameworks = ['Express', 'hapi', 'flatiron', 'MEAN.JS', 'locomotive'];\nindex = readlineSync.keyInSelect(frameworks, 'Which framework?');\nconsole.log(frameworks[index] + ' is enabled.');\n</code></pre> <pre><code>[1] Express\n[2] hapi\n[3] flatiron\n[4] MEAN.JS\n[5] locomotive\n[0] CANCEL\n\nWhich framework? [1...5 / 0]: 2\nhapi is enabled.\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#options_11","title":"Options","text":"<p>The following option has independent default value that is not affected by Default Options.</p> Option Name Default Value <code>hideEchoBack</code> <code>false</code> <p>The following options work as shown in the Basic Options section.</p> <code>mask</code><code>encoding</code><code>print</code> <p>And the following additional options are available.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#guide_2","title":"<code>guide</code>","text":"<p>Type: boolean Default: <code>true</code></p> <p>If <code>true</code> is specified, a string like <code>'[1...5]'</code> as guide for the user is added to <code>query</code>. And <code>':'</code> is moved to the end of <code>query</code>, or it is added. This is the key list that corresponds to the item list.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#cancel","title":"<code>cancel</code>","text":"<p>Type: boolean, string or others Default: <code>'CANCEL'</code></p> <p>If a value other than <code>false</code> is specified, an item to let the user tell \"cancel\" is added to the item list. \"[0] CANCEL\" (default) is displayed, and if <code>0</code> key is pressed, <code>-1</code> is returned. You can specify a label of this item other than <code>'CANCEL'</code>. A string such as <code>'Go back'</code> (empty string <code>''</code> also), something that is converted to string such as <code>Date</code>, a string that includes placeholder such as <code>'Next $&lt;itemsCount&gt; items'</code> are accepted.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#additional-placeholders_2","title":"Additional Placeholders","text":"<p>The following additional placeholder parameters are available.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#itemscount","title":"<code>itemsCount</code>","text":"<p>A length of a current <code>items</code> Array.</p> <p>For example:</p> <pre><code>items = ['item-A', 'item-B', 'item-C', 'item-D', 'item-E'];\nindex = readlineSync.keyInSelect(items, null,\n  {cancel: 'Show more than $&lt;itemsCount&gt; items'});\n</code></pre> <pre><code>[1] item-A\n[2] item-B\n[3] item-C\n[4] item-D\n[5] item-E\n[0] Show more than 5 items\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#firstitem","title":"<code>firstItem</code>","text":"<p>A first item in a current <code>items</code> Array.</p> <p>For example:</p> <pre><code>index = readlineSync.keyInSelect(items, 'Choose $&lt;firstItem&gt; or another: ');\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#lastitem","title":"<code>lastItem</code>","text":"<p>A last item in a current <code>items</code> Array.</p> <p>For example:</p> <pre><code>items = ['January', 'February', 'March', 'April', 'May', 'June'];\nindex = readlineSync.keyInSelect(items, null,\n  {cancel: 'In after $&lt;lastItem&gt;'});\n</code></pre> <pre><code>[1] January\n[2] February\n[3] March\n[4] April\n[5] May\n[6] June\n[0] In after June\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#placeholders","title":"Placeholders","text":"<p><code>hideEchoBack</code>, <code>mask</code>, <code>defaultInput</code>, <code>caseSensitive</code>, <code>keepWhitespace</code>, <code>encoding</code>, <code>bufferSize</code>, <code>history</code>, <code>cd</code>, <code>limit</code>, <code>trueValue</code>, <code>falseValue</code>, <code>limitCount</code>, <code>limitCountNotZero</code>, <code>lastInput</code>, <code>history_mN</code>, <code>cwd</code>, <code>CWD</code>, <code>cwdHome</code>, <code>date</code>, <code>time</code>, <code>localeDate</code>, <code>localeTime</code>, <code>C1-C2</code></p> <p>The placeholders in the text are replaced to another string.</p> <p>For example, the <code>limitMessage</code> option to display a warning message that means that the command the user requested is not available:</p> <pre><code>command = readlineSync.prompt({\n  limit: ['add', 'remove'],\n  limitMessage: '$&lt;lastInput&gt; is not available.'\n});\n</code></pre> <pre><code>&gt; delete\ndelete is not available.\n</code></pre> <p>The placeholders can be included in:</p> <ul> <li><code>query</code> argument</li> <li><code>prompt</code> and <code>limitMessage</code> options</li> <li><code>limit</code> option for <code>keyIn*</code> method and <code>charlist</code> option for <code>questionNewPassword</code> method (<code>C1-C2</code> parameter only)</li> <li>And some additional options for the Utility Methods.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#syntax","title":"Syntax","text":"<pre><code>$&lt;parameter&gt;\n</code></pre> <p>Or</p> <pre><code>$&lt;(text1)parameter(text2)&gt;\n</code></pre> <p>The placeholder is replaced to a string that is got by a <code>parameter</code>. Both the <code>(text1)</code> and <code>(text2)</code> are optional. A more added <code>'$'</code> at the left of the placeholder is used as an escape character, it disables a placeholder. For example, <code>'$$&lt;foo&gt;'</code> is replaced to <code>'$&lt;foo&gt;'</code>. If you want to put a <code>'$'</code> which is not an escape character at the left of a placeholder, specify it like <code>'$&lt;($)bufferSize&gt;'</code>, then it is replaced to <code>'$1024'</code>.</p> <p>At the each position of <code>'(text1)'</code> and <code>'(text2)'</code>, <code>'text1'</code> and <code>'text2'</code> are put when a string that was got by a <code>parameter</code> has more than 0 length. If that got string is <code>''</code>, a placeholder with or without <code>'(text1)'</code> and <code>'(text2)'</code> is replaced to <code>''</code>.</p> <p>For example, a warning message that means that the command the user requested is not available:</p> <pre><code>command = readlineSync.prompt({\n  limit: ['add', 'remove'],\n  limitMessage: 'Refused $&lt;lastInput&gt; you requested. Please input another.'\n});\n</code></pre> <pre><code>&gt; give-me-car\nRefused give-me-car you requested. Please input another.\n</code></pre> <p>It looks like no problem. But when the user input nothing (hit only the Enter key), and then a message is displayed:</p> <pre><code>&gt; \nRefused  you requested. Please input another.\n</code></pre> <p>This goes well:</p> <pre><code>command = readlineSync.prompt({\n  limit: ['add', 'remove'],\n  limitMessage: 'Refused $&lt;lastInput( you requested)&gt;. Please input another.'\n});\n</code></pre> <pre><code>&gt; \nRefused . Please input another.\n</code></pre> <p>(May be more better: <code>'$&lt;(Refused )lastInput( you requested. )&gt;Please input another.'</code>)</p> <p>Note: The syntax <code>${parameter}</code> of older version is still supported, but this should not be used because it may be confused with template string syntax of ES6. And this will not be supported in due course of time.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#parameters","title":"Parameters","text":"<p>The following parameters are available. And some additional parameters are available in the Utility Methods.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#hideechoback-mask-defaultinput-casesensitive-keepwhitespace-encoding-buffersize-history-cd-limit-truevalue-falsevalue","title":"<code>hideEchoBack</code>, <code>mask</code>, <code>defaultInput</code>, <code>caseSensitive</code>, <code>keepWhitespace</code>, <code>encoding</code>, <code>bufferSize</code>, <code>history</code>, <code>cd</code>, <code>limit</code>, <code>trueValue</code>, <code>falseValue</code>","text":"<p>A current value of each option. It is converted to human readable if possible. The boolean value is replaced to <code>'on'</code> or <code>'off'</code>, and the Array is replaced to the list of only string and number elements. And in the <code>keyIn*</code> method, the parts of the list as characters sequence are suppressed. For example, when <code>['a', 'b', 'c', 'd', 'e']</code> is specified to the <code>limit</code> option, <code>'$&lt;limit&gt;'</code> is replaced to <code>'a...e'</code>. If <code>true</code> is specified to the <code>caseSensitive</code> option, the characters are converted to lower case.</p> <p>For example:</p> <pre><code>input = readlineSync.question(\n  'Input something or the Enter key as \"$&lt;defaultInput&gt;\": ',\n  {defaultInput: 'hello'}\n);\n</code></pre> <pre><code>Input something or the Enter key as \"hello\":\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#limitcount-limitcountnotzero","title":"<code>limitCount</code>, <code>limitCountNotZero</code>","text":"<p>A length of a current value of the <code>limit</code> option. When the value of the <code>limit</code> option is empty, <code>'$&lt;limitCount&gt;'</code> is replaced to <code>'0'</code>, <code>'$&lt;limitCountNotZero&gt;'</code> is replaced to <code>''</code>.</p> <p>For example:</p> <pre><code>action = readlineSync.question(\n  'Choose action$&lt;( from )limitCountNotZero( actions)&gt;: ',\n  {limit: availableActions}\n);\n</code></pre> <pre><code>Choose action from 5 actions:\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#lastinput","title":"<code>lastInput</code>","text":"<p>A last input from the user. In any case, this is saved.</p> <p>For example:</p> <pre><code>command = readlineSync.prompt({\n  limit: availableCommands,\n  limitMessage: '$&lt;lastInput&gt; is not available.'\n});\n</code></pre> <pre><code>&gt; wrong-command\nwrong-command is not available.\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#history_mn","title":"<code>history_mN</code>","text":"<p>When the history expansion feature is enabled (see <code>history</code> option), a current command line minus <code>N</code>. This feature keeps the previous input only. That is, only <code>history_m1</code> is supported.</p> <p>For example:</p> <pre><code>while (true) {\n  input = readlineSync.question('Something$&lt;( or \"!!\" as \")history_m1(\")&gt;: ');\n  console.log('-- You said \"' + input + '\"');\n}\n</code></pre> <pre><code>Something: hello\n-- You said \"hello\"\nSomething or \"!!\" as \"hello\": !!\nhello\n-- You said \"hello\"\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#cwd-cwd-cwdhome","title":"<code>cwd</code>, <code>CWD</code>, <code>cwdHome</code>","text":"<p>A current working directory.  </p> <ul> <li><code>cwd</code>: A full-path</li> <li><code>CWD</code>: A directory name</li> <li><code>cwdHome</code>: A path that includes <code>~</code> as the home directory</li> </ul> <p>For example, like bash/zsh:</p> <pre><code>command = readlineSync.prompt({prompt: '[$&lt;cwdHome&gt;]$ '});\n</code></pre> <pre><code>[~/foo/bar]$ \n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#date-time-localedate-localetime","title":"<code>date</code>, <code>time</code>, <code>localeDate</code>, <code>localeTime</code>","text":"<p>A string as current date or time.</p> <ul> <li><code>date</code>: A date portion</li> <li><code>time</code>: A time portion</li> <li><code>localeDate</code>: A locality sensitive representation of the date portion based on system settings</li> <li><code>localeTime</code>: A locality sensitive representation of the time portion based on system settings</li> </ul> <p>For example:</p> <pre><code>command = readlineSync.prompt({prompt: '[$&lt;localeDate&gt;]&gt; '});\n</code></pre> <pre><code>[04/21/2015]&gt; \n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#c1-c2","title":"<code>C1-C2</code>","text":"<p>For <code>limit</code> option for <code>keyIn*</code> method and <code>charlist</code> option for <code>questionNewPassword</code> method only</p> <p>A character list. <code>C1</code> and <code>C2</code> are each single character as the start and the end. A sequence in ascending or descending order of characters ranging from <code>C1</code> to <code>C2</code> is created. For example, <code>'$&lt;a-e&gt;'</code> is replaced to <code>'abcde'</code>. <code>'$&lt;5-1&gt;'</code> is replaced to <code>'54321'</code>.</p> <p>For example, let the user input a password that is created with alphabet:</p> <pre><code>password = readlineSync.questionNewPassword('PASSWORD: ', {charlist: '$&lt;a-z&gt;'});\n</code></pre> <p>See also <code>limit</code> option for <code>keyIn*</code> method.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#special-method-getrawinput","title":"Special method <code>getRawInput</code>","text":"<pre><code>rawInput = readlineSync.getRawInput()\n</code></pre> <p>Return a raw input data of last method. When the input was terminated with no data, a <code>NULL</code> is inserted to the data.</p> <p>This might contain control-codes (e.g. <code>LF</code>, <code>CR</code>, <code>EOF</code>, etc.), therefore, it might be used to get <code>^D</code> that was input. But you should understand each environments for that. Or, you should not use this if your script is used in multiple environments. For example, when the user input <code>EOF</code> (<code>^D</code> in Unix like system, <code>^Z</code> in Windows), <code>x1A</code> (<code>EOF</code>) is returned in Windows, and <code>x00</code> (<code>NULL</code>) is returned in Unix like system. And <code>x04</code> (<code>EOT</code>) is returned in Unix like system with raw-mode. And also, when external program is used, nothing is returned. See also Control characters. You may examine each environment and you must test your script very much, if you want to handle the raw input data.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#with-task-runner","title":"With Task Runner","text":"<p>The easy way to control a flow of the task runner by the input from the user:</p> <ul> <li>Grunt plugin: grunt-confirm</li> <li>gulp plugin: gulp-confirm</li> </ul> <p>If you want to control a flow of the task runner (e.g. Grunt), call readlineSync in a task callback that is called by the task runner. Then a flow of tasks is paused and it is controlled by the user.</p> <p>For example, by using grunt-task-helper:</p> <pre><code>$ grunt\nRunning \"fileCopy\" task\nFiles already exist:\n  file-a.png\n  file-b.js\nOverwrite? [y/n]: y\nfile-a.png copied.\nfile-b.js copied.\nDone.\n</code></pre> <p><code>Gruntfile.js</code></p> <pre><code>grunt.initConfig({\n  taskHelper: {\n    fileCopy: {\n      options: {\n        handlerByTask: function() {\n          // Abort the task if user don't want it.\n          return readlineSync.keyInYN('Overwrite?');\n        },\n        filesArray: []\n      },\n      ...\n    }\n  },\n  copy: {\n    fileCopy: {\n      files: '&lt;%= taskHelper.fileCopy.options.filesArray %&gt;'\n    }\n  }\n});\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#note_1","title":"Note","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#platforms","title":"Platforms","text":"<p>TTY interfaces are different by the platforms. If the platform doesn't support the interactively reading from TTY, an error is thrown.</p> <pre><code>try {\n  answer = readlineSync.question('What is your favorite food? ');\n} catch (e) {\n  console.error(e);\n  process.exit(1);\n}\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#control-characters","title":"Control characters","text":"<p>TTY interfaces are different by the platforms. In some environments, ANSI escape sequences might be ignored. For example, in non-POSIX TTY such as Windows CMD does not support it (that of Windows 8 especially has problems). Since readlineSync does not use Node.js library that emulates POSIX TTY (but that is still incomplete), those characters may be not parsed. Then, using ANSI escape sequences is not recommended if you will support more environments. Also, control characters user input might be not accepted or parsed. That behavior differs depending on the environment. And current Node.js does not support controlling a readline system library.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#reading-by-external-program","title":"Reading by external program","text":"<p>readlineSync tries to read from a console by using the external program if it is needed (e.g. when the input stream is redirected on Windows XP). And if the running Node.js doesn't support the Synchronous Process Execution (i.e. Node.js v0.10-), readlineSync uses \"piping via files\" for the synchronous execution. As everyone knows, \"piping via files\" is no good. It blocks the event loop and a process. It might make the your script be slow.</p> <p>Why did I choose it? :</p> <ul> <li>Good modules (native addon) for the synchronous execution exist, but node-gyp can't compile those in some platforms or Node.js versions.</li> <li>I think that the security is important more than the speed. Some modules have problem about security. Those don't protect the data. I think that the speed is not needed usually, because readlineSync is used while user types keys.</li> </ul>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/#deprecated-methods-and-options","title":"Deprecated methods and options","text":"<p>See README-Deprecated.md.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/README-Deprecated/","title":"readlineSync","text":""},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/README-Deprecated/#deprecated-methods-and-options","title":"Deprecated Methods and Options","text":"<p>The readlineSync current version is fully compatible with older version. The following methods and options are deprecated.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/README-Deprecated/#setprint-method","title":"<code>setPrint</code> method","text":"<p>Use the <code>print</code> option. For the Default Options, use:</p> <pre><code>readlineSync.setDefaultOptions({print: value});\n</code></pre> <p>instead of:</p> <pre><code>readlineSync.setPrint(value);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/README-Deprecated/#setprompt-method","title":"<code>setPrompt</code> method","text":"<p>Use the <code>prompt</code> option. For the Default Options, use:</p> <pre><code>readlineSync.setDefaultOptions({prompt: value});\n</code></pre> <p>instead of:</p> <pre><code>readlineSync.setPrompt(value);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/README-Deprecated/#setencoding-method","title":"<code>setEncoding</code> method","text":"<p>Use the <code>encoding</code> option. For the Default Options, use:</p> <pre><code>readlineSync.setDefaultOptions({encoding: value});\n</code></pre> <p>instead of:</p> <pre><code>readlineSync.setEncoding(value);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/README-Deprecated/#setmask-method","title":"<code>setMask</code> method","text":"<p>Use the <code>mask</code> option. For the Default Options, use:</p> <pre><code>readlineSync.setDefaultOptions({mask: value});\n</code></pre> <p>instead of:</p> <pre><code>readlineSync.setMask(value);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/README-Deprecated/#setbuffersize-method","title":"<code>setBufferSize</code> method","text":"<p>Use the <code>bufferSize</code> option. For the Default Options, use:</p> <pre><code>readlineSync.setDefaultOptions({bufferSize: value});\n</code></pre> <p>instead of:</p> <pre><code>readlineSync.setBufferSize(value);\n</code></pre>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/README-Deprecated/#noechoback-option","title":"<code>noEchoBack</code> option","text":"<p>Use <code>hideEchoBack</code> option instead of it.</p>"},{"location":"ut2-manejo-de-la-sintaxis-del-lenguaje/proyecto/node_modules/readline-sync/README-Deprecated/#notrim-option","title":"<code>noTrim</code> option","text":"<p>Use <code>keepWhitespace</code> option instead of it.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/","title":"\ud83c\udf1f Introducci\u00f3n a los Objetos Predefinidos en JavaScript \ud83d\ude80","text":"<p>JavaScript es un lenguaje poderoso y flexible que incluye una serie de objetos predefinidos que facilitan el desarrollo de aplicaciones web y permiten realizar tareas complejas de manera sencilla. En este art\u00edculo, exploraremos el concepto, las caracter\u00edsticas y algunas ventajas clave de los objetos predefinidos en JavaScript. Adem\u00e1s, veremos ejemplos pr\u00e1cticos de los objetos m\u00e1s utilizados para que puedas aprovechar todo su potencial en tus proyectos. \u00a1Empecemos! \ud83d\udcbb</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/#1-que-son-los-objetos-predefinidos-en-javascript","title":"\ud83d\udcda 1. \u00bfQu\u00e9 son los Objetos Predefinidos en JavaScript?","text":"<p>Los objetos predefinidos son elementos integrados en JavaScript que ofrecen funcionalidades b\u00e1sicas y avanzadas listas para usarse, sin la necesidad de escribir c\u00f3digo desde cero. Estos objetos abarcan desde manipulaciones num\u00e9ricas, textuales y de fechas hasta operaciones matem\u00e1ticas complejas y manejo de errores.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/#caracteristicas-principales","title":"\ud83d\udd0d Caracter\u00edsticas Principales","text":"<ul> <li>Integrados: Est\u00e1n disponibles de forma nativa en el entorno JavaScript.</li> <li>Versatilidad: Pueden ser utilizados para diferentes tipos de operaciones, como c\u00e1lculos matem\u00e1ticos, manipulaci\u00f3n de cadenas, entre otros.</li> <li>Facilitan el trabajo: Reducen la cantidad de c\u00f3digo que necesitas escribir, aumentando la eficiencia y productividad.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/#2-ventajas-de-utilizar-objetos-predefinidos","title":"\u2705 2. Ventajas de Utilizar Objetos Predefinidos","text":"<ol> <li>\ud83d\ude80 Simplificaci\u00f3n del C\u00f3digo: Aprovechan funciones ya optimizadas y probadas para realizar tareas comunes.</li> <li>\u23f1\ufe0f Ahorro de Tiempo: No necesitas implementar funciones desde cero, ya que el lenguaje provee soluciones listas.</li> <li>\ud83d\udee0\ufe0f Mantenimiento F\u00e1cil: El uso de funciones est\u00e1ndar reduce la probabilidad de errores y facilita el mantenimiento del c\u00f3digo.</li> <li>\ud83d\udcca Optimizaci\u00f3n de Desempe\u00f1o: Los objetos predefinidos est\u00e1n optimizados por los motores de JavaScript, lo que mejora la eficiencia.</li> </ol>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/#3-ejemplos-de-objetos-predefinidos-comunes","title":"\ud83c\udfaf 3. Ejemplos de Objetos Predefinidos Comunes","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/#string","title":"\ud83d\udcdd String","text":"<p>El objeto <code>String</code> te permite manipular texto de manera eficiente. Puedes hacer operaciones como convertir a may\u00fasculas, recortar espacios, y mucho m\u00e1s.</p> <pre><code>let saludo = \"Hola, Mundo!\";\nconsole.log(saludo.toUpperCase()); // Output: HOLA, MUNDO!\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/#date","title":"\ud83d\udcc5 Date","text":"<p>El objeto <code>Date</code> es ideal para trabajar con fechas y horas. Desde obtener la fecha actual hasta calcular diferencias de tiempo, este objeto es esencial en cualquier proyecto.</p> <pre><code>let fechaActual = new Date();\nconsole.log(fechaActual); // Output: Sat Sep 27 2024 14:53:00 GMT-0400 (Eastern Daylight Time)\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/#math","title":"\ud83d\udcca Math","text":"<p>El objeto <code>Math</code> provee una variedad de funciones matem\u00e1ticas como redondeo, c\u00e1lculo de potencias y generaci\u00f3n de n\u00fameros aleatorios.</p> <pre><code>let numeroAleatorio = Math.random();\nconsole.log(numeroAleatorio); // Output: 0.482879237917748 (el n\u00famero cambia cada vez)\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/#json","title":"\ud83c\udf10 JSON","text":"<p>El objeto <code>JSON</code> es clave para trabajar con datos en formato JSON, especialmente cuando intercambias informaci\u00f3n entre el cliente y el servidor.</p> <pre><code>let objeto = { nombre: \"Juan\", edad: 30 };\nlet jsonString = JSON.stringify(objeto);\nconsole.log(jsonString); // Output: {\"nombre\":\"Juan\",\"edad\":30}\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/#error","title":"\ud83d\uded1 Error","text":"<p>Manejar errores de manera eficiente es posible gracias al objeto <code>Error</code>, que te ayuda a identificar y responder a problemas en el c\u00f3digo.</p> <pre><code>try {\n  throw new Error(\"Algo sali\u00f3 mal\");\n} catch (error) {\n  console.error(error.message); // Output: Algo sali\u00f3 mal\n}\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/1introduccion/#conclusion","title":"\ud83d\ude80 Conclusi\u00f3n","text":"<p>Los objetos predefinidos en JavaScript son herramientas poderosas que facilitan enormemente el desarrollo web. Conocer y dominar estos objetos te permitir\u00e1 escribir c\u00f3digo m\u00e1s limpio, eficiente y f\u00e1cil de mantener. \u00a1Aprovecha al m\u00e1ximo lo que JavaScript tiene para ofrecer y lleva tus proyectos al siguiente nivel! \ud83c\udf10\ud83d\udee0\ufe0f</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/","title":"\ud83c\udf10 Explorando los Objetos Nativos de JavaScript \ud83d\ude80","text":"<p>JavaScript ofrece una amplia gama de objetos nativos que son esenciales para el desarrollo web. Estos objetos nos permiten manipular datos de diversas formas, haciendo que nuestro c\u00f3digo sea m\u00e1s eficiente y f\u00e1cil de mantener. En esta secci\u00f3n, exploraremos los objetos nativos m\u00e1s importantes, sus m\u00e9todos y propiedades clave, y ejemplos pr\u00e1cticos para que puedas aprovecharlos al m\u00e1ximo. \u00a1Prep\u00e1rate para descubrir c\u00f3mo estos objetos pueden transformar tu c\u00f3digo! \ud83d\udca1\ud83d\udcca</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#2-objetos-nativos-del-lenguaje-en-javascript","title":"\ud83d\udccc 2. Objetos Nativos del Lenguaje en JavaScript","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#objetos-basicos","title":"\ud83d\udee0\ufe0f Objetos B\u00e1sicos","text":"<p>Los objetos b\u00e1sicos en JavaScript incluyen <code>Object</code>, <code>Array</code>, <code>String</code>, <code>Number</code>, <code>Date</code>, y <code>Math</code>. Estos objetos forman la base de casi todas las operaciones que realizas al programar en JavaScript. A continuaci\u00f3n, desglosamos cada uno de ellos:</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#1-object-el-fundamento-de-todo","title":"1. Object: El Fundamento de Todo \ud83e\uddf1","text":"<p>El objeto <code>Object</code> es la piedra angular de JavaScript; permite almacenar colecciones de pares clave-valor. Es ideal para representar entidades complejas y estructuradas.</p> <pre><code>let persona = {\n  nombre: \"Ana\",\n  edad: 28,\n  profesion: \"Desarrolladora\"\n};\n\nconsole.log(persona.nombre); // Output: Ana\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#metodos-y-propiedades-comunes","title":"\ud83d\udd11 M\u00e9todos y Propiedades Comunes:","text":"<ul> <li><code>Object.keys(obj)</code>: Devuelve un array con las claves del objeto.</li> <li><code>Object.values(obj)</code>: Devuelve un array con los valores del objeto.</li> <li><code>Object.entries(obj)</code>: Devuelve un array de pares <code>[clave, valor]</code>.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#2-array-la-lista-dinamica","title":"2. Array: La Lista Din\u00e1mica \ud83d\udcdd","text":"<p>Los arrays (<code>Array</code>) son estructuras de datos que permiten almacenar elementos en un orden espec\u00edfico, permitiendo acceder a ellos mediante \u00edndices.</p> <pre><code>let numeros = [10, 20, 30, 40];\nnumeros.push(50); // Agrega un elemento al final\nconsole.log(numeros); // Output: [10, 20, 30, 40, 50]\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#metodos-y-propiedades-comunes_1","title":"\ud83d\udccc M\u00e9todos y Propiedades Comunes:","text":"<ul> <li><code>push()</code>: A\u00f1ade un elemento al final del array.</li> <li><code>pop()</code>: Elimina el \u00faltimo elemento.</li> <li><code>map()</code>: Itera sobre los elementos y devuelve un nuevo array.</li> <li><code>filter()</code>: Filtra los elementos seg\u00fan una condici\u00f3n dada.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#3-string-manipulando-texto","title":"3. String: Manipulando Texto \ud83d\udcdd\ud83d\udd8b\ufe0f","text":"<p>El objeto <code>String</code> te permite manejar y manipular cadenas de texto. Desde cambiar a may\u00fasculas hasta reemplazar caracteres, <code>String</code> tiene todo lo que necesitas para trabajar con texto.</p> <pre><code>let mensaje = \"Hola Mundo!\";\nconsole.log(mensaje.replace(\"Mundo\", \"JavaScript\")); // Output: Hola JavaScript!\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#metodos-y-propiedades-comunes_2","title":"\u2728 M\u00e9todos y Propiedades Comunes:","text":"<ul> <li><code>length</code>: Devuelve la longitud de la cadena.</li> <li><code>toUpperCase()</code>: Convierte la cadena a may\u00fasculas.</li> <li><code>slice()</code>: Extrae una secci\u00f3n de la cadena.</li> <li><code>replace()</code>: Reemplaza partes de la cadena por otro texto.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#4-number-operando-con-numeros","title":"4. Number: Operando con N\u00fameros \ud83d\udd22","text":"<p><code>Number</code> es el objeto que representa y manipula n\u00fameros en JavaScript. Ideal para c\u00e1lculos y conversiones entre diferentes formatos num\u00e9ricos.</p> <pre><code>let numero = 42.7;\nconsole.log(numero.toFixed(1)); // Output: 42.7\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#metodos-y-propiedades-comunes_3","title":"\ud83d\ude80 M\u00e9todos y Propiedades Comunes:","text":"<ul> <li><code>toFixed()</code>: Redondea el n\u00famero a un n\u00famero fijo de decimales.</li> <li><code>isNaN()</code>: Verifica si el valor no es un n\u00famero.</li> <li><code>parseInt()</code> y <code>parseFloat()</code>: Convierte cadenas a n\u00fameros.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#5-date-trabajando-con-fechas-y-horas","title":"5. Date: Trabajando con Fechas y Horas \ud83d\udcc5\ud83d\udd52","text":"<p>El objeto <code>Date</code> facilita la manipulaci\u00f3n de fechas y horas, lo que es vital para calendarios, tiempos de eventos, y m\u00e1s.</p> <pre><code>let ahora = new Date();\nconsole.log(ahora.toLocaleDateString()); // Output: 27/9/2024\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#metodos-y-propiedades-comunes_4","title":"\ud83d\udcc5 M\u00e9todos y Propiedades Comunes:","text":"<ul> <li><code>getFullYear()</code>: Obtiene el a\u00f1o completo.</li> <li><code>getMonth()</code>: Devuelve el mes (0-11).</li> <li><code>getDate()</code>: Obtiene el d\u00eda del mes.</li> <li><code>getTime()</code>: Devuelve los milisegundos desde el 1 de enero de 1970.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#6-math-potente-y-preciso-para-calculos","title":"6. Math: Potente y Preciso para C\u00e1lculos \ud83e\uddee\u2728","text":"<p><code>Math</code> es un objeto est\u00e1tico que ofrece funciones matem\u00e1ticas y constantes, esenciales para cualquier operaci\u00f3n num\u00e9rica avanzada.</p> <pre><code>let area = Math.PI * Math.pow(5, 2); // \u00c1rea de un c\u00edrculo con radio 5\nconsole.log(area); // Output: 78.53981633974483\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#metodos-y-propiedades-comunes_5","title":"\ud83e\uddee M\u00e9todos y Propiedades Comunes:","text":"<ul> <li><code>Math.PI</code>: El valor de \u03c0.</li> <li><code>Math.round()</code>: Redondea al n\u00famero entero m\u00e1s cercano.</li> <li><code>Math.sqrt()</code>: Calcula la ra\u00edz cuadrada.</li> <li><code>Math.random()</code>: Genera un n\u00famero aleatorio entre 0 y 1.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/2objetosnativosdellenguaje/#ejemplos-practicos-de-uso","title":"\ud83d\udd0d Ejemplos Pr\u00e1cticos de Uso","text":"<p>Imagina un escenario donde necesitas calcular la fecha exacta de un evento en el futuro y presentar un mensaje personalizado a los usuarios. Puedes combinar <code>Date</code> y <code>String</code> para lograrlo:</p> <pre><code>let evento = new Date(\"2024-12-31\");\nlet diasRestantes = Math.ceil((evento - new Date()) / (1000 * 60 * 60 * 24));\n\nconsole.log(`Faltan ${diasRestantes} d\u00edas para el evento. \u00a1No te lo pierdas!`);\n// Output: Faltan 95 d\u00edas para el evento. \u00a1No te lo pierdas!\n</code></pre> <p>Este ejemplo muestra c\u00f3mo utilizar los objetos <code>Date</code> y <code>Math</code> para crear una experiencia m\u00e1s interactiva y din\u00e1mica para los usuarios.</p> <p>\u00a1Experimenta con estos objetos y descubre nuevas maneras de mejorar tus aplicaciones con JavaScript! Si tienes dudas o quieres profundizar en alg\u00fan tema espec\u00edfico, \u00a1escr\u00edbelo y seguimos aprendiendo juntos! \ud83c\udf1f\ud83d\udc68\u200d\ud83d\udcbb\ud83d\udc69\u200d\ud83d\udcbb</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/","title":"Interacci\u00f3n con el Navegador: Objetos Predefinidos Asociados","text":"<p>JavaScript nos permite una interacci\u00f3n rica con el navegador gracias a objetos predefinidos. Estos objetos nos permiten manipular el entorno del navegador, controlar ventanas emergentes, gestionar la navegaci\u00f3n y mucho m\u00e1s. A continuaci\u00f3n, exploramos los principales objetos y m\u00e9todos que podemos utilizar.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#1-window-el-contenedor-global-del-navegador","title":"\ud83c\udf1f 1. <code>window</code>: El Contenedor Global del Navegador","text":"<p>El objeto <code>window</code> es el contenedor global donde se ejecuta todo el c\u00f3digo JavaScript en el navegador. Nos da acceso a funcionalidades como la apertura de nuevas ventanas, la interacci\u00f3n con el usuario y la manipulaci\u00f3n del estado de la ventana actual.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#control-de-ventanas-con-window","title":"\ud83d\uddbc\ufe0f Control de Ventanas con <code>window</code>","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#1-abrir-una-nueva-ventana-windowopen","title":"1. Abrir una nueva ventana: <code>window.open()</code>","text":"<p>Este m\u00e9todo permite abrir una nueva ventana o pesta\u00f1a en el navegador.</p> <pre><code>window.open('https://www.ejemplo.com', '_blank', 'width=600,height=400');\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li>URL: La direcci\u00f3n que se abrir\u00e1.</li> <li>Target: El destino (<code>_blank</code> abre una nueva pesta\u00f1a, <code>_self</code> abre en la pesta\u00f1a actual).</li> <li>Caracter\u00edsticas: Como el tama\u00f1o de la ventana, barras de desplazamiento, etc.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#2-cerrar-la-ventana-actual-windowclose","title":"2. Cerrar la ventana actual: <code>window.close()</code>","text":"<p>Permite cerrar la ventana o pesta\u00f1a actual, o bien una ventana abierta previamente por <code>window.open()</code>.</p> <pre><code>window.close();\n</code></pre> <p>\u26a0\ufe0f Este m\u00e9todo solo funciona en ventanas que fueron abiertas por <code>window.open()</code> y puede estar restringido por algunos navegadores por razones de seguridad.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#3-mover-la-ventana-windowmoveto","title":"3. Mover la ventana: <code>window.moveTo()</code>","text":"<p>Este m\u00e9todo permite mover la ventana a una nueva posici\u00f3n en la pantalla, definiendo las coordenadas X e Y.</p> <pre><code>window.moveTo(100, 150); // Mueve la ventana a la posici\u00f3n (100, 150) en la pantalla\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#4-cambiar-el-tamano-de-la-ventana-windowresizeto","title":"4. Cambiar el tama\u00f1o de la ventana: <code>window.resizeTo()</code>","text":"<p>Permite ajustar el tama\u00f1o de la ventana del navegador a un valor espec\u00edfico de ancho y alto.</p> <pre><code>window.resizeTo(800, 600); // Cambia el tama\u00f1o de la ventana a 800px de ancho y 600px de alto\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#interaccion-con-el-usuario-alertas-confirmaciones-y-prompts","title":"\ud83d\udd14 Interacci\u00f3n con el Usuario: Alertas, Confirmaciones y Prompts","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#1-mostrar-una-alerta-windowalert","title":"1. Mostrar una alerta: <code>window.alert()</code>","text":"<p>Muestra un cuadro de alerta simple con un mensaje. El usuario debe cerrarlo para continuar.</p> <pre><code>window.alert('Este es un mensaje de alerta.');\n</code></pre> <p>Es ideal para mostrar mensajes informativos r\u00e1pidos, aunque su uso frecuente puede ser molesto para los usuarios.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#2-solicitar-confirmacion-windowconfirm","title":"2. Solicitar confirmaci\u00f3n: <code>window.confirm()</code>","text":"<p>Este m\u00e9todo muestra un cuadro de di\u00e1logo con un mensaje y botones de confirmaci\u00f3n (\"Aceptar\" o \"Cancelar\"). Retorna <code>true</code> si el usuario presiona \"Aceptar\" y <code>false</code> si presiona \"Cancelar\".</p> <pre><code>let decision = window.confirm('\u00bfEst\u00e1s seguro de que deseas continuar?');\nif (decision) {\n  console.log('El usuario acept\u00f3');\n} else {\n  console.log('El usuario cancel\u00f3');\n}\n</code></pre> <p>\u00datil cuando necesitas que el usuario confirme una acci\u00f3n importante, como eliminar un archivo.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#3-solicitar-entrada-del-usuario-windowprompt","title":"3. Solicitar entrada del usuario: <code>window.prompt()</code>","text":"<p>Este m\u00e9todo muestra un cuadro de di\u00e1logo que solicita al usuario una entrada de texto. Retorna el texto ingresado o <code>null</code> si el usuario cancela la operaci\u00f3n.</p> <pre><code>let nombre = window.prompt('\u00bfCu\u00e1l es tu nombre?', 'Nombre por defecto');\nconsole.log('El nombre ingresado es: ' + nombre);\n</code></pre> <p>Puedes usarlo para recolectar datos r\u00e1pidos, aunque es preferible usar formularios HTML para entradas m\u00e1s complejas.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#2-document-manipulando-el-dom","title":"\ud83c\udfd7\ufe0f 2. <code>document</code>: Manipulando el DOM","text":"<p>El objeto <code>document</code> nos proporciona una interfaz para manipular la estructura del DOM (Document Object Model), que es esencialmente la estructura de la p\u00e1gina web. Podemos seleccionar, crear y modificar elementos HTML directamente desde JavaScript.</p> <pre><code>// Cambiar el contenido de un elemento con ID \"titulo\"\ndocument.getElementById('titulo').innerText = '\u00a1Hola, Mundo!';\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#metodos-clave-del-objeto-document","title":"M\u00e9todos clave del objeto <code>document</code>:","text":"<ul> <li><code>getElementById()</code>: Selecciona un elemento por su ID.</li> <li><code>querySelector()</code>: Selecciona el primer elemento que coincida con un selector CSS.</li> <li><code>createElement()</code>: Crea un nuevo elemento HTML.</li> </ul> <pre><code>// Crear un nuevo p\u00e1rrafo y a\u00f1adirlo al cuerpo\nlet parrafo = document.createElement('p');\nparrafo.innerText = 'Este es un nuevo p\u00e1rrafo.';\ndocument.body.appendChild(parrafo);\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#3-navigator-informacion-sobre-el-navegador","title":"\ud83d\udd04 3. <code>navigator</code>: Informaci\u00f3n sobre el Navegador","text":"<p>El objeto <code>navigator</code> proporciona informaci\u00f3n sobre el navegador y el dispositivo que est\u00e1 utilizando el usuario, como la geolocalizaci\u00f3n, si est\u00e1 en l\u00ednea y su idioma preferido.</p> <pre><code>console.log(navigator.userAgent); // Informaci\u00f3n sobre el navegador y el sistema\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#propiedades-clave-de-navigator","title":"Propiedades clave de <code>navigator</code>:","text":"<ul> <li><code>navigator.geolocation</code>: Acceso a la geolocalizaci\u00f3n del dispositivo.</li> <li><code>navigator.onLine</code>: Saber si el usuario tiene conexi\u00f3n a Internet.</li> <li><code>navigator.language</code>: El idioma preferido del navegador.</li> </ul> <pre><code>if (navigator.onLine) {\n  console.log(\"Conexi\u00f3n a Internet disponible.\");\n} else {\n  console.log(\"Est\u00e1s desconectado.\");\n}\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#4-history-control-del-historial-de-navegacion","title":"\u23f3 4. <code>history</code>: Control del Historial de Navegaci\u00f3n","text":"<p>El objeto <code>history</code> permite navegar hacia adelante o hacia atr\u00e1s en el historial del navegador, sin necesidad de recargar la p\u00e1gina. Tambi\u00e9n puedes manipular el historial para gestionar aplicaciones SPA (Single Page Applications).</p> <pre><code>history.back();  // Regresar a la p\u00e1gina anterior\nhistory.forward();  // Avanzar a la siguiente p\u00e1gina\n</code></pre> <p>Tambi\u00e9n puedes a\u00f1adir estados personalizados al historial mediante:</p> <pre><code>history.pushState({ page: 2 }, 'T\u00edtulo', '/pagina2');\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#5-location-manipulacion-de-la-url","title":"\ud83c\udf0d 5. <code>location</code>: Manipulaci\u00f3n de la URL","text":"<p>El objeto <code>location</code> permite trabajar con la URL de la p\u00e1gina actual. Puedes cambiar la URL, redirigir al usuario o recargar la p\u00e1gina sin necesidad de recargar todo el documento.</p> <pre><code>console.log(location.href);  // URL completa actual\nlocation.reload();  // Recargar la p\u00e1gina\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/3interaccionconelnavegador/#conclusion","title":"\ud83d\ude80 Conclusi\u00f3n","text":"<p>Los objetos predefinidos como <code>window</code>, <code>document</code>, <code>navigator</code>, <code>history</code> y <code>location</code> en JavaScript ofrecen una rica interfaz para interactuar con el navegador y el DOM. Estos m\u00e9todos te permiten controlar las ventanas, interactuar con los usuarios mediante cuadros de di\u00e1logo y gestionar el historial de navegaci\u00f3n de manera efectiva. \u00a1Con estas herramientas, puedes crear experiencias de usuario m\u00e1s din\u00e1micas e interactivas!</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/","title":"\ud83c\udf1f Generaci\u00f3n de Texto y Elementos HTML desde C\u00f3digo en JavaScript","text":"<p>JavaScript es extremadamente poderoso cuando se trata de generar y manipular elementos HTML desde el c\u00f3digo. Esta capacidad de modificar din\u00e1micamente el DOM (Document Object Model) en tiempo real nos permite crear experiencias de usuario interactivas y m\u00e1s envolventes. Hoy veremos c\u00f3mo crear y manipular elementos HTML, y c\u00f3mo estos cambios afectan el DOM.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#que-es-el-dom","title":"\ud83d\udcda \u00bfQu\u00e9 es el DOM?","text":"<p>El DOM (Document Object Model) es una representaci\u00f3n estructurada del documento HTML. Es como un \u00e1rbol, donde cada nodo representa una parte del documento (etiquetas, atributos, texto, etc.). Este \u00e1rbol es manipulable con JavaScript, lo que nos permite crear, eliminar o modificar elementos del HTML directamente desde el c\u00f3digo.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#crear-y-anadir-elementos-html-desde-javascript","title":"\ud83c\udfd7\ufe0f Crear y A\u00f1adir Elementos HTML desde JavaScript","text":"<p>Usamos el m\u00e9todo <code>document.createElement()</code> para crear nuevos elementos HTML. Luego podemos a\u00f1adir estos elementos al DOM con m\u00e9todos como <code>appendChild()</code>.</p> <pre><code>// Crear un nuevo p\u00e1rrafo\nlet nuevoParrafo = document.createElement('p');\nnuevoParrafo.innerText = 'Este es un p\u00e1rrafo generado din\u00e1micamente';\n\n// A\u00f1adir el p\u00e1rrafo al cuerpo del documento\ndocument.body.appendChild(nuevoParrafo);\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#visualizacion-en-el-dom","title":"\ud83e\udde9 Visualizaci\u00f3n en el DOM:","text":"<pre><code>graph TD\n  A[document] --&gt; B[html]\n  B --&gt; C[body]\n  C --&gt; D[Existente &lt;p&gt;]\n  C --&gt; E[Nuevo &lt;p&gt; Este es un p\u00e1rrafo generado din\u00e1micamente]</code></pre> <p>En este caso, estamos a\u00f1adiendo un nuevo p\u00e1rrafo din\u00e1mico al final del cuerpo (<code>body</code>) del documento.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#anadir-listas-dinamicas","title":"\ud83c\udfa8 A\u00f1adir Listas Din\u00e1micas","text":"<p>Generemos una lista desordenada (ul) de elementos (li) basados en un arreglo de datos, como los nombres de frutas.</p> <pre><code>let frutas = ['Manzana', 'Banana', 'Cereza'];\n\n// Crear la lista desordenada\nlet listaFrutas = document.createElement('ul');\n\n// A\u00f1adir elementos de lista din\u00e1micamente\nfrutas.forEach(fruta =&gt; {\n    let item = document.createElement('li');\n    item.innerText = fruta;\n    listaFrutas.appendChild(item);\n});\n\n// A\u00f1adir la lista al cuerpo del documento\ndocument.body.appendChild(listaFrutas);\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#visualizacion-en-el-dom_1","title":"\ud83e\udde9 Visualizaci\u00f3n en el DOM:","text":"<pre><code>graph TD\n  A[document] --&gt; B[html]\n  B --&gt; C[body]\n  C --&gt; D[ul]\n  D --&gt; E[li Manzana]\n  D --&gt; F[li Banana]\n  D --&gt; G[li Cereza]</code></pre> <p>En este ejemplo, generamos y agregamos din\u00e1micamente una lista desordenada con tres elementos: Manzana, Banana, y Cereza.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#modificacion-de-elementos-existentes","title":"\ud83e\uddf1 Modificaci\u00f3n de Elementos Existentes","text":"<p>Adem\u00e1s de crear nuevos elementos, podemos modificar elementos ya existentes en el DOM usando m\u00e9todos como <code>getElementById()</code> o <code>querySelector()</code> para seleccionarlos y luego modificar sus propiedades o su contenido.</p> <pre><code>// Seleccionamos un elemento con ID 'titulo'\nlet titulo = document.getElementById('titulo');\n\n// Cambiamos su texto\ntitulo.innerText = 'Nuevo t\u00edtulo din\u00e1mico';\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#visualizacion-en-el-dom_2","title":"\ud83e\udde9 Visualizaci\u00f3n en el DOM:","text":"<pre><code>graph TD\n  A[document] --&gt; B[html]\n  B --&gt; C[body]\n  C --&gt; D[h1]\n  D --&gt; E[Nuevo t\u00edtulo din\u00e1mico]</code></pre> <p>Este ejemplo modifica el texto de un encabezado (<code>h1</code>) ya existente con el <code>id=\"titulo\"</code>.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#eventos-interactivos-y-dinamismo-en-el-dom","title":"\ud83c\udfaf Eventos Interactivos y Dinamismo en el DOM","text":"<p>La verdadera magia sucede cuando combinamos la creaci\u00f3n din\u00e1mica de elementos con eventos que responden a las interacciones del usuario. Veamos un ejemplo donde creamos un bot\u00f3n que, al hacer clic, a\u00f1ade una nueva tarea a una lista de tareas pendientes.</p> <pre><code>// Crear lista y bot\u00f3n\nlet listaTareas = document.createElement('ul');\nlet botonAgregar = document.createElement('button');\nbotonAgregar.innerText = 'A\u00f1adir Tarea';\ndocument.body.appendChild(listaTareas);\ndocument.body.appendChild(botonAgregar);\n\n// A\u00f1adir evento al bot\u00f3n\nbotonAgregar.addEventListener('click', () =&gt; {\n    let nuevaTarea = document.createElement('li');\n    nuevaTarea.innerText = 'Nueva Tarea';\n    listaTareas.appendChild(nuevaTarea);\n});\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#visualizacion-en-el-dom_3","title":"\ud83e\udde9 Visualizaci\u00f3n en el DOM:","text":"<pre><code>graph TD\n  A[document] --&gt; B[html]\n  B --&gt; C[body]\n  C --&gt; D[ul 'listaTareas']\n  C --&gt; E[button 'A\u00f1adir Tarea']\n  D --&gt; F[li Nueva Tarea]  </code></pre> <p>En este caso, cada vez que el usuario hace clic en el bot\u00f3n \"A\u00f1adir Tarea\", se a\u00f1ade din\u00e1micamente un nuevo elemento de lista al DOM.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#generacion-dinamica-de-formularios","title":"\ud83c\udf10 Generaci\u00f3n Din\u00e1mica de Formularios","text":"<p>JavaScript tambi\u00e9n permite generar formularios completos din\u00e1micamente. Veamos c\u00f3mo crear un formulario con un campo de texto y un bot\u00f3n de env\u00edo, y c\u00f3mo podemos agregar validaciones b\u00e1sicas.</p> <pre><code>// Crear el formulario\nlet formulario = document.createElement('form');\n\n// Campo de texto\nlet campoNombre = document.createElement('input');\ncampoNombre.type = 'text';\ncampoNombre.placeholder = 'Escribe tu nombre';\nformulario.appendChild(campoNombre);\n\n// Bot\u00f3n de env\u00edo\nlet botonEnviar = document.createElement('button');\nbotonEnviar.type = 'submit';\nbotonEnviar.innerText = 'Enviar';\nformulario.appendChild(botonEnviar);\n\n// A\u00f1adir el formulario al documento\ndocument.body.appendChild(formulario);\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#visualizacion-en-el-dom_4","title":"\ud83e\udde9 Visualizaci\u00f3n en el DOM:","text":"<pre><code>graph TD\n  A[document] --&gt; B[html]\n  B --&gt; C[body]\n  C --&gt; D[form]\n  D --&gt; E[input 'text']\n  D --&gt; F[button 'Enviar']</code></pre> <p>Este c\u00f3digo genera un formulario b\u00e1sico que incluye un campo de entrada de texto y un bot\u00f3n para enviar los datos.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#manipulacion-dinamica-del-dom-con-condiciones","title":"\ud83d\udd04 Manipulaci\u00f3n Din\u00e1mica del DOM con Condiciones","text":"<p>A veces queremos a\u00f1adir o modificar elementos HTML en funci\u00f3n de una condici\u00f3n. En el siguiente ejemplo, verificamos si el n\u00famero de elementos de una lista es mayor a tres antes de permitir que se a\u00f1adan m\u00e1s.</p> <pre><code>let listaItems = document.createElement('ul');\ndocument.body.appendChild(listaItems);\n\nlet botonAgregarItem = document.createElement('button');\nbotonAgregarItem.innerText = 'A\u00f1adir Item';\ndocument.body.appendChild(botonAgregarItem);\n\nbotonAgregarItem.addEventListener('click', () =&gt; {\n    if (listaItems.children.length &lt; 3) {\n        let item = document.createElement('li');\n        item.innerText = `Item ${listaItems.children.length + 1}`;\n        listaItems.appendChild(item);\n    } else {\n        alert('No puedes a\u00f1adir m\u00e1s de 3 items');\n    }\n});\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#visualizacion-en-el-dom-con-condiciones","title":"\ud83e\udde9 Visualizaci\u00f3n en el DOM con Condiciones:","text":"<pre><code>graph TD\n  A[document] --&gt; B[html]\n  B --&gt; C[body]\n  C --&gt; D[ul 'listaItems']\n  D --&gt; E[li 'Item 1']\n  D --&gt; F[li 'Item 2']\n  D --&gt; G[li 'Item 3']\n  C --&gt; H[button 'A\u00f1adir Item']</code></pre> <p>En este ejemplo, despu\u00e9s de que se han a\u00f1adido tres elementos a la lista, aparece un mensaje de alerta indicando que no se pueden a\u00f1adir m\u00e1s.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/4generaciondehtmldesdecodigo/#conclusion","title":"\ud83d\ude80 Conclusi\u00f3n","text":"<p>La generaci\u00f3n din\u00e1mica de elementos HTML con JavaScript te permite crear p\u00e1ginas web m\u00e1s interactivas y personalizadas, basadas en las acciones del usuario o datos externos. A trav\u00e9s de m\u00e9todos como <code>createElement()</code>, <code>appendChild()</code>, y la manipulaci\u00f3n directa del DOM, puedes generar contenido sobre la marcha y modificar la estructura del documento.</p> <p>Ya sea para a\u00f1adir elementos interactivos, formularios, o listas din\u00e1micas, JavaScript es tu herramienta esencial para hacer que el contenido de tu p\u00e1gina sea adaptable y flexible. \u00a1Es hora de experimentar y aprovechar todo el poder que JavaScript tiene para ofrecer en el DOM! \ud83d\udcbb\ud83c\udf89</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/","title":"\ud83d\ude80 Aplicaciones Pr\u00e1cticas de los Marcos en JavaScript","text":"<p>JavaScript es un lenguaje tan flexible que permite crear estructuras de c\u00f3digo reutilizables a trav\u00e9s de marcos (frameworks). Estos marcos, como React, Vue, Angular, y otros, est\u00e1n dise\u00f1ados para facilitar el desarrollo de aplicaciones web din\u00e1micas y potentes, proporcionando herramientas y estructuras que aceleran la creaci\u00f3n de funcionalidades complejas.</p> <p>A continuaci\u00f3n, exploraremos c\u00f3mo estos marcos pueden aplicarse en proyectos reales, y te mostraremos ejemplos claros de su uso. \ud83c\udfaf</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#1-aplicaciones-de-una-sola-pagina-spa","title":"\ud83e\udde9 1. Aplicaciones de Una Sola P\u00e1gina (SPA)","text":"<p>Una de las aplicaciones m\u00e1s comunes de los marcos en JavaScript es la creaci\u00f3n de Single Page Applications (SPA). Este tipo de aplicaciones cargan todo el contenido HTML, CSS y JavaScript una sola vez, y luego permiten que el contenido de la p\u00e1gina cambie din\u00e1micamente sin recargar la p\u00e1gina.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#ejemplo-con-react","title":"Ejemplo con React","text":"<pre><code>import React, { useState } from 'react';\n\nfunction App() {\n  const [contador, setContador] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Contador: {contador}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#que-esta-pasando-aqui","title":"\ud83c\udf0d \u00bfQu\u00e9 est\u00e1 pasando aqu\u00ed?","text":"<ul> <li>Utilizamos el estado (<code>useState</code>) de React para manejar el valor del contador.</li> <li>Cuando el usuario hace clic en el bot\u00f3n, se actualiza el estado, lo que autom\u00e1ticamente actualiza la interfaz sin recargar la p\u00e1gina.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#diagrama-de-flujo-de-un-spa","title":"\ud83e\udde9 Diagrama de Flujo de un SPA","text":"<pre><code>flowchart TD\n    A[App se carga] --&gt; B[Usuario interact\u00faa]\n    B --&gt; C[Modificaci\u00f3n del estado]\n    C --&gt; D[Re-renderizado del componente]\n    D --&gt; A</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#2-aplicaciones-web-progresivas-pwa","title":"\ud83d\udcf1 2. Aplicaciones Web Progresivas (PWA)","text":"<p>Los marcos como Angular y Vue son ideales para crear Progressive Web Apps (PWA), aplicaciones que combinan lo mejor de las webs y las aplicaciones m\u00f3viles. Las PWAs son capaces de funcionar sin conexi\u00f3n, recibir notificaciones push y ser instaladas como aplicaciones nativas en dispositivos m\u00f3viles.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#ventajas-de-una-pwa","title":"Ventajas de una PWA:","text":"<ul> <li>Funciona offline: Gracias a Service Workers, tu aplicaci\u00f3n puede funcionar sin conexi\u00f3n.</li> <li>Instalable: Se puede instalar directamente en el dispositivo del usuario, sin necesidad de pasar por tiendas de aplicaciones.</li> <li>R\u00e1pida: Carga instant\u00e1neamente, ofreciendo una experiencia similar a una app nativa.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#ejemplo-de-configuracion-de-pwa-en-vue","title":"Ejemplo de configuraci\u00f3n de PWA en Vue","text":"<pre><code>// vue.config.js\nmodule.exports = {\n  pwa: {\n    name: 'Mi PWA',\n    themeColor: '#4DBA87',\n    msTileColor: '#000000',\n    appleMobileWebAppCapable: 'yes',\n    appleMobileWebAppStatusBarStyle: 'black',\n  }\n};\n</code></pre> <p>Este archivo de configuraci\u00f3n convierte una aplicaci\u00f3n Vue en una PWA, a\u00f1adiendo soporte para instalar la app en dispositivos m\u00f3viles y personalizando los colores y el aspecto.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#diagrama-de-flujo-de-una-pwa","title":"\ud83e\udde9 Diagrama de Flujo de una PWA","text":"<pre><code>flowchart TD\n    A[Usuario abre la aplicaci\u00f3n] --&gt; B[App carga datos desde cache]\n    B --&gt; C[Usuario interact\u00faa offline]\n    C --&gt; D[Cuando vuelve la conexi\u00f3n, se sincronizan los datos]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#3-dashboards-y-paneles-de-control","title":"\ud83d\udcbc 3. Dashboards y Paneles de Control","text":"<p>Otra aplicaci\u00f3n muy com\u00fan de los marcos es la creaci\u00f3n de dashboards interactivos. Estos paneles permiten a los usuarios visualizar datos en tiempo real, y los frameworks son la soluci\u00f3n perfecta para manejar la reactividad y la complejidad de las interfaces.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#ejemplo-con-angular","title":"Ejemplo con Angular","text":"<pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  template: `\n    &lt;div class=\"dashboard\"&gt;\n      &lt;h1&gt;Panel de Control&lt;/h1&gt;\n      &lt;div *ngFor=\"let widget of widgets\"&gt;\n        &lt;app-widget [data]=\"widget.data\"&gt;&lt;/app-widget&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `,\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent {\n  widgets = [\n    { data: 'Widget 1 Data' },\n    { data: 'Widget 2 Data' },\n  ];\n}\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#que-esta-pasando-aqui_1","title":"\ud83c\udf0d \u00bfQu\u00e9 est\u00e1 pasando aqu\u00ed?","text":"<ul> <li>Angular se utiliza para iterar din\u00e1micamente sobre un conjunto de widgets y renderizarlos en un panel de control.</li> <li>Cada widget es un componente independiente, lo que facilita su reutilizaci\u00f3n y mantenimiento.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#visualizacion-de-un-dashboard","title":"\ud83e\udde9 Visualizaci\u00f3n de un Dashboard","text":"<pre><code>graph TD\n    A[Dashboard] --&gt; B[Widget 1]\n    A --&gt; C[Widget 2]\n    A --&gt; D[Widget N]\n    B --&gt; E[Datos en tiempo real]\n    C --&gt; F[Gr\u00e1ficos interactivos]\n    D --&gt; G[Controles de usuario]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#4-comercio-electronico","title":"\ud83c\udfaf 4. Comercio Electr\u00f3nico","text":"<p>En proyectos de e-commerce, los marcos de JavaScript como Next.js (basado en React) y Nuxt.js (basado en Vue) ofrecen caracter\u00edsticas que permiten la creaci\u00f3n de sitios altamente optimizados para el SEO y la experiencia del usuario.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#ejemplo-de-componente-de-producto-en-nextjs","title":"Ejemplo de componente de producto en Next.js","text":"<pre><code>export default function Producto({ producto }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{producto.nombre}&lt;/h2&gt;\n      &lt;p&gt;{producto.descripcion}&lt;/p&gt;\n      &lt;p&gt;Precio: ${producto.precio}&lt;/p&gt;\n      &lt;button&gt;A\u00f1adir al carrito&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#ventajas-de-usar-frameworks-para-e-commerce","title":"Ventajas de usar frameworks para e-commerce:","text":"<ul> <li>Renderizado del lado del servidor (SSR): Mejora la velocidad de carga y la indexaci\u00f3n en buscadores.</li> <li>Componentizaci\u00f3n: Cada parte de la tienda (como un producto o un carrito) es un componente reutilizable y f\u00e1cil de gestionar.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#flujo-en-una-tienda-de-e-commerce","title":"\ud83e\udde9 Flujo en una Tienda de E-commerce","text":"<pre><code>flowchart TD\n    A[Usuario visita la tienda] --&gt; B[Selecciona producto]\n    B --&gt; C[A\u00f1adir al carrito]\n    C --&gt; D[Finalizar compra]\n    D --&gt; E[Confirmaci\u00f3n y pago]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#5-aplicaciones-de-machine-learning-en-javascript","title":"\ud83e\udde0 5. Aplicaciones de Machine Learning en JavaScript","text":"<p>Gracias a bibliotecas como TensorFlow.js, puedes incorporar machine learning en tus aplicaciones JavaScript utilizando frameworks como React y Vue para la interfaz.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#ejemplo-basico-de-tensorflowjs","title":"Ejemplo b\u00e1sico de TensorFlow.js","text":"<pre><code>import * as tf from '@tensorflow/tfjs';\n\n// Crear un modelo simple de regresi\u00f3n lineal\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 1, inputShape: [1]}));\n\nmodel.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n// Datos de entrenamiento\nconst xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\nconst ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n\n// Entrenar el modelo\nmodel.fit(xs, ys, {epochs: 500}).then(() =&gt; {\n  // Usar el modelo entrenado para predecir\n  model.predict(tf.tensor2d([5], [1, 1])).print();\n});\n</code></pre> <p>Con este c\u00f3digo, puedes crear un modelo simple de regresi\u00f3n lineal directamente en el navegador y predecir valores en tiempo real.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#diagrama-de-flujo-de-un-modelo-de-machine-learning","title":"\ud83e\udde9 Diagrama de Flujo de un Modelo de Machine Learning","text":"<pre><code>flowchart TD\n    A[Entrenamiento del modelo] --&gt; B[Modelo entrenado]\n    B --&gt; C[Predicci\u00f3n]\n    C --&gt; D[Mostrar resultados al usuario]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/5aplicacionespracticasdelosmarcos/#conclusion","title":"\ud83d\ude80 Conclusi\u00f3n","text":"<p>Los marcos en JavaScript ofrecen soluciones poderosas para una variedad de aplicaciones pr\u00e1cticas: desde la creaci\u00f3n de Single Page Applications (SPA) y Progressive Web Apps (PWA), hasta dashboards interactivos y e-commerce. La modularidad, escalabilidad y reactividad que brindan estos frameworks hacen que el desarrollo web sea m\u00e1s eficiente y din\u00e1mico, proporcionando experiencias de usuario atractivas e interactivas.</p> <p>\u00bfListo para llevar tus habilidades de JavaScript al siguiente nivel? \ud83d\udcbb</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/","title":"\ud83c\udfa8 Gesti\u00f3n de la Apariencia de la Ventana con JavaScript","text":"<p>JavaScript no solo te permite manipular el contenido de la p\u00e1gina, sino tambi\u00e9n controlar la apariencia de la ventana del navegador. Con algunos m\u00e9todos simples, puedes abrir, cerrar, mover, y redimensionar ventanas, ofreciendo una experiencia m\u00e1s personalizada al usuario. Aqu\u00ed te explico c\u00f3mo utilizar estos m\u00e9todos para gestionar la apariencia de las ventanas en tus proyectos web. \ud83c\udf1f</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#1-abrir-una-nueva-ventana-windowopen","title":"\ud83c\udf0d 1. Abrir una Nueva Ventana: <code>window.open()</code>","text":"<p>El m\u00e9todo <code>window.open()</code> permite abrir una nueva ventana o pesta\u00f1a. Puedes especificar la URL, el nombre de la ventana y sus caracter\u00edsticas (como su tama\u00f1o, si tiene barra de desplazamiento, etc.).</p> <pre><code>window.open('https://www.ejemplo.com', '_blank', 'width=800,height=600');\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#parametros","title":"Par\u00e1metros:","text":"<ul> <li>URL: La direcci\u00f3n a la que se abrir\u00e1 la nueva ventana.</li> <li>Target: Indica d\u00f3nde abrir la nueva p\u00e1gina. Por ejemplo, <code>_blank</code> abre una nueva pesta\u00f1a.</li> <li>Caracter\u00edsticas: Puedes controlar el tama\u00f1o de la ventana, si tiene bordes, si es redimensionable, etc.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#diagrama-de-flujo-de-windowopen","title":"\ud83e\udde9 Diagrama de Flujo de <code>window.open()</code>","text":"<pre><code>flowchart TD\n    A[Usuario hace clic en un bot\u00f3n] --&gt; B[Llamada a window.open()]\n    B --&gt; C[Se abre nueva ventana]\n    C --&gt; D[Nueva ventana muestra el contenido especificado]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#caso-practico-abrir-una-ventana-personalizada","title":"\ud83d\udd25 Caso pr\u00e1ctico: Abrir una ventana personalizada","text":"<p>Imagina que quieres abrir una ventana emergente cuando el usuario hace clic en un bot\u00f3n para mostrar un aviso o notificaci\u00f3n. El siguiente c\u00f3digo logra esto:</p> <pre><code>document.getElementById('btnAbrirVentana').addEventListener('click', () =&gt; {\n  window.open('https://www.ejemplo.com', '_blank', 'width=500,height=400');\n});\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#2-cerrar-la-ventana-actual-windowclose","title":"\u274c 2. Cerrar la Ventana Actual: <code>window.close()</code>","text":"<p>Si alguna vez necesitas cerrar una ventana de navegador de manera programada, puedes hacerlo con <code>window.close()</code>. Esto es \u00fatil para ventanas emergentes o ventanas abiertas por el usuario.</p> <pre><code>window.close();  // Cierra la ventana actual\n</code></pre> <p>\u26a0\ufe0f Nota: Solo puedes cerrar ventanas que fueron abiertas por <code>window.open()</code>. Adem\u00e1s, los navegadores pueden bloquear este comportamiento para evitar cierres inesperados.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#diagrama-de-flujo-de-windowclose","title":"\ud83e\udde9 Diagrama de Flujo de <code>window.close()</code>","text":"<pre><code>flowchart TD\n    A[Usuario hace clic en cerrar] --&gt; B[Llamada a window.close()]\n    B --&gt; C[Ventana se cierra]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#3-mover-la-ventana-windowmoveto","title":"\ud83c\udfaf 3. Mover la Ventana: <code>window.moveTo()</code>","text":"<p>El m\u00e9todo <code>window.moveTo()</code> permite mover la ventana a una nueva posici\u00f3n en la pantalla. Esto es \u00fatil si est\u00e1s creando aplicaciones web que requieren manipular m\u00faltiples ventanas y quieres posicionarlas de forma organizada.</p> <pre><code>window.moveTo(300, 200);  // Mueve la ventana a la posici\u00f3n (300, 200)\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#uso-practico-ventanas-alineadas","title":"\ud83d\udccd Uso pr\u00e1ctico: Ventanas alineadas","text":"<p>Imagina que tienes una ventana principal y deseas abrir una segunda ventana justo al lado de la primera. Podr\u00edas usar <code>moveTo()</code> para colocar la nueva ventana en la posici\u00f3n correcta:</p> <pre><code>let nuevaVentana = window.open('https://www.ejemplo.com', '_blank', 'width=400,height=300');\nnuevaVentana.moveTo(400, 100);  // Mueve la nueva ventana a las coordenadas (400, 100)\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#4-cambiar-el-tamano-de-la-ventana-windowresizeto","title":"\ud83d\udccf 4. Cambiar el Tama\u00f1o de la Ventana: <code>window.resizeTo()</code>","text":"<p>Si deseas modificar el tama\u00f1o de una ventana, puedes utilizar <code>window.resizeTo()</code>. Este m\u00e9todo es \u00fatil para aplicaciones que dependen de un tama\u00f1o espec\u00edfico de ventana para mostrar el contenido correctamente.</p> <pre><code>window.resizeTo(1024, 768);  // Cambia el tama\u00f1o de la ventana a 1024x768 p\u00edxeles\n</code></pre> <p>Tip: Combina <code>moveTo()</code> y <code>resizeTo()</code> para organizar y ajustar ventanas como desees.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#diagrama-de-flujo-de-windowresizeto","title":"\ud83e\udde9 Diagrama de Flujo de <code>window.resizeTo()</code>","text":"<pre><code>flowchart TD\n    A[Ventana est\u00e1 abierta] --&gt; B[Usuario ejecuta resizeTo()]\n    B --&gt; C[Ventana cambia de tama\u00f1o]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#5-mostrar-cuadros-de-dialogo-interactivos-windowalert-windowconfirm-windowprompt","title":"\ud83d\udcac 5. Mostrar Cuadros de Di\u00e1logo Interactivos: <code>window.alert()</code>, <code>window.confirm()</code>, <code>window.prompt()</code>","text":"<p>Adem\u00e1s de gestionar la apariencia f\u00edsica de las ventanas, JavaScript tambi\u00e9n permite interactuar con el usuario a trav\u00e9s de cuadros de di\u00e1logo nativos, como alertas, confirmaciones y solicitudes de entrada.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#51-mostrar-una-alerta-windowalert","title":"\ud83d\udd14 5.1. Mostrar una Alerta: <code>window.alert()</code>","text":"<p>Muestra un cuadro de alerta con un mensaje. El usuario debe aceptar el cuadro de di\u00e1logo para continuar.</p> <pre><code>window.alert('\u00a1Hola! Este es un mensaje de alerta.');\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#52-solicitar-confirmacion-windowconfirm","title":"\u2705 5.2. Solicitar Confirmaci\u00f3n: <code>window.confirm()</code>","text":"<p>Este m\u00e9todo muestra un cuadro de di\u00e1logo con dos botones: Aceptar y Cancelar. Devuelve <code>true</code> si el usuario acepta, y <code>false</code> si cancela.</p> <pre><code>let confirmacion = window.confirm('\u00bfEst\u00e1s seguro de que deseas continuar?');\nif (confirmacion) {\n  console.log('Usuario acept\u00f3');\n} else {\n  console.log('Usuario cancel\u00f3');\n}\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#53-solicitar-entrada-del-usuario-windowprompt","title":"\u270d\ufe0f 5.3. Solicitar Entrada del Usuario: <code>window.prompt()</code>","text":"<p>Muestra un cuadro de di\u00e1logo con un campo de texto donde el usuario puede ingresar datos. Devuelve el valor ingresado, o <code>null</code> si el usuario cancela.</p> <pre><code>let nombre = window.prompt('\u00bfCu\u00e1l es tu nombre?', 'Escribe tu nombre aqu\u00ed');\nif (nombre) {\n  console.log('Hola, ' + nombre);\n}\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#conclusion","title":"\ud83d\ude80 Conclusi\u00f3n","text":"<p>Con JavaScript, tienes el control total sobre la apariencia de las ventanas del navegador. Puedes abrir, cerrar, mover, redimensionar ventanas y mostrar cuadros de di\u00e1logo interactivos que mejoran la experiencia del usuario. Estos m\u00e9todos son extremadamente \u00fatiles para crear aplicaciones web m\u00e1s din\u00e1micas y personalizadas.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#listo-para-ponerlo-en-practica","title":"\ud83e\uddd1\u200d\ud83d\udcbb \u00bfListo para ponerlo en pr\u00e1ctica?","text":"<p>\u00a1Comienza a experimentar con la gesti\u00f3n de ventanas en tus proyectos! Abre nuevas ventanas, mueve tus interfaces por la pantalla, y genera interacciones m\u00e1s ricas con tus usuarios. \ud83c\udf1f</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/6gestiondelaaparienciadelaventana/#resumen-de-metodos","title":"\ud83e\udde9 Resumen de M\u00e9todos","text":"<ul> <li><code>window.open()</code>: Abre una nueva ventana o pesta\u00f1a.</li> <li><code>window.close()</code>: Cierra la ventana actual.</li> <li><code>window.moveTo()</code>: Mueve la ventana a una nueva posici\u00f3n.</li> <li><code>window.resizeTo()</code>: Cambia el tama\u00f1o de la ventana.</li> <li><code>window.alert()</code>: Muestra un mensaje de alerta.</li> <li><code>window.confirm()</code>: Solicita confirmaci\u00f3n del usuario.</li> <li><code>window.prompt()</code>: Solicita entrada de texto del usuario.</li> </ul> <p>Ahora que tienes las herramientas, \u00a1crea ventanas din\u00e1micas y ventanas emergentes para mejorar la experiencia de usuario en tus aplicaciones! \ud83d\ude0e</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/","title":"\ud83e\ude9f Creaci\u00f3n de Nuevas Ventanas y Comunicaci\u00f3n entre Ventanas en JavaScript","text":"<p>JavaScript te permite abrir nuevas ventanas, controlar su contenido y, lo que es a\u00fan m\u00e1s emocionante, comunicarte entre las diferentes ventanas abiertas. Estas funcionalidades son ideales cuando necesitas trabajar con varias vistas o procesos en paralelo dentro de una aplicaci\u00f3n web. En este art\u00edculo, exploraremos c\u00f3mo crear ventanas din\u00e1micas y c\u00f3mo intercambiar datos entre ellas de manera fluida. \u00a1Vamos a verlo! \ud83d\ude80</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#1-creacion-de-nuevas-ventanas-windowopen","title":"\ud83c\udf1f 1. Creaci\u00f3n de Nuevas Ventanas: <code>window.open()</code>","text":"<p>El m\u00e9todo <code>window.open()</code> es tu mejor amigo cuando quieres abrir una nueva ventana o pesta\u00f1a en el navegador. Este m\u00e9todo no solo abre una ventana nueva, sino que tambi\u00e9n te permite personalizar su tama\u00f1o, posici\u00f3n y caracter\u00edsticas.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#sintaxis-basica-de-windowopen","title":"\ud83d\uddbc\ufe0f Sintaxis B\u00e1sica de <code>window.open()</code>","text":"<pre><code>window.open('https://www.ejemplo.com', '_blank', 'width=800,height=600');\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#parametros","title":"Par\u00e1metros:","text":"<ul> <li>URL: La direcci\u00f3n que deseas abrir en la nueva ventana.</li> <li>Target: Puedes usar valores como <code>_blank</code> para abrir una nueva pesta\u00f1a o <code>_self</code> para abrir en la misma ventana.</li> <li>Caracter\u00edsticas: Puedes especificar atributos como el tama\u00f1o (<code>width</code>, <code>height</code>), si la ventana es redimensionable (<code>resizable</code>) y m\u00e1s.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#ejemplo-practico-ventana-emergente","title":"\ud83c\udf0d Ejemplo Pr\u00e1ctico: Ventana Emergente","text":"<p>Imagina que deseas abrir una ventana emergente peque\u00f1a con informaci\u00f3n adicional:</p> <pre><code>let ventanaInfo = window.open('https://www.info.com', 'ventanaInfo', 'width=400,height=300');\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#diagrama-del-flujo-de-windowopen","title":"\ud83e\udde9 Diagrama del Flujo de <code>window.open()</code>","text":"<pre><code>flowchart TD\n    A[Usuario hace clic en el bot\u00f3n] --&gt; B[window.open()]\n    B --&gt; C[Se abre una nueva ventana/pesta\u00f1a]\n    C --&gt; D[Se carga el contenido especificado en la URL]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#2-comunicacion-entre-ventanas-windowopener-y-postmessage","title":"\ud83d\udd17 2. Comunicaci\u00f3n Entre Ventanas: <code>window.opener</code> y <code>postMessage()</code>","text":"<p>Abrir ventanas es solo la mitad del trabajo. En muchas aplicaciones web, es necesario enviar datos entre ventanas. JavaScript te permite hacer esto de dos maneras principales: <code>window.opener</code> y <code>postMessage()</code>.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#21-comunicacion-con-windowopener","title":"\ud83d\udd04 2.1. Comunicaci\u00f3n con <code>window.opener</code>","text":"<p>Cuando una nueva ventana es creada con <code>window.open()</code>, esta ventana tiene una referencia a su ventana \"padre\" mediante el objeto <code>window.opener</code>. Esto permite que la nueva ventana interact\u00fae directamente con la ventana que la abri\u00f3.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#ejemplo-interactuando-con-la-ventana-padre","title":"\ud83c\udf0d Ejemplo: Interactuando con la Ventana Padre","text":"<pre><code>// En la ventana hija:\nwindow.opener.document.getElementById('mensaje').innerText = '\u00a1Mensaje desde la ventana hija!';\n</code></pre> <p>Este c\u00f3digo permite a la ventana hija cambiar el contenido de un elemento en la ventana principal.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#diagrama-de-comunicacion-con-windowopener","title":"\ud83e\udde9 Diagrama de Comunicaci\u00f3n con <code>window.opener</code>","text":"<pre><code>flowchart TD\n    A[Ventana Padre abre Ventana Hija] --&gt; B[Ventana Hija usa window.opener]\n    B --&gt; C[Ventana Padre recibe datos o cambios]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#22-comunicacion-segura-con-postmessage","title":"\ud83d\udce1 2.2. Comunicaci\u00f3n Segura con <code>postMessage()</code>","text":"<p>Si deseas comunicarte de forma m\u00e1s segura entre ventanas (especialmente si las ventanas est\u00e1n en dominios diferentes), puedes utilizar <code>postMessage()</code>. Este m\u00e9todo permite enviar mensajes espec\u00edficos entre ventanas, con el beneficio de poder especificar de d\u00f3nde aceptas los mensajes para evitar problemas de seguridad.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#ejemplo-de-postmessage","title":"\ud83c\udf0d Ejemplo de <code>postMessage()</code>","text":"<p>En la ventana principal:</p> <pre><code>let nuevaVentana = window.open('https://www.ejemplo.com', '_blank');\n\n// Enviar un mensaje a la nueva ventana\nnuevaVentana.postMessage('Hola desde la ventana principal', 'https://www.ejemplo.com');\n</code></pre> <p>En la ventana hija (receptora):</p> <pre><code>window.addEventListener('message', (event) =&gt; {\n    if (event.origin !== 'https://www.ejemplo.com') {\n        return; // Evitar mensajes de fuentes no confiables\n    }\n    console.log('Mensaje recibido:', event.data);\n});\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#diagrama-de-comunicacion-con-postmessage","title":"\ud83e\udde9 Diagrama de Comunicaci\u00f3n con <code>postMessage()</code>","text":"<pre><code>flowchart TD\n    A[Ventana Principal env\u00eda mensaje] --&gt; B[window.postMessage()]\n    B --&gt; C[Ventana Hija recibe el mensaje y lo procesa]</code></pre> <p>Este flujo permite un intercambio seguro de mensajes entre ventanas, asegurando que los datos solo provengan de fuentes confiables.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#3-ejemplos-de-comunicacion-dinamica-entre-ventanas","title":"\ud83d\udd87\ufe0f 3. Ejemplos de Comunicaci\u00f3n Din\u00e1mica Entre Ventanas","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#ejemplo-1-cambiar-el-contenido-de-la-ventana-principal-desde-la-ventana-hija","title":"\ud83d\udce7 Ejemplo 1: Cambiar el Contenido de la Ventana Principal desde la Ventana Hija","text":"<p>Ventana principal:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Ventana Principal&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 id=\"titulo\"&gt;Hola desde la Ventana Principal&lt;/h1&gt;\n    &lt;button id=\"btnAbrirHija\"&gt;Abrir Ventana Hija&lt;/button&gt;\n\n    &lt;script&gt;\n        document.getElementById('btnAbrirHija').addEventListener('click', () =&gt; {\n            window.open('ventanaHija.html', 'ventanaHija', 'width=400,height=300');\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ventana hija (<code>ventanaHija.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Ventana Hija&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Ventana Hija&lt;/h1&gt;\n    &lt;button id=\"btnEnviarMensaje\"&gt;Enviar Mensaje a Principal&lt;/button&gt;\n\n    &lt;script&gt;\n        document.getElementById('btnEnviarMensaje').addEventListener('click', () =&gt; {\n            window.opener.document.getElementById('titulo').innerText = '\u00a1Mensaje desde la Ventana Hija!';\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#diagrama-del-flujo-del-ejemplo","title":"\ud83e\udde9 Diagrama del Flujo del Ejemplo","text":"<pre><code>flowchart TD\n    A[Ventana Principal] --&gt; B[Abre Ventana Hija]\n    B --&gt; C[Ventana Hija interact\u00faa con Ventana Principal usando window.opener]\n    C --&gt; D[Ventana Principal actualiza su contenido]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#4-cerrar-una-ventana-desde-otra","title":"\ud83c\udf1f 4. Cerrar una Ventana Desde Otra","text":"<p>A veces, es necesario cerrar una ventana desde la ventana que la abri\u00f3. Esto es posible utilizando <code>window.close()</code>, pero solo si la ventana fue abierta mediante <code>window.open()</code>.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#ejemplo-de-cierre-de-ventana","title":"Ejemplo de Cierre de Ventana:","text":"<pre><code>// En la ventana principal\nlet ventanaHija = window.open('ventanaHija.html', '_blank');\n\n// Despu\u00e9s de unos segundos, cerrar la ventana hija\nsetTimeout(() =&gt; {\n    ventanaHija.close();\n}, 5000);  // Cierra la ventana despu\u00e9s de 5 segundos\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#conclusion","title":"\ud83d\ude80 Conclusi\u00f3n","text":"<p>La creaci\u00f3n de nuevas ventanas y la comunicaci\u00f3n entre ellas son caracter\u00edsticas poderosas de JavaScript que permiten crear aplicaciones web interactivas y din\u00e1micas. Con <code>window.open()</code>, puedes abrir ventanas personalizadas, y con <code>window.opener</code> y <code>postMessage()</code>, puedes establecer canales de comunicaci\u00f3n eficientes y seguros entre ellas.</p> <p>\u00a1Pon en pr\u00e1ctica estos m\u00e9todos para mejorar la experiencia de usuario en tus aplicaciones! \ud83c\udf0d\ud83c\udf89</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#resumen-de-metodos-clave","title":"\ud83e\uddd1\u200d\ud83d\udcbb Resumen de M\u00e9todos Clave","text":"<ul> <li><code>window.open()</code>: Abre una nueva ventana o pesta\u00f1a.</li> <li><code>window.opener</code>: Permite que la ventana hija se comunique con la ventana que la abri\u00f3.</li> <li><code>postMessage()</code>: Env\u00eda mensajes entre ventanas de manera segura.</li> <li><code>window.close()</code>: Cierra la ventana actual.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/7nuevasventanasycomunicacion/#diagrama-general-del-flujo-de-comunicacion-entre-ventanas","title":"\ud83e\udde9 Diagrama General del Flujo de Comunicaci\u00f3n Entre Ventanas","text":"<pre><code>graph TD\n    A[Ventana Principal] --&gt; B[window.open()]\n    B --&gt; C[Ventana Hija creada]\n    C --&gt; D[Comunicaci\u00f3n usando window.opener o postMessage]\n    D --&gt; E[Ventana Principal actualiza su estado]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/","title":"\ud83c\udf6a Todo Sobre Cookies en JavaScript: Definici\u00f3n, Creaci\u00f3n, Almacenamiento y Recuperaci\u00f3n","text":"<p>En JavaScript, las cookies son peque\u00f1os fragmentos de texto que se almacenan en el navegador del usuario. Se utilizan com\u00fanmente para guardar informaci\u00f3n temporal como sesiones de usuario, preferencias y seguimiento de actividad. En este art\u00edculo, aprender\u00e1s qu\u00e9 son las cookies, c\u00f3mo crearlas, almacenarlas, y c\u00f3mo recuperarlas en tus proyectos. \ud83c\udf6a\u2728</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#1-que-es-una-cookie","title":"\ud83c\udf10 1. \u00bfQu\u00e9 es una Cookie?","text":"<p>Una cookie es un archivo peque\u00f1o que un sitio web guarda en el navegador del usuario cuando \u00e9ste lo visita. Cada cookie contiene un par clave-valor que almacena datos \u00fatiles para las interacciones posteriores con el sitio. Estas cookies son enviadas autom\u00e1ticamente al servidor cada vez que se hace una nueva solicitud, lo que permite mantener un estado persistente en el navegador.</p> <p>Ejemplos de uso de cookies: - Guardar informaci\u00f3n de inicio de sesi\u00f3n. - Recordar la preferencia de idioma. - Rastrear la actividad de un usuario en el sitio web.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#2-como-crear-una-cookie-en-javascript","title":"\ud83c\udf73 2. C\u00f3mo Crear una Cookie en JavaScript","text":"<p>En JavaScript, las cookies se pueden crear directamente desde el c\u00f3digo usando la propiedad <code>document.cookie</code>. \u00a1Es m\u00e1s f\u00e1cil de lo que parece! \ud83e\udd13</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#ejemplo-basico-de-crear-una-cookie","title":"\ud83d\udd39 Ejemplo B\u00e1sico de Crear una Cookie","text":"<pre><code>// Crear una cookie llamada \"usuario\" con valor \"Juan\" que expira en 7 d\u00edas\nlet fechaExpiracion = new Date();\nfechaExpiracion.setTime(fechaExpiracion.getTime() + (7 * 24 * 60 * 60 * 1000));  // 7 d\u00edas\nlet expiracion = \"expires=\" + fechaExpiracion.toUTCString();\ndocument.cookie = \"usuario=Juan; \" + expiracion + \"; path=/\";\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#explicacion-del-codigo","title":"\ud83d\udd25 Explicaci\u00f3n del C\u00f3digo:","text":"<ul> <li><code>document.cookie</code>: Este es el m\u00e9todo principal para manipular cookies en JavaScript.</li> <li><code>usuario=Juan</code>: Esto establece el nombre y valor de la cookie.</li> <li><code>expires</code>: Define cu\u00e1ndo expirar\u00e1 la cookie.</li> <li><code>path=/</code>: Establece el camino donde la cookie es v\u00e1lida (en este caso, en todo el sitio).</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#3-almacenamiento-de-cookies","title":"\ud83d\uddc3\ufe0f 3. Almacenamiento de Cookies","text":"<p>Las cookies se almacenan en el navegador del usuario y se env\u00edan autom\u00e1ticamente al servidor con cada solicitud. Es posible configurar cookies para que expiren despu\u00e9s de un cierto tiempo o al cerrar el navegador.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#configurando-cookies-con-expiracion","title":"\ud83c\udf6a Configurando Cookies con Expiraci\u00f3n","text":"<pre><code>// Crear una cookie con valor y fecha de expiraci\u00f3n en 1 hora\nlet ahora = new Date();\nahora.setTime(ahora.getTime() + (1 * 60 * 60 * 1000));  // 1 hora\nlet expiracionHora = \"expires=\" + ahora.toUTCString();\ndocument.cookie = \"preferencia=oscuro; \" + expiracionHora + \"; path=/\";\n</code></pre> <p>Con esta configuraci\u00f3n, la cookie <code>preferencia=oscuro</code> ser\u00e1 eliminada despu\u00e9s de 1 hora, a menos que el usuario regrese al sitio y la actualice.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#diagrama-de-flujo-de-creacion-de-una-cookie","title":"\ud83e\udde9 Diagrama de Flujo de Creaci\u00f3n de una Cookie","text":"<pre><code>flowchart TD\n    A[Usuario visita el sitio] --&gt; B[JavaScript crea una cookie]\n    B --&gt; C[Cookie se almacena en el navegador]\n    C --&gt; D[Cookie se env\u00eda al servidor con cada solicitud]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#4-recuperacion-de-cookies","title":"\ud83d\udd0d 4. Recuperaci\u00f3n de Cookies","text":"<p>Ahora que sabes c\u00f3mo crear y almacenar cookies, veamos c\u00f3mo puedes recuperarlas. Desafortunadamente, document.cookie solo te da una cadena larga con todas las cookies disponibles, por lo que tendr\u00e1s que hacer un poco de trabajo manual para extraer los valores que necesitas.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#ejemplo-de-recuperacion-de-una-cookie-especifica","title":"\ud83d\udee0\ufe0f Ejemplo de Recuperaci\u00f3n de una Cookie Espec\u00edfica","text":"<pre><code>// Funci\u00f3n para obtener una cookie por su nombre\nfunction obtenerCookie(nombre) {\n    let cookies = document.cookie.split(';');\n    for (let i = 0; i &lt; cookies.length; i++) {\n        let cookie = cookies[i].trim();\n        // Comprobar si la cookie empieza con el nombre buscado\n        if (cookie.indexOf(nombre + '=') === 0) {\n            return cookie.substring((nombre + '=').length, cookie.length);\n        }\n    }\n    return null;  // Devolver null si no se encuentra la cookie\n}\n\n// Usar la funci\u00f3n para obtener el valor de la cookie 'usuario'\nlet usuario = obtenerCookie('usuario');\nconsole.log('Usuario:', usuario);\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#explicacion-del-codigo_1","title":"\ud83d\udd25 Explicaci\u00f3n del C\u00f3digo:","text":"<ul> <li><code>document.cookie.split(';')</code>: Esto divide la cadena de cookies en un array donde cada cookie es un elemento.</li> <li>B\u00fasqueda: Luego, la funci\u00f3n busca la cookie cuyo nombre coincida con el que est\u00e1s buscando.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#5-configuracion-avanzada-de-cookies-seguridad-y-alcance","title":"\ud83d\udd12 5. Configuraci\u00f3n Avanzada de Cookies: Seguridad y Alcance","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#cookies-seguras-secure","title":"\ud83d\udd10 Cookies Seguras: <code>Secure</code>","text":"<p>Si deseas asegurarte de que una cookie solo se env\u00ede a trav\u00e9s de conexiones seguras (HTTPS), puedes a\u00f1adir la opci\u00f3n <code>Secure</code> al crearla:</p> <pre><code>document.cookie = \"token=abc123; Secure; path=/\";\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#cookies-solo-para-subdominios-domain","title":"\ud83c\udf0d Cookies Solo para Subdominios: <code>Domain</code>","text":"<p>Puedes hacer que una cookie sea v\u00e1lida solo en ciertos subdominios usando el atributo <code>Domain</code>.</p> <pre><code>document.cookie = \"usuario=Juan; domain=ejemplo.com; path=/\";\n</code></pre> <p>Esto significa que la cookie estar\u00e1 disponible en todos los subdominios de <code>ejemplo.com</code>, como <code>blog.ejemplo.com</code>.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#diagrama-de-flujo-de-recuperacion-de-una-cookie","title":"\ud83e\udde9 Diagrama de Flujo de Recuperaci\u00f3n de una Cookie","text":"<pre><code>flowchart TD\n    A[Usuario realiza una acci\u00f3n] --&gt; B[JavaScript busca la cookie solicitada]\n    B --&gt; C[Comprobar si existe la cookie]\n    C --&gt; D[Devolver el valor de la cookie si existe]\n    C --&gt; E[Retornar null si no existe]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#6-eliminar-cookies","title":"\u274c 6. Eliminar Cookies","text":"<p>Si quieres eliminar una cookie, simplemente puedes configurarla con una fecha de expiraci\u00f3n que ya haya pasado.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#ejemplo-de-eliminacion-de-una-cookie","title":"\ud83c\udf0d Ejemplo de Eliminaci\u00f3n de una Cookie","text":"<pre><code>// Eliminar una cookie estableciendo su fecha de expiraci\u00f3n en el pasado\ndocument.cookie = \"usuario=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/\";\n</code></pre> <p>Este c\u00f3digo eliminar\u00e1 la cookie llamada <code>usuario</code>, ya que su fecha de expiraci\u00f3n es anterior a la fecha actual.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#7-ejemplo-completo-creacion-almacenamiento-y-recuperacion-de-una-cookie","title":"\ud83d\udccb 7. Ejemplo Completo: Creaci\u00f3n, Almacenamiento y Recuperaci\u00f3n de una Cookie","text":"<p>Ahora que ya sabes c\u00f3mo crear, almacenar y recuperar cookies, veamos un ejemplo completo de gesti\u00f3n de cookies en una p\u00e1gina web.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Gesti\u00f3n de Cookies&lt;/title&gt;\n    &lt;script&gt;\n        // Funci\u00f3n para crear una cookie\n        function crearCookie(nombre, valor, dias) {\n            let fecha = new Date();\n            fecha.setTime(fecha.getTime() + (dias * 24 * 60 * 60 * 1000));\n            let expiracion = \"expires=\" + fecha.toUTCString();\n            document.cookie = nombre + \"=\" + valor + \";\" + expiracion + \"; path=/\";\n        }\n\n        // Funci\u00f3n para obtener una cookie\n        function obtenerCookie(nombre) {\n            let cookies = document.cookie.split(';');\n            for (let i = 0; i &lt; cookies.length; i++) {\n                let cookie = cookies[i].trim();\n                if (cookie.indexOf(nombre + '=') === 0) {\n                    return cookie.substring((nombre + '=').length, cookie.length);\n                }\n            }\n            return null;\n        }\n\n        // Crear una cookie y mostrar su valor\n        function gestionarCookies() {\n            crearCookie('usuario', 'Juan', 7);\n            let usuario = obtenerCookie('usuario');\n            alert('El usuario almacenado es: ' + usuario);\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button onclick=\"gestionarCookies()\"&gt;Crear y Obtener Cookie&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Este ejemplo crea una cookie llamada <code>usuario</code> con el valor \"Juan\" y la almacena durante 7 d\u00edas. Al hacer clic en el bot\u00f3n, se recupera la cookie y se muestra su valor en un cuadro de alerta.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#conclusion","title":"\ud83d\ude80 Conclusi\u00f3n","text":"<p>Las cookies en JavaScript son herramientas poderosas para almacenar y recuperar datos del usuario en el navegador. Con lo que has aprendido hoy, puedes crear cookies, almacenarlas de manera segura, recuperarlas para personalizar la experiencia del usuario y eliminarlas cuando ya no sean necesarias.</p> <p>\u00a1Ahora que conoces todos los secretos de las cookies, es momento de poner manos a la obra y empezar a gestionar las cookies en tus aplicaciones web! \ud83c\udf6a\ud83d\udcbb</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#resumen-de-metodos-clave","title":"\ud83d\udcdd Resumen de M\u00e9todos Clave","text":"<ul> <li><code>document.cookie</code>: Crear, leer y eliminar cookies.</li> <li><code>expires</code>: Establecer la fecha de expiraci\u00f3n de la cookie.</li> <li><code>Secure</code>: Hacer que la cookie solo sea accesible en conexiones HTTPS.</li> <li><code>path</code> y <code>domain</code>: Controlar d\u00f3nde es v\u00e1lida la cookie.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/8cookies/#diagrama-general-del-flujo-de-gestion-de-cookies","title":"\ud83e\udde9 Diagrama General del Flujo de Gesti\u00f3n de Cookies","text":"<pre><code>flowchart TD\n    A[Crear Cookie] --&gt; B[Almacenar en el navegador]\n    B --&gt; C[Recuperar Cookie]\n    C --&gt; D[Utilizar valor de la cookie]\n    C --&gt; E[Eliminar Cookie si es necesario]</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/9draganddrop/","title":"Crear un Drag and Drop en JavaScript: Una Gu\u00eda Completa","text":"<p>\u00a1Vamos a aprender a crear un sistema de drag and drop usando JavaScript! Este tutorial te guiar\u00e1 a trav\u00e9s de los conceptos b\u00e1sicos hasta la implementaci\u00f3n de un ejemplo funcional. \ud83d\uddb1\ufe0f\u2728</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/9draganddrop/#introduccion-al-drag-and-drop","title":"Introducci\u00f3n al Drag and Drop","text":"<p>El drag and drop (arrastrar y soltar) es una funcionalidad interactiva en la que los usuarios pueden mover elementos de una parte de la interfaz a otra. Esta caracter\u00edstica es clave en aplicaciones web modernas, mejorando la experiencia del usuario en sitios de comercio electr\u00f3nico, tableros de tareas, organizadores visuales, y m\u00e1s.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/9draganddrop/#paso-1-configuracion-del-html-basico","title":"Paso 1: Configuraci\u00f3n del HTML B\u00e1sico","text":"<p>Vamos a empezar con una estructura b\u00e1sica de HTML. Necesitamos un contenedor para los elementos que se pueden arrastrar y una zona de destino para soltarlos.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Drag and Drop&lt;/title&gt;\n    &lt;style&gt;\n        .container { display: flex; gap: 10px; }\n        .dropzone { width: 200px; height: 200px; border: 2px dashed #aaa; display: flex; align-items: center; justify-content: center; }\n        .draggable { width: 100px; height: 100px; background-color: #3498db; cursor: grab; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;div class=\"draggable\" draggable=\"true\" id=\"draggable\"&gt;Arr\u00e1strame&lt;/div&gt;\n    &lt;div class=\"dropzone\" id=\"dropzone\"&gt;Zona de destino&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/9draganddrop/#paso-2-anadir-el-javascript-para-drag-and-drop","title":"Paso 2: A\u00f1adir el JavaScript para Drag and Drop","text":"<p>Para que el arrastre y la soltura funcionen, necesitamos manejar algunos eventos clave de JavaScript: <code>dragstart</code>, <code>dragover</code>, y <code>drop</code>. Veamos c\u00f3mo implementarlos.</p> <pre><code>// Seleccionar elementos\nconst draggable = document.getElementById(\"draggable\");\nconst dropzone = document.getElementById(\"dropzone\");\n\n// Evento para el inicio del arrastre\ndraggable.addEventListener(\"dragstart\", (event) =&gt; {\n    event.dataTransfer.setData(\"text/plain\", event.target.id);\n    draggable.style.opacity = \"0.5\";\n});\n\n// Permitir que el elemento se pueda soltar en la zona de destino\ndropzone.addEventListener(\"dragover\", (event) =&gt; {\n    event.preventDefault();\n    dropzone.style.borderColor = \"#2ecc71\";\n});\n\n// Evento para la acci\u00f3n de soltar\ndropzone.addEventListener(\"drop\", (event) =&gt; {\n    event.preventDefault();\n    const data = event.dataTransfer.getData(\"text\");\n    const element = document.getElementById(data);\n    dropzone.appendChild(element);\n    element.style.opacity = \"1\";\n    dropzone.style.borderColor = \"#aaa\";\n});\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/9draganddrop/#diagrama-de-eventos-mermaid","title":"Diagrama de Eventos Mermaid","text":"<p>Para visualizar la secuencia de eventos, aqu\u00ed tienes un diagrama Mermaid de c\u00f3mo ocurre el proceso de drag and drop:</p> <pre><code>sequenceDiagram\n    participant User\n    participant Draggable\n    participant Dropzone\n\n    User-&gt;&gt;Draggable: dragstart\n    Draggable-&gt;&gt;User: dataTransfer\n    User-&gt;&gt;Dropzone: dragover\n    Dropzone-&gt;&gt;User: allow drop\n    User-&gt;&gt;Dropzone: drop\n    Dropzone-&gt;&gt;Draggable: append child</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/9draganddrop/#explicacion-de-los-eventos","title":"Explicaci\u00f3n de los Eventos","text":"<ul> <li>dragstart: Se dispara cuando el usuario empieza a arrastrar el elemento. Aqu\u00ed, definimos qu\u00e9 datos vamos a transferir, en este caso, el <code>id</code> del elemento.</li> <li>dragover: Este evento permite que un elemento se suelte en un \u00e1rea espec\u00edfica. Sin <code>event.preventDefault()</code>, el <code>drop</code> no funcionar\u00e1.</li> <li>drop: Se activa cuando soltamos el elemento sobre el \u00e1rea permitida. Aqu\u00ed, obtenemos el <code>id</code> del elemento y lo a\u00f1adimos como hijo de la zona de destino.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/9draganddrop/#personalizando-la-experiencia","title":"Personalizando la Experiencia","text":"<p>Para mejorar la experiencia visual, puedes agregar estilos din\u00e1micos en CSS, como un cambio de color en la zona de destino cuando est\u00e1 lista para recibir el elemento.</p> <pre><code>.draggable:active {\n    cursor: grabbing;\n}\n.dropzone.over {\n    background-color: #e1eecf;\n    border-color: #2ecc71;\n}\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/9draganddrop/#resultado-final","title":"Resultado Final \ud83c\udf89","text":"<p>Con estos pasos, tendr\u00e1s un sistema funcional de drag and drop en tu p\u00e1gina web. Este c\u00f3digo es completamente personalizable, as\u00ed que puedes ajustarlo seg\u00fan tus necesidades.</p> <p>\u00a1Feliz codificaci\u00f3n y disfruta integrando esta funcionalidad interactiva en tus proyectos web! \ud83e\uddd1\u200d\ud83d\udcbb</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/help/","title":"Help","text":"<p>Aqu\u00ed tienes un \u00edndice espec\u00edfico para la unidad de trabajo \"3. Utilizaci\u00f3n de los objetos predefinidos del lenguaje\" del m\u00f3dulo Desarrollo Web en Entorno Cliente. He estructurado los apartados de manera l\u00f3gica para que sigan un flujo pedag\u00f3gico coherente:</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/help/#unidad-3-utilizacion-de-los-objetos-predefinidos-del-lenguaje","title":"Unidad 3: Utilizaci\u00f3n de los Objetos Predefinidos del Lenguaje","text":"<ol> <li>Introducci\u00f3n a los Objetos en JavaScript</li> <li>Conceptos b\u00e1sicos sobre objetos en JavaScript.</li> <li> <p>Diferencias entre objetos nativos, predefinidos y personalizados.</p> </li> <li> <p>Objetos Nativos del Lenguaje</p> </li> <li>Objetos b\u00e1sicos: <code>Object</code>, <code>Array</code>, <code>String</code>, <code>Number</code>, <code>Date</code>, <code>Math</code>.</li> <li>M\u00e9todos y propiedades m\u00e1s comunes de cada objeto.</li> <li> <p>Ejemplos pr\u00e1cticos de uso.</p> </li> <li> <p>Interacci\u00f3n con el Navegador</p> </li> <li>Objetos asociados al navegador: <code>window</code>, <code>document</code>, <code>navigator</code>, <code>location</code>, <code>history</code>.</li> <li>Manipulaci\u00f3n del DOM (Document Object Model).</li> <li> <p>Control de la navegaci\u00f3n y el historial del navegador.</p> </li> <li> <p>Generaci\u00f3n de Texto y Elementos HTML desde C\u00f3digo</p> </li> <li>Creaci\u00f3n y modificaci\u00f3n din\u00e1mica de elementos HTML.</li> <li>M\u00e9todos de inserci\u00f3n: <code>innerHTML</code>, <code>createElement</code>, <code>appendChild</code>.</li> <li> <p>Manejo de atributos y estilos desde JavaScript.</p> </li> <li> <p>Aplicaciones Pr\u00e1cticas de los Marcos (Frameworks)</p> </li> <li>Introducci\u00f3n breve a marcos de JavaScript (p. ej., React, Angular, Vue) y su utilidad en la manipulaci\u00f3n del DOM.</li> <li> <p>Ejemplos b\u00e1sicos de uso de marcos para generar elementos din\u00e1micamente.</p> </li> <li> <p>Gesti\u00f3n de la Apariencia de la Ventana</p> </li> <li>Modificaci\u00f3n de la apariencia y comportamiento de la ventana del navegador.</li> <li>Propiedades y m\u00e9todos de <code>window</code>: <code>alert</code>, <code>prompt</code>, <code>confirm</code>.</li> <li> <p>Ajustes de tama\u00f1o y posici\u00f3n de la ventana.</p> </li> <li> <p>Creaci\u00f3n de Nuevas Ventanas y Comunicaci\u00f3n entre Ventanas</p> </li> <li>M\u00e9todos para abrir y gestionar nuevas ventanas: <code>window.open</code>.</li> <li> <p>Comunicaci\u00f3n entre ventanas mediante <code>window.postMessage</code> y <code>window.opener</code>.</p> </li> <li> <p>Gesti\u00f3n de Cookies</p> </li> <li>Definici\u00f3n y prop\u00f3sito de las cookies.</li> <li>M\u00e9todos para la creaci\u00f3n, almacenamiento y recuperaci\u00f3n de cookies.</li> <li> <p>Buenas pr\u00e1cticas de uso y consideraciones de seguridad.</p> </li> <li> <p>Ejercicios Pr\u00e1cticos y Casos de Estudio</p> </li> <li>Resoluci\u00f3n de ejercicios pr\u00e1cticos relacionados con la utilizaci\u00f3n de objetos.</li> <li> <p>An\u00e1lisis de casos reales donde se aplican los conceptos aprendidos.</p> </li> <li> <p>Resumen y Conclusiones</p> <ul> <li>Recapitulaci\u00f3n de los conceptos clave.</li> <li>Importancia de los objetos predefinidos en el desarrollo web.</li> <li>Pr\u00f3ximos pasos y continuaci\u00f3n del aprendizaje.</li> </ul> </li> </ol> <p>Este \u00edndice proporciona una estructura detallada y progresiva para abordar la unidad sobre los objetos predefinidos en JavaScript, garantizando una comprensi\u00f3n s\u00f3lida de su uso pr\u00e1ctico en el desarrollo web en entorno cliente.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/adivinanza-numeros/","title":"Enunciado: Juego de Adivinanza de un N\u00famero","text":"<p>Este juego consiste en que el usuario adivine un n\u00famero secreto generado aleatoriamente entre 1 y 100. El usuario ingresa su intento a trav\u00e9s de un campo de texto y presiona un bot\u00f3n para comprobar si ha acertado. Despu\u00e9s de cada intento, el juego proporciona pistas indicando si el n\u00famero ingresado es demasiado alto, demasiado bajo, o si el jugador ha adivinado correctamente.</p> <p>El n\u00famero de intentos se cuenta autom\u00e1ticamente y se muestra cuando el jugador adivina el n\u00famero correctamente. Los mensajes de pista se muestran con colores diferentes seg\u00fan el resultado: verde para un acierto, rojo para un n\u00famero demasiado alto, y amarillo para un n\u00famero demasiado bajo.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/ahorcado/","title":"Ahorcado","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/ahorcado/#enunciado-juego-del-ahorcado","title":"Enunciado: Juego del Ahorcado","text":"<p>Este juego del Ahorcado consiste en que el jugador intente adivinar una palabra secreta letra por letra. El jugador dispone de 6 intentos para acertar todas las letras de la palabra. Si el jugador adivina una letra correctamente, la letra se revelar\u00e1 en la palabra. Si el jugador falla, perder\u00e1 un intento y una parte del mu\u00f1eco del ahorcado aparecer\u00e1.</p> <ul> <li>La palabra se muestra inicialmente con guiones bajos (<code>_</code>) que se reemplazan por las letras correctas a medida que el jugador las adivina.</li> <li>El n\u00famero de intentos restantes se actualiza despu\u00e9s de cada intento fallido.</li> <li>Si el jugador agota los intentos, el juego mostrar\u00e1 que ha perdido y revelar\u00e1 la palabra completa.</li> <li>Si el jugador acierta todas las letras antes de agotar los intentos, se muestra un mensaje indicando que ha ganado.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/piedra-papel-tijeras/","title":"Piedra papel tijeras","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/piedra-papel-tijeras/#enunciado-juego-de-piedra-papel-o-tijeras","title":"Enunciado: Juego de Piedra, Papel o Tijeras","text":"<p>Este es un cl\u00e1sico juego de Piedra, Papel o Tijeras implementado en una p\u00e1gina web interactiva. El jugador elige entre las tres opciones (Piedra, Papel o Tijeras) y se enfrenta a la computadora, que elige de forma aleatoria. Dependiendo de las elecciones, el juego determina el ganador y muestra un mensaje en pantalla.</p> <ul> <li>Opciones del jugador: El jugador selecciona una de las tres opciones representadas por emojis:</li> <li>\ud83e\udea8 para Piedra</li> <li>\ud83d\udcc4 para Papel</li> <li>\u2702\ufe0f para Tijeras</li> <li>Selecci\u00f3n de la computadora: La computadora elige una opci\u00f3n de manera aleatoria.</li> <li>Resultado del juego: Despu\u00e9s de cada ronda, se muestra uno de los tres mensajes posibles:</li> <li>Empate: Ambos seleccionan la misma opci\u00f3n.</li> <li>Victoria: La elecci\u00f3n del jugador vence a la de la computadora.</li> <li>Derrota: La elecci\u00f3n de la computadora vence a la del jugador.</li> </ul> <p>El resultado se muestra visualmente con un mensaje y emojis que representan las elecciones de ambos. El juego proporciona una interfaz atractiva con botones redondeados y transiciones suaves para mejorar la experiencia de usuario.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/pokemon/","title":"Simulador de Batalla Pokemon","text":"<p>Descripci\u00f3n del Proyecto Este proyecto consiste en el desarrollo de una aplicaci\u00f3n de simulaci\u00f3n de batallas Pok\u00e9mon en tres pantallas principales. La aplicaci\u00f3n permitir\u00e1 a los usuarios seleccionar sus Pok\u00e9mon, ver una pantalla de presentaci\u00f3n de enfrentamiento entre los dos Pok\u00e9mon seleccionados, y llevar a cabo el combate entre ellos. A continuaci\u00f3n, se detallan los requerimientos de cada pantalla:</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/pokemon/#pantalla-1-seleccion-de-pokemon","title":"Pantalla 1: Selecci\u00f3n de Pok\u00e9mon","text":"<ul> <li>Objetivo: Permitir al usuario seleccionar un Pok\u00e9mon de una lista predefinida.</li> <li>Descripci\u00f3n Funcional:<ul> <li>Mostrar una lista de Pok\u00e9mon disponibles con sus caracter\u00edsticas b\u00e1sicas (nombre, tipo, nivel de poder).</li> <li>Permitir la selecci\u00f3n de un Pok\u00e9mon para el jugador y su oponente (selecci\u00f3n autom\u00e1tica o manual).</li> <li>Mostrar detalles del Pok\u00e9mon seleccionado, incluyendo imagen, habilidades principales y estad\u00edsticas (ataque, defensa, velocidad, etc.).</li> </ul> </li> <li>Requisitos T\u00e9cnicos: Implementaci\u00f3n de botones y una interfaz amigable para la selecci\u00f3n. Integraci\u00f3n de una base de datos o JSON con la informaci\u00f3n de los Pok\u00e9mon.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/pokemon/#pantalla-2-presentacion-vs","title":"Pantalla 2: Presentaci\u00f3n VS","text":"<ul> <li>Objetivo: Generar una presentaci\u00f3n animada de los Pok\u00e9mon seleccionados en un formato de \"VS\" (uno contra otro).</li> <li>Descripci\u00f3n Funcional:<ul> <li>Mostrar una transici\u00f3n visual con el mensaje \"VS\" entre los Pok\u00e9mon seleccionados del jugador y del oponente.</li> <li>Incluir una breve animaci\u00f3n para crear expectativa antes del combate, mostrando los nombres y tipos de cada Pok\u00e9mon.</li> <li>A\u00f1adir efectos visuales o de sonido para realzar el momento.</li> </ul> </li> <li>Requisitos T\u00e9cnicos: Uso de animaciones y transiciones, posibilidad de agregar efectos de sonido y gr\u00e1ficos para mejorar la experiencia visual.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/pokemon/#pantalla-3-combate","title":"Pantalla 3: Combate","text":"<ul> <li>Objetivo: Simular la batalla entre los dos Pok\u00e9mon seleccionados, permitiendo al jugador interactuar con los ataques y defensas.</li> <li>Descripci\u00f3n Funcional:<ul> <li>Mostrar las estad\u00edsticas actuales de cada Pok\u00e9mon (HP, energ\u00eda, etc.) y actualizar los cambios en tiempo real.</li> <li>Ofrecer opciones de ataque, defensa y movimientos especiales seg\u00fan el Pok\u00e9mon seleccionado.</li> <li>Implementar una mec\u00e1nica de combate por turnos, donde el jugador y el oponente se alternen para realizar acciones.</li> <li>Mostrar efectos visuales y animaciones de los ataques.</li> <li>Definir una l\u00f3gica de combate que considere los tipos y habilidades de cada Pok\u00e9mon.</li> </ul> </li> <li>Requisitos T\u00e9cnicos: Implementaci\u00f3n de l\u00f3gica de combate por turnos, actualizaci\u00f3n de la interfaz en tiempo real y uso de animaciones para los ataques.</li> </ul> <p>Objetivos del Proyecto:     - Crear una experiencia de combate Pok\u00e9mon atractiva y fluida que involucre a los jugadores.     - Desarrollar un sistema de batalla simple que permita entender f\u00e1cilmente los puntos fuertes y d\u00e9biles de cada Pok\u00e9mon en el combate.     - Facilitar una interfaz visualmente atractiva que imite la experiencia de los juegos de Pok\u00e9mon cl\u00e1sicos.</p> <p>-- </p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/pokemon/#recursos","title":"Recursos","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/proyectos/pokemon/#array-de-pokemons-para-usar","title":"Array de Pokemons para usar","text":"<pre><code>const pokemons = [\n    { id: 1, name: \"Bulbasaur\", img: \"https://projectpokemon.org/images/normal-sprite/bulbasaur.gif\", types: [\"Grass\", \"Poison\"], attack: 49, defense: 49, hp: 45 },\n    { id: 2, name: \"Ivysaur\", img: \"https://projectpokemon.org/images/normal-sprite/ivysaur.gif\", types: [\"Grass\", \"Poison\"], attack: 62, defense: 63, hp: 60 },\n    { id: 3, name: \"Venusaur\", img: \"https://projectpokemon.org/images/normal-sprite/venusaur.gif\", types: [\"Grass\", \"Poison\"], attack: 82, defense: 83, hp: 80 },\n    { id: 4, name: \"Charmander\", img: \"https://projectpokemon.org/images/normal-sprite/charmander.gif\", types: [\"Fire\"], attack: 52, defense: 43, hp: 39 },\n    { id: 5, name: \"Charmeleon\", img: \"https://projectpokemon.org/images/normal-sprite/charmeleon.gif\", types: [\"Fire\"], attack: 64, defense: 58, hp: 58 },\n    { id: 6, name: \"Charizard\", img: \"https://projectpokemon.org/images/normal-sprite/charizard.gif\", types: [\"Fire\", \"Flying\"], attack: 84, defense: 78, hp: 78 },\n    { id: 7, name: \"Squirtle\", img: \"https://projectpokemon.org/images/normal-sprite/squirtle.gif\", types: [\"Water\"], attack: 48, defense: 65, hp: 44 },\n    { id: 8, name: \"Wartortle\", img: \"https://projectpokemon.org/images/normal-sprite/wartortle.gif\", types: [\"Water\"], attack: 63, defense: 80, hp: 59 },\n    { id: 9, name: \"Blastoise\", img: \"https://projectpokemon.org/images/normal-sprite/blastoise.gif\", types: [\"Water\"], attack: 83, defense: 100, hp: 79 },\n    { id: 10, name: \"Caterpie\", img: \"https://projectpokemon.org/images/normal-sprite/caterpie.gif\", types: [\"Bug\"], attack: 30, defense: 35, hp: 45 },\n    { id: 11, name: \"Metapod\", img: \"https://projectpokemon.org/images/normal-sprite/metapod.gif\", types: [\"Bug\"], attack: 20, defense: 55, hp: 50 },\n    { id: 12, name: \"Butterfree\", img: \"https://projectpokemon.org/images/normal-sprite/butterfree.gif\", types: [\"Bug\", \"Flying\"], attack: 45, defense: 50, hp: 60 },\n    { id: 13, name: \"Weedle\", img: \"https://projectpokemon.org/images/normal-sprite/weedle.gif\", types: [\"Bug\", \"Poison\"], attack: 35, defense: 30, hp: 40 },\n    { id: 14, name: \"Kakuna\", img: \"https://projectpokemon.org/images/normal-sprite/kakuna.gif\", types: [\"Bug\", \"Poison\"], attack: 25, defense: 50, hp: 45 },\n    { id: 15, name: \"Beedrill\", img: \"https://projectpokemon.org/images/normal-sprite/beedrill.gif\", types: [\"Bug\", \"Poison\"], attack: 90, defense: 40, hp: 65 },\n    { id: 16, name: \"Pidgey\", img: \"https://projectpokemon.org/images/normal-sprite/pidgey.gif\", types: [\"Normal\", \"Flying\"], attack: 45, defense: 40, hp: 40 },\n    { id: 17, name: \"Pidgeotto\", img: \"https://projectpokemon.org/images/normal-sprite/pidgeotto.gif\", types: [\"Normal\", \"Flying\"], attack: 60, defense: 55, hp: 63 },\n    { id: 18, name: \"Pidgeot\", img: \"https://projectpokemon.org/images/normal-sprite/pidgeot.gif\", types: [\"Normal\", \"Flying\"], attack: 80, defense: 75, hp: 83 },\n    { id: 19, name: \"Rattata\", img: \"https://projectpokemon.org/images/normal-sprite/rattata.gif\", types: [\"Normal\"], attack: 56, defense: 35, hp: 30 },\n    { id: 20, name: \"Raticate\", img: \"https://projectpokemon.org/images/normal-sprite/raticate.gif\", types: [\"Normal\"], attack: 81, defense: 60, hp: 55 },\n    { id: 21, name: \"Spearow\", img: \"https://projectpokemon.org/images/normal-sprite/spearow.gif\", types: [\"Normal\", \"Flying\"], attack: 60, defense: 30, hp: 40 },\n    { id: 22, name: \"Fearow\", img: \"https://projectpokemon.org/images/normal-sprite/fearow.gif\", types: [\"Normal\", \"Flying\"], attack: 90, defense: 65, hp: 65 },\n    { id: 23, name: \"Ekans\", img: \"https://projectpokemon.org/images/normal-sprite/ekans.gif\", types: [\"Poison\"], attack: 60, defense: 44, hp: 35 },\n    { id: 24, name: \"Arbok\", img: \"https://projectpokemon.org/images/normal-sprite/arbok.gif\", types: [\"Poison\"], attack: 85, defense: 69, hp: 60 },\n    { id: 25, name: \"Pikachu\", img: \"https://projectpokemon.org/images/normal-sprite/pikachu.gif\", types: [\"Electric\"], attack: 55, defense: 40, hp: 35 },\n    { id: 26, name: \"Raichu\", img: \"https://projectpokemon.org/images/normal-sprite/raichu.gif\", types: [\"Electric\"], attack: 90, defense: 55, hp: 60 },\n    { id: 27, name: \"Sandshrew\", img: \"https://projectpokemon.org/images/normal-sprite/sandshrew.gif\", types: [\"Ground\"], attack: 75, defense: 85, hp: 50 },\n    { id: 28, name: \"Sandslash\", img: \"https://projectpokemon.org/images/normal-sprite/sandslash.gif\", types: [\"Ground\"], attack: 100, defense: 110, hp: 75 },\n    { id: 29, name: \"Nidoran\u2640\", img: \"https://projectpokemon.org/images/normal-sprite/nidoran_f.gif\", types: [\"Poison\"], attack: 47, defense: 52, hp: 55 },\n    { id: 30, name: \"Nidorina\", img: \"https://projectpokemon.org/images/normal-sprite/nidorina.gif\", types: [\"Poison\"], attack: 62, defense: 67, hp: 70 },\n    { id: 31, name: \"Nidoqueen\", img: \"https://projectpokemon.org/images/normal-sprite/nidoqueen.gif\", types: [\"Poison\", \"Ground\"], attack: 92, defense: 87, hp: 90 },\n    { id: 32, name: \"Nidoran\u2642\", img: \"https://projectpokemon.org/images/normal-sprite/nidoran_m.gif\", types: [\"Poison\"], attack: 57, defense: 40, hp: 46 },\n    { id: 33, name: \"Nidorino\", img: \"https://projectpokemon.org/images/normal-sprite/nidorino.gif\", types: [\"Poison\"], attack: 72, defense: 57, hp: 61 },\n    { id: 34, name: \"Nidoking\", img: \"https://projectpokemon.org/images/normal-sprite/nidoking.gif\", types: [\"Poison\", \"Ground\"], attack: 102, defense: 77, hp: 81 },\n    { id: 35, name: \"Clefairy\", img: \"https://projectpokemon.org/images/normal-sprite/clefairy.gif\", types: [\"Fairy\"], attack: 45, defense: 48, hp: 70 },\n    { id: 36, name: \"Clefable\", img: \"https://projectpokemon.org/images/normal-sprite/clefable.gif\", types: [\"Fairy\"], attack: 70, defense: 73, hp: 95 },\n    { id: 37, name: \"Vulpix\", img: \"https://projectpokemon.org/images/normal-sprite/vulpix.gif\", types: [\"Fire\"], attack: 41, defense: 40, hp: 38 },\n    { id: 38, name: \"Ninetales\", img: \"https://projectpokemon.org/images/normal-sprite/ninetales.gif\", types: [\"Fire\"], attack: 76, defense: 75, hp: 73 },\n    { id: 39, name: \"Jigglypuff\", img: \"https://projectpokemon.org/images/normal-sprite/jigglypuff.gif\", types: [\"Normal\", \"Fairy\"], attack: 45, defense: 20, hp: 115 },\n    { id: 40, name: \"Wigglytuff\", img: \"https://projectpokemon.org/images/normal-sprite/wigglytuff.gif\", types: [\"Normal\", \"Fairy\"], attack: 70, defense: 45, hp: 140 },\n    { id: 41, name: \"Zubat\", img: \"https://projectpokemon.org/images/normal-sprite/zubat.gif\", types: [\"Poison\", \"Flying\"], attack: 45, defense: 35, hp: 40 },\n    { id: 42, name: \"Golbat\", img: \"https://projectpokemon.org/images/normal-sprite/golbat.gif\", types: [\"Poison\", \"Flying\"], attack: 80, defense: 70, hp: 75 },\n    { id: 43, name: \"Oddish\", img: \"https://projectpokemon.org/images/normal-sprite/oddish.gif\", types: [\"Grass\", \"Poison\"], attack: 50, defense: 55, hp: 45 },\n    { id: 44, name: \"Gloom\", img: \"https://projectpokemon.org/images/normal-sprite/gloom.gif\", types: [\"Grass\", \"Poison\"], attack: 65, defense: 70, hp: 60 },\n    { id: 45, name: \"Vileplume\", img: \"https://projectpokemon.org/images/normal-sprite/vileplume.gif\", types: [\"Grass\", \"Poison\"], attack: 80, defense: 85, hp: 75 },\n    { id: 46, name: \"Paras\", img: \"https://projectpokemon.org/images/normal-sprite/paras.gif\", types: [\"Bug\", \"Grass\"], attack: 70, defense: 55, hp: 35 },\n    { id: 47, name: \"Parasect\", img: \"https://projectpokemon.org/images/normal-sprite/parasect.gif\", types: [\"Bug\", \"Grass\"], attack: 95, defense: 80, hp: 60 },\n    { id: 48, name: \"Venonat\", img: \"https://projectpokemon.org/images/normal-sprite/venonat.gif\", types: [\"Bug\", \"Poison\"], attack: 55, defense: 50, hp: 60 },\n    { id: 49, name: \"Venomoth\", img: \"https://projectpokemon.org/images/normal-sprite/venomoth.gif\", types: [\"Bug\", \"Poison\"], attack: 65, defense: 60, hp: 70 },\n    { id: 50, name: \"Diglett\", img: \"https://projectpokemon.org/images/normal-sprite/diglett.gif\", types: [\"Ground\"], attack: 55, defense: 25, hp: 10 },\n    { id: 51, name: \"Dugtrio\", img: \"https://projectpokemon.org/images/normal-sprite/dugtrio.gif\", types: [\"Ground\"], attack: 100, defense: 50, hp: 35 },\n    { id: 52, name: \"Meowth\", img: \"https://projectpokemon.org/images/normal-sprite/meowth.gif\", types: [\"Normal\"], attack: 45, defense: 35, hp: 40 },\n    { id: 53, name: \"Persian\", img: \"https://projectpokemon.org/images/normal-sprite/persian.gif\", types: [\"Normal\"], attack: 70, defense: 60, hp: 65 },\n    { id: 54, name: \"Psyduck\", img: \"https://projectpokemon.org/images/normal-sprite/psyduck.gif\", types: [\"Water\"], attack: 52, defense: 48, hp: 50 },\n    { id: 55, name: \"Golduck\", img: \"https://projectpokemon.org/images/normal-sprite/golduck.gif\", types: [\"Water\"], attack: 82, defense: 78, hp: 80 },\n    { id: 56, name: \"Mankey\", img: \"https://projectpokemon.org/images/normal-sprite/mankey.gif\", types: [\"Fighting\"], attack: 80, defense: 35, hp: 40 },\n    { id: 57, name: \"Primeape\", img: \"https://projectpokemon.org/images/normal-sprite/primeape.gif\", types: [\"Fighting\"], attack: 105, defense: 60, hp: 65 },\n    { id: 58, name: \"Growlithe\", img: \"https://projectpokemon.org/images/normal-sprite/growlithe.gif\", types: [\"Fire\"], attack: 70, defense: 45, hp: 55 },\n    { id: 59, name: \"Arcanine\", img: \"https://projectpokemon.org/images/normal-sprite/arcanine.gif\", types: [\"Fire\"], attack: 110, defense: 80, hp: 90 },\n    { id: 60, name: \"Poliwag\", img: \"https://projectpokemon.org/images/normal-sprite/poliwag.gif\", types: [\"Water\"], attack: 50, defense: 40, hp: 40 },\n    { id: 61, name: \"Poliwhirl\", img: \"https://projectpokemon.org/images/normal-sprite/poliwhirl.gif\", types: [\"Water\"], attack: 65, defense: 65, hp: 65 },\n    { id: 62, name: \"Poliwrath\", img: \"https://projectpokemon.org/images/normal-sprite/poliwrath.gif\", types: [\"Water\", \"Fighting\"], attack: 85, defense: 95, hp: 90 },\n    { id: 63, name: \"Abra\", img: \"https://projectpokemon.org/images/normal-sprite/abra.gif\", types: [\"Psychic\"], attack: 20, defense: 15, hp: 25 },\n    { id: 64, name: \"Kadabra\", img: \"https://projectpokemon.org/images/normal-sprite/kadabra.gif\", types: [\"Psychic\"], attack: 35, defense: 30, hp: 40 },\n    { id: 65, name: \"Alakazam\", img: \"https://projectpokemon.org/images/normal-sprite/alakazam.gif\", types: [\"Psychic\"], attack: 50, defense: 45, hp: 55 },\n    { id: 66, name: \"Machop\", img: \"https://projectpokemon.org/images/normal-sprite/machop.gif\", types: [\"Fighting\"], attack: 80, defense: 50, hp: 70 },\n    { id: 67, name: \"Machoke\", img: \"https://projectpokemon.org/images/normal-sprite/machoke.gif\", types: [\"Fighting\"], attack: 100, defense: 70, hp: 80 },\n    { id: 68, name: \"Machamp\", img: \"https://projectpokemon.org/images/normal-sprite/machamp.gif\", types: [\"Fighting\"], attack: 130, defense: 80, hp: 90 },\n    { id: 69, name: \"Bellsprout\", img: \"https://projectpokemon.org/images/normal-sprite/bellsprout.gif\", types: [\"Grass\", \"Poison\"], attack: 75, defense: 35, hp: 50 },\n    { id: 70, name: \"Weepinbell\", img: \"https://projectpokemon.org/images/normal-sprite/weepinbell.gif\", types: [\"Grass\", \"Poison\"], attack: 90, defense: 50, hp: 65 },\n    { id: 71, name: \"Victreebel\", img: \"https://projectpokemon.org/images/normal-sprite/victreebel.gif\", types: [\"Grass\", \"Poison\"], attack: 105, defense: 65, hp: 80 },\n    { id: 72, name: \"Tentacool\", img: \"https://projectpokemon.org/images/normal-sprite/tentacool.gif\", types: [\"Water\", \"Poison\"], attack: 40, defense: 35, hp: 40 },\n    { id: 73, name: \"Tentacruel\", img: \"https://projectpokemon.org/images/normal-sprite/tentacruel.gif\", types: [\"Water\", \"Poison\"], attack: 50, defense: 40, hp: 50 },\n    { id: 74, name: \"Geodude\", img: \"https://projectpokemon.org/images/normal-sprite/geodude.gif\", types: [\"Rock\", \"Ground\"], attack: 55, defense: 45, hp: 55 },\n    { id: 75, name: \"Graveler\", img: \"https://projectpokemon.org/images/normal-sprite/graveler.gif\", types: [\"Rock\", \"Ground\"], attack: 60, defense: 50, hp: 60 },\n    { id: 76, name: \"Golem\", img: \"https://projectpokemon.org/images/normal-sprite/golem.gif\", types: [\"Rock\", \"Ground\"], attack: 65, defense: 55, hp: 65 },\n    { id: 77, name: \"Ponyta\", img: \"https://projectpokemon.org/images/normal-sprite/ponyta.gif\", types: [\"Fire\"], attack: 60, defense: 45, hp: 50 },\n    { id: 78, name: \"Rapidash\", img: \"https://projectpokemon.org/images/normal-sprite/rapidash.gif\", types: [\"Fire\"], attack: 65, defense: 55, hp: 65 },\n    { id: 79, name: \"Slowpoke\", img: \"https://projectpokemon.org/images/normal-sprite/slowpoke.gif\", types: [\"Water\", \"Psychic\"], attack: 55, defense: 45, hp: 50 },\n    { id: 80, name: \"Slowbro\", img: \"https://projectpokemon.org/images/normal-sprite/slowbro.gif\", types: [\"Water\", \"Psychic\"], attack: 65, defense: 50, hp: 65 },\n    { id: 81, name: \"Magnemite\", img: \"https://projectpokemon.org/images/normal-sprite/magnemite.gif\", types: [\"Electric\", \"Steel\"], attack: 45, defense: 40, hp: 35 },\n    { id: 82, name: \"Magneton\", img: \"https://projectpokemon.org/images/normal-sprite/magneton.gif\", types: [\"Electric\", \"Steel\"], attack: 50, defense: 50, hp: 45 },\n    { id: 83, name: \"Farfetch\u2019d\", img: \"https://projectpokemon.org/images/normal-sprite/farfetchd.gif\", types: [\"Normal\", \"Flying\"], attack: 65, defense: 55, hp: 52 },\n    { id: 84, name: \"Doduo\", img: \"https://projectpokemon.org/images/normal-sprite/doduo.gif\", types: [\"Normal\", \"Flying\"], attack: 85, defense: 45, hp: 65 },\n    { id: 85, name: \"Dodrio\", img: \"https://projectpokemon.org/images/normal-sprite/dodrio.gif\", types: [\"Normal\", \"Flying\"], attack: 110, defense: 70, hp: 95 },\n    { id: 86, name: \"Seel\", img: \"https://projectpokemon.org/images/normal-sprite/seel.gif\", types: [\"Water\"], attack: 45, defense: 55, hp: 65 },\n    { id: 87, name: \"Dewgong\", img: \"https://projectpokemon.org/images/normal-sprite/dewgong.gif\", types: [\"Water\", \"Ice\"], attack: 70, defense: 80, hp: 90 },\n    { id: 88, name: \"Grimer\", img: \"https://projectpokemon.org/images/normal-sprite/grimer.gif\", types: [\"Poison\"], attack: 80, defense: 50, hp: 70 },\n    { id: 89, name: \"Muk\", img: \"https://projectpokemon.org/images/normal-sprite/muk.gif\", types: [\"Poison\"], attack: 105, defense: 75, hp: 105 },\n    { id: 90, name: \"Shellder\", img: \"https://projectpokemon.org/images/normal-sprite/shellder.gif\", types: [\"Water\"], attack: 65, defense: 100, hp: 30 },\n    { id: 91, name: \"Cloyster\", img: \"https://projectpokemon.org/images/normal-sprite/cloyster.gif\", types: [\"Water\", \"Ice\"], attack: 95, defense: 180, hp: 50 },\n    { id: 92, name: \"Gastly\", img: \"https://projectpokemon.org/images/normal-sprite/gastly.gif\", types: [\"Ghost\", \"Poison\"], attack: 35, defense: 30, hp: 30 },\n    { id: 93, name: \"Haunter\", img: \"https://projectpokemon.org/images/normal-sprite/haunter.gif\", types: [\"Ghost\", \"Poison\"], attack: 50, defense: 45, hp: 45 },\n    { id: 94, name: \"Gengar\", img: \"https://projectpokemon.org/images/normal-sprite/gengar.gif\", types: [\"Ghost\", \"Poison\"], attack: 65, defense: 60, hp: 60 },\n    { id: 95, name: \"Onix\", img: \"https://projectpokemon.org/images/normal-sprite/onix.gif\", types: [\"Rock\", \"Ground\"], attack: 45, defense: 160, hp: 35 },\n    { id: 96, name: \"Drowzee\", img: \"https://projectpokemon.org/images/normal-sprite/drowzee.gif\", types: [\"Psychic\"], attack: 48, defense: 45, hp: 60 },\n    { id: 97, name: \"Hypno\", img: \"https://projectpokemon.org/images/normal-sprite/hypno.gif\", types: [\"Psychic\"], attack: 73, defense: 70, hp: 85 },\n    { id: 98, name: \"Krabby\", img: \"https://projectpokemon.org/images/normal-sprite/krabby.gif\", types: [\"Water\"], attack: 105, defense: 90, hp: 30 },\n    { id: 99, name: \"Kingler\", img: \"https://projectpokemon.org/images/normal-sprite/kingler.gif\", types: [\"Water\"], attack: 130, defense: 115, hp: 55 },\n    { id: 100, name: \"Voltorb\", img: \"https://projectpokemon.org/images/normal-sprite/voltorb.gif\", types: [\"Electric\"], attack: 30, defense: 50, hp: 40 },\n    { id: 101, name: \"Electrode\", img: \"https://projectpokemon.org/images/normal-sprite/electrode.gif\", types: [\"Electric\"], attack: 50, defense: 70, hp: 60 },\n    { id: 102, name: \"Exeggcute\", img: \"https://projectpokemon.org/images/normal-sprite/exeggcute.gif\", types: [\"Grass\", \"Psychic\"], attack: 40, defense: 80, hp: 60 },\n    { id: 103, name: \"Exeggutor\", img: \"https://projectpokemon.org/images/normal-sprite/exeggutor.gif\", types: [\"Grass\", \"Psychic\"], attack: 95, defense: 85, hp: 95 },\n    { id: 104, name: \"Cubone\", img: \"https://projectpokemon.org/images/normal-sprite/cubone.gif\", types: [\"Ground\"], attack: 50, defense: 95, hp: 50 },\n    { id: 105, name: \"Marowak\", img: \"https://projectpokemon.org/images/normal-sprite/marowak.gif\", types: [\"Ground\"], attack: 80, defense: 110, hp: 60 },\n    { id: 106, name: \"Hitmonlee\", img: \"https://projectpokemon.org/images/normal-sprite/hitmonlee.gif\", types: [\"Fighting\"], attack: 120, defense: 53, hp: 50 },\n    { id: 107, name: \"Hitmonchan\", img: \"https://projectpokemon.org/images/normal-sprite/hitmonchan.gif\", types: [\"Fighting\"], attack: 105, defense: 79, hp: 50 },\n    { id: 108, name: \"Lickitung\", img: \"https://projectpokemon.org/images/normal-sprite/lickitung.gif\", types: [\"Normal\"], attack: 55, defense: 75, hp: 90 },\n    { id: 109, name: \"Koffing\", img: \"https://projectpokemon.org/images/normal-sprite/koffing.gif\", types: [\"Poison\"], attack: 65, defense: 95, hp: 40 },\n    { id: 110, name: \"Weezing\", img: \"https://projectpokemon.org/images/normal-sprite/weezing.gif\", types: [\"Poison\"], attack: 90, defense: 120, hp: 65 },\n    { id: 111, name: \"Rhyhorn\", img: \"https://projectpokemon.org/images/normal-sprite/rhyhorn.gif\", types: [\"Ground\", \"Rock\"], attack: 85, defense: 95, hp: 80 },\n    { id: 112, name: \"Rhydon\", img: \"https://projectpokemon.org/images/normal-sprite/rhydon.gif\", types: [\"Ground\", \"Rock\"], attack: 130, defense: 120, hp: 105 },\n    { id: 113, name: \"Chansey\", img: \"https://projectpokemon.org/images/normal-sprite/chansey.gif\", types: [\"Normal\"], attack: 5, defense: 5, hp: 250 },\n    { id: 114, name: \"Tangela\", img: \"https://projectpokemon.org/images/normal-sprite/tangela.gif\", types: [\"Grass\"], attack: 55, defense: 115, hp: 65 },\n    { id: 115, name: \"Kangaskhan\", img: \"https://projectpokemon.org/images/normal-sprite/kangaskhan.gif\", types: [\"Normal\"], attack: 95, defense: 80, hp: 105 },\n    { id: 116, name: \"Horsea\", img: \"https://projectpokemon.org/images/normal-sprite/horsea.gif\", types: [\"Water\"], attack: 40, defense: 70, hp: 30 },\n    { id: 117, name: \"Seadra\", img: \"https://projectpokemon.org/images/normal-sprite/seadra.gif\", types: [\"Water\"], attack: 65, defense: 95, hp: 55 },\n    { id: 118, name: \"Goldeen\", img: \"https://projectpokemon.org/images/normal-sprite/goldeen.gif\", types: [\"Water\"], attack: 67, defense: 60, hp: 45 },\n    { id: 119, name: \"Seaking\", img: \"https://projectpokemon.org/images/normal-sprite/seaking.gif\", types: [\"Water\"], attack: 92, defense: 65, hp: 80 },\n    { id: 120, name: \"Staryu\", img: \"https://projectpokemon.org/images/normal-sprite/staryu.gif\", types: [\"Water\"], attack: 45, defense: 55, hp: 30 },\n    { id: 121, name: \"Starmie\", img: \"https://projectpokemon.org/images/normal-sprite/starmie.gif\", types: [\"Water\", \"Psychic\"], attack: 60, defense: 85, hp: 60 },\n    { id: 122, name: \"Mr. Mime\", img: \"https://projectpokemon.org/images/normal-sprite/mr.mime.gif\", types: [\"Psychic\", \"Fairy\"], attack: 45, defense: 65, hp: 40 },\n    { id: 123, name: \"Scyther\", img: \"https://projectpokemon.org/images/normal-sprite/scyther.gif\", types: [\"Bug\", \"Flying\"], attack: 110, defense: 80, hp: 70 },\n    { id: 124, name: \"Jynx\", img: \"https://projectpokemon.org/images/normal-sprite/jynx.gif\", types: [\"Ice\", \"Psychic\"], attack: 50, defense: 35, hp: 65 },\n    { id: 125, name: \"Electabuzz\", img: \"https://projectpokemon.org/images/normal-sprite/electabuzz.gif\", types: [\"Electric\"], attack: 83, defense: 57, hp: 65 },\n    { id: 126, name: \"Magmar\", img: \"https://projectpokemon.org/images/normal-sprite/magmar.gif\", types: [\"Fire\"], attack: 95, defense: 57, hp: 65 },\n    { id: 127, name: \"Pinsir\", img: \"https://projectpokemon.org/images/normal-sprite/pinsir.gif\", types: [\"Bug\"], attack: 125, defense: 100, hp: 65 },\n    { id: 128, name: \"Tauros\", img: \"https://projectpokemon.org/images/normal-sprite/tauros.gif\", types: [\"Normal\"], attack: 100, defense: 95, hp: 75 },\n    { id: 129, name: \"Magikarp\", img: \"https://projectpokemon.org/images/normal-sprite/magikarp.gif\", types: [\"Water\"], attack: 10, defense: 55, hp: 20 },\n    { id: 130, name: \"Gyarados\", img: \"https://projectpokemon.org/images/normal-sprite/gyarados.gif\", types: [\"Water\", \"Flying\"], attack: 125, defense: 79, hp: 95 },\n    { id: 131, name: \"Lapras\", img: \"https://projectpokemon.org/images/normal-sprite/lapras.gif\", types: [\"Water\", \"Ice\"], attack: 85, defense: 80, hp: 130 },\n    { id: 132, name: \"Ditto\", img: \"https://projectpokemon.org/images/normal-sprite/ditto.gif\", types: [\"Normal\"], attack: 48, defense: 48, hp: 48 },\n    { id: 133, name: \"Eevee\", img: \"https://projectpokemon.org/images/normal-sprite/eevee.gif\", types: [\"Normal\"], attack: 55, defense: 50, hp: 55 },\n    { id: 134, name: \"Vaporeon\", img: \"https://projectpokemon.org/images/normal-sprite/vaporeon.gif\", types: [\"Water\"], attack: 65, defense: 60, hp: 130 },\n    { id: 135, name: \"Jolteon\", img: \"https://projectpokemon.org/images/normal-sprite/jolteon.gif\", types: [\"Electric\"], attack: 65, defense: 60, hp: 65 },\n    { id: 136, name: \"Flareon\", img: \"https://projectpokemon.org/images/normal-sprite/flareon.gif\", types: [\"Fire\"], attack: 130, defense: 60, hp: 65 },\n    { id: 137, name: \"Porygon\", img: \"https://projectpokemon.org/images/normal-sprite/porygon.gif\", types: [\"Normal\"], attack: 60, defense: 70, hp: 65 },\n    { id: 138, name: \"Omanyte\", img: \"https://projectpokemon.org/images/normal-sprite/omanyte.gif\", types: [\"Rock\", \"Water\"], attack: 40, defense: 100, hp: 35 },\n    { id: 139, name: \"Omastar\", img: \"https://projectpokemon.org/images/normal-sprite/omastar.gif\", types: [\"Rock\", \"Water\"], attack: 60, defense: 125, hp: 70 },\n    { id: 140, name: \"Kabuto\", img: \"https://projectpokemon.org/images/normal-sprite/kabuto.gif\", types: [\"Rock\", \"Water\"], attack: 80, defense: 90, hp: 30 },\n    { id: 141, name: \"Kabutops\", img: \"https://projectpokemon.org/images/normal-sprite/kabutops.gif\", types: [\"Rock\", \"Water\"], attack: 115, defense: 105, hp: 60 },\n    { id: 142, name: \"Aerodactyl\", img: \"https://projectpokemon.org/images/normal-sprite/aerodactyl.gif\", types: [\"Rock\", \"Flying\"], attack: 105, defense: 65, hp: 80 },\n    { id: 143, name: \"Snorlax\", img: \"https://projectpokemon.org/images/normal-sprite/snorlax.gif\", types: [\"Normal\"], attack: 110, defense: 65, hp: 160 },\n    { id: 144, name: \"Articuno\", img: \"https://projectpokemon.org/images/normal-sprite/articuno.gif\", types: [\"Ice\", \"Flying\"], attack: 85, defense: 100, hp: 90 },\n    { id: 145, name: \"Zapdos\", img: \"https://projectpokemon.org/images/normal-sprite/zapdos.gif\", types: [\"Electric\", \"Flying\"], attack: 90, defense: 85, hp: 90 },\n    { id: 146, name: \"Moltres\", img: \"https://projectpokemon.org/images/normal-sprite/moltres.gif\", types: [\"Fire\", \"Flying\"], attack: 100, defense: 90, hp: 90 },\n    { id: 147, name: \"Dratini\", img: \"https://projectpokemon.org/images/normal-sprite/dratini.gif\", types: [\"Dragon\"], attack: 64, defense: 45, hp: 41 },\n    { id: 148, name: \"Dragonair\", img: \"https://projectpokemon.org/images/normal-sprite/dragonair.gif\", types: [\"Dragon\"], attack: 84, defense: 65, hp: 61 },\n    { id: 149, name: \"Dragonite\", img: \"https://projectpokemon.org/images/normal-sprite/dragonite.gif\", types: [\"Dragon\", \"Flying\"], attack: 134, defense: 95, hp: 91 },\n    { id: 150, name: \"Mewtwo\", img: \"https://projectpokemon.org/images/normal-sprite/mewtwo.gif\", types: [\"Psychic\"], attack: 110, defense: 90, hp: 106 },\n    { id: 151, name: \"Mew\", img: \"https://projectpokemon.org/images/normal-sprite/mew.gif\", types: [\"Psychic\"], attack: 100, defense: 100, hp: 100 }\n];\n</code></pre>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/carritodelacompraconconcookies/","title":"Carritodelacompraconconcookies","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/carritodelacompraconconcookies/#enunciado-de-la-tarea-carrito-de-compras","title":"Enunciado de la Tarea: Carrito de Compras","text":"<p>Descripci\u00f3n General:</p> <p>El objetivo de esta tarea es crear una p\u00e1gina web interactiva donde los usuarios puedan agregar productos a un carrito de compras y gestionar el contenido del carrito de manera sencilla y visual. La p\u00e1gina debe permitir a los usuarios:</p> <ul> <li> <p>Explorar productos disponibles: Mostrar una lista de productos con im\u00e1genes y descripciones. Los usuarios podr\u00e1n ver la selecci\u00f3n de productos disponibles en la p\u00e1gina.</p> </li> <li> <p>Agregar productos al carrito: Incluir un bot\u00f3n en cada producto que permita a los usuarios agregarlo al carrito. Si el mismo producto se agrega varias veces, la cantidad de ese producto en el carrito debe aumentar.</p> </li> <li> <p>Visualizar el contenido del carrito: Los productos que se agregan deben mostrarse en una secci\u00f3n dedicada al carrito. Esta secci\u00f3n debe mostrar cada producto con su cantidad actual y permitir gestionar los productos.</p> </li> <li> <p>Eliminar productos del carrito: Incluir un bot\u00f3n en cada art\u00edculo del carrito que permita al usuario eliminar ese producto del carrito.</p> </li> <li> <p>Vaciar el carrito: Proporcionar una opci\u00f3n para vaciar completamente el carrito de compras, eliminando todos los productos que se han agregado.</p> </li> <li> <p>Persistencia de la informaci\u00f3n del carrito: Asegurarse de que los productos agregados al carrito se mantengan incluso despu\u00e9s de cerrar o recargar la p\u00e1gina, para que el usuario no pierda su selecci\u00f3n al salir temporalmente de la web.</p> </li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/carritodelacompraconconcookies/#objetivos","title":"Objetivos:","text":"<ul> <li>Proporcionar una experiencia de compra en l\u00ednea donde los usuarios puedan agregar y gestionar productos en un carrito.</li> <li>Permitir la interacci\u00f3n y gesti\u00f3n del carrito de compras de manera sencilla e intuitiva.</li> <li>Mantener la selecci\u00f3n del carrito de forma persistente mientras los usuarios navegan o vuelven a la p\u00e1gina.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/carritodelacompraconconcookies/#consideraciones","title":"Consideraciones:","text":"<ul> <li>La interfaz debe ser clara, accesible y f\u00e1cil de usar.</li> <li>Los productos en el carrito deben actualizarse de forma din\u00e1mica y en tiempo real.</li> <li>El usuario debe poder realizar todas las acciones necesarias (agregar, eliminar, vaciar el carrito) sin necesidad de recargar la p\u00e1gina manualmente.</li> </ul>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/cookies/","title":"Cookies","text":"<p>Aqu\u00ed tienes una serie de tareas pr\u00e1cticas para que los estudiantes trabajen con cookies en un entorno de desarrollo web. Las tareas est\u00e1n orientadas a entender c\u00f3mo crear, leer, actualizar y eliminar cookies, as\u00ed como a utilizar su contenido para mejorar la experiencia del usuario.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/cookies/#serie-de-tareas-sobre-cookies","title":"Serie de tareas sobre cookies:","text":""},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/cookies/#tarea-1-crear-una-cookie-de-bienvenida","title":"Tarea 1: Crear una cookie de bienvenida","text":"<p>Objetivo: Familiarizarse con la creaci\u00f3n y escritura de cookies.</p> <ol> <li> <p>Descripci\u00f3n:</p> </li> <li> <p>Crea una p\u00e1gina web que, al ser visitada por primera vez, almacene una cookie que indique la fecha y la hora de la visita.</p> </li> <li> <p>Muestra un mensaje de bienvenida en la p\u00e1gina que diga: \"\u00a1Bienvenido a nuestra p\u00e1gina! Primera visita: [fecha y hora]\".</p> </li> <li> <p>Instrucciones:</p> </li> <li>Utiliza <code>document.cookie</code> para crear una cookie con el valor de la fecha y la hora actual.</li> <li>Guarda la cookie con una duraci\u00f3n de 7 d\u00edas.</li> </ol>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/cookies/#tarea-2-leer-y-mostrar-las-cookies","title":"Tarea 2: Leer y mostrar las cookies","text":"<p>Objetivo: Aprender a leer cookies desde JavaScript.</p> <ol> <li> <p>Descripci\u00f3n:</p> </li> <li> <p>Modifica la tarea anterior para que, si el usuario vuelve a visitar la p\u00e1gina, se muestre un mensaje personalizado que diga: \"\u00a1Bienvenido de nuevo! \u00daltima visita: [fecha y hora de la \u00faltima visita]\".</p> </li> <li> <p>Actualiza la cookie cada vez que el usuario vuelva a visitar la p\u00e1gina.</p> </li> <li> <p>Instrucciones:</p> </li> <li>Lee las cookies almacenadas utilizando <code>document.cookie</code>.</li> <li>Usa funciones para extraer la informaci\u00f3n de la cookie y mostrarla en la p\u00e1gina.</li> <li>Actualiza la cookie cada vez que el usuario accede, almacenando la nueva fecha y hora.</li> </ol>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/cookies/#tarea-3-crear-una-cookie-con-preferencias-del-usuario","title":"Tarea 3: Crear una cookie con preferencias del usuario","text":"<p>Objetivo: Almacenar preferencias de usuario en cookies.</p> <ol> <li> <p>Descripci\u00f3n:</p> </li> <li> <p>Crea una p\u00e1gina que permita al usuario elegir entre dos temas de colores (ej. claro y oscuro).</p> </li> <li> <p>Guarda la elecci\u00f3n del usuario en una cookie y aplica el tema seleccionado la pr\u00f3xima vez que el usuario visite la p\u00e1gina.</p> </li> <li> <p>Instrucciones:</p> </li> <li>Utiliza una cookie para guardar la preferencia de tema (ej. <code>tema=oscuro</code>).</li> <li>Cuando el usuario cambie el tema, guarda la nueva preferencia en la cookie.</li> <li>Cada vez que el usuario visita la p\u00e1gina, lee la cookie y aplica el tema correcto.</li> </ol>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/cookies/#tarea-4-expiracion-de-cookies","title":"Tarea 4: Expiraci\u00f3n de cookies","text":"<p>Objetivo: Trabajar con la expiraci\u00f3n y la eliminaci\u00f3n de cookies.</p> <ol> <li> <p>Descripci\u00f3n:</p> </li> <li> <p>Crea una p\u00e1gina con una cuenta regresiva que expire en 1 minuto. Al expirar, muestra un mensaje indicando que la sesi\u00f3n ha caducado.</p> </li> <li> <p>Usa una cookie con una expiraci\u00f3n de 1 minuto para gestionar la sesi\u00f3n.</p> </li> <li> <p>Instrucciones:</p> </li> <li>Crea una cookie con la fecha y hora de expiraci\u00f3n 1 minuto despu\u00e9s de que el usuario acceda.</li> <li>Si la cookie ha caducado, muestra un mensaje como: \"Sesi\u00f3n caducada. Por favor, recarga la p\u00e1gina\".</li> <li>Permite al usuario eliminar manualmente la cookie con un bot\u00f3n.</li> </ol>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/cookies/#tarea-5-almacenar-y-eliminar-cookies-de-login","title":"Tarea 5: Almacenar y eliminar cookies de login","text":"<p>Objetivo: Crear un sistema de login simple utilizando cookies.</p> <ol> <li> <p>Descripci\u00f3n:</p> </li> <li> <p>Implementa un formulario de login simple en el que el usuario ingrese su nombre de usuario.</p> </li> <li>Al hacer login, guarda el nombre de usuario en una cookie con una duraci\u00f3n de 24 horas.</li> <li>Muestra el nombre del usuario en la p\u00e1gina despu\u00e9s de hacer login.</li> <li> <p>Incluye un bot\u00f3n de logout que borre la cookie y redirija al usuario a la p\u00e1gina de login.</p> </li> <li> <p>Instrucciones:</p> </li> <li>Almacena el nombre de usuario en una cookie usando <code>document.cookie</code>.</li> <li>Al recargar la p\u00e1gina, verifica si la cookie del usuario existe y, si es as\u00ed, muestra su nombre.</li> <li>Crea un bot\u00f3n de logout que borre la cookie (<code>document.cookie = \"usuario=; expires=Thu, 01 Jan 1970 00:00:00 UTC;\"</code>).</li> </ol>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/cookies/#tarea-6-seguridad-en-cookies-opcional","title":"Tarea 6: Seguridad en cookies (opcional)","text":"<p>Objetivo: Introducir conceptos de seguridad con cookies.</p> <ol> <li> <p>Descripci\u00f3n:</p> </li> <li> <p>Investiga c\u00f3mo proteger cookies usando la bandera <code>HttpOnly</code> (solo desde el servidor) y <code>Secure</code> (solo en conexiones HTTPS).</p> </li> <li> <p>Discute los riesgos de las cookies que no son seguras y c\u00f3mo mitigar ataques como el robo de sesiones.</p> </li> <li> <p>Instrucciones:</p> </li> <li>En esta tarea, los alumnos investigar\u00e1n c\u00f3mo estos par\u00e1metros pueden ser configurados desde el servidor, discutiendo la relevancia de estos conceptos en aplicaciones reales.</li> <li>No es necesario implementar estos cambios en el c\u00f3digo, sino discutir su importancia.</li> </ol> <p>Estas tareas permitir\u00e1n a los estudiantes aprender gradualmente c\u00f3mo trabajar con cookies y aplicar este conocimiento en escenarios que simulan el uso en aplicaciones reales, como personalizaci\u00f3n de temas, manejo de sesiones y almacenamiento de preferencias.</p>"},{"location":"ut3-objetos-predefinidos-del-lenguaje/tareas/draganddrop/","title":"Enunciado de la Tarea: Arrastra las Palabras a sus Categor\u00edas**","text":"<p>Descripci\u00f3n de la Actividad: En esta actividad, deber\u00e1s clasificar correctamente una serie de palabras en sus categor\u00edas correspondientes. Contar\u00e1s con tres categor\u00edas: \"Frutas\", \"Animales\" y \"Colores\". Tu tarea es arrastrar cada palabra y soltarla en la categor\u00eda adecuada.</p> <p>Instrucciones:</p> <ol> <li> <p>Arrastra y suelta las palabras: Ver\u00e1s una lista de palabras, como \"Manzana\", \"Perro\", \"Rojo\", etc. Arrastra cada palabra y col\u00f3cala en la categor\u00eda que creas correcta (por ejemplo, \"Manzana\" debe ir en \"Frutas\").</p> </li> <li> <p>Usa el bot\u00f3n \"Validar\": Una vez que hayas clasificado todas las palabras, pulsa el bot\u00f3n \"Validar\". La p\u00e1gina revisar\u00e1 tus respuestas y te indicar\u00e1 cu\u00e1les est\u00e1n en la categor\u00eda correcta y cu\u00e1les no.</p> </li> <li> <p>Resultado: </p> </li> <li>Si todas las palabras est\u00e1n correctamente clasificadas, recibir\u00e1s un mensaje de felicitaci\u00f3n.</li> <li>Si algunas palabras est\u00e1n en categor\u00edas incorrectas, el sistema te informar\u00e1 cu\u00e1ntas colocaste correctamente y te animar\u00e1 a intentarlo de nuevo.</li> </ol> <p>Criterios de Evaluaci\u00f3n: Para completar la actividad correctamente, todas las palabras deben estar en sus categor\u00edas adecuadas. Recibir\u00e1s retroalimentaci\u00f3n visual: las palabras correctamente clasificadas aparecer\u00e1n en verde y las incorrectas en rojo.</p> <p>Objetivo: Esta actividad te ayudar\u00e1 a mejorar tus habilidades de clasificaci\u00f3n y organizaci\u00f3n al identificar diferentes categor\u00edas de objetos.</p>"}]}