{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf89 \u00a1Bienvenidos a Desarrollo de Interfaces! \ud83c\udf1f","text":""},{"location":"#desarrollo-de-aplicaciones-multiplataforma","title":"\ud83d\ude80 Desarrollo de Aplicaciones Multiplataforma","text":"<p>\u00a1Hola a todos! \ud83d\udc4b Me alegra daros la bienvenida a la asignatura de Desarrollo de Interfaces del grado superior de Desarrollo de Aplicaciones Multiplataforma. Este curso es donde creatividad y tecnolog\u00eda se encuentran para crear experiencias digitales incre\u00edbles. A lo largo de esta asignatura, vamos a sumergirnos en el fascinante mundo del dise\u00f1o y desarrollo de interfaces de usuario efectivas y usables, utilizando las herramientas m\u00e1s punteras en desarrollo web y m\u00f3vil. \ud83d\udcf1\ud83d\udcbb</p>"},{"location":"#que-aprenderemos","title":"\ud83c\udfaf \u00bfQu\u00e9 aprenderemos?","text":"<p>En este curso, nos enfocaremos en construir interfaces que sean visualmente atractivas y f\u00e1ciles de usar, con un fuerte enfoque en la usabilidad y la experiencia del usuario (UX). Desde la configuraci\u00f3n de entornos de desarrollo hasta la creaci\u00f3n de componentes avanzados con Angular e Ionic, aprenderemos a manejar las herramientas clave para el desarrollo de aplicaciones modernas. \u00a1Prep\u00e1rate para llevar tus habilidades de desarrollo al siguiente nivel! \ud83d\ude80</p>"},{"location":"#indice-de-contenidos","title":"\ud83d\udcda \u00cdndice de Contenidos","text":"<ol> <li> <p>Unidad 1: Dise\u00f1amos Nuestra Interfaz. Usabilidad \ud83c\udfa8    Descubriremos los principios y mejores pr\u00e1cticas del dise\u00f1o centrado en el usuario, para crear interfaces intuitivas, atractivas y que mejoren la experiencia del usuario. \u00a1Vamos a hacer que nuestros usuarios se enamoren de nuestras aplicaciones! \ud83d\ude0d</p> </li> <li> <p>Unidad 2: Programaci\u00f3n con TypeScript \ud83d\udd27    Nos sumergiremos en TypeScript, el superh\u00e9roe del desarrollo web que aporta seguridad y eficiencia al escribir c\u00f3digo limpio y manejable. \u00a1S\u00famate a la legi\u00f3n de desarrolladores que ya usan TypeScript!</p> </li> <li> <p>Unidad 3: Introducci\u00f3n a Angular \u2699\ufe0f    Aprende a dominar Angular, uno de los frameworks m\u00e1s poderosos para la construcci\u00f3n de aplicaciones web robustas. Veremos c\u00f3mo integrar XML y manejar datos de forma eficiente en nuestras aplicaciones.</p> </li> <li> <p>Unidad 4: Creaci\u00f3n y Manejo de Componentes con Angular-Ionic \ud83d\udee0\ufe0f    Descubre c\u00f3mo construir y gestionar componentes reutilizables que ser\u00e1n la base para desarrollar interfaces modulares y eficientes con Angular e Ionic. \u00a1Todo comienza con un buen componente!</p> </li> <li>Soluciones h\u00edbridas de desarrollo web, IONIC</li> <li>Introducci\u00f3n a IONIC. Introducir link a la documentaci\u00f3n: https://ionicframework.com/docs</li> <li>Instalaci\u00f3n https://ionicframework.com/docs/intro/cli</li> <li> <p>Crear un template desde la web: https://dashboard.ionicframework.com/org/485acdef-b97f-4e2a-b24f-bd63214179c4/build-app</p> </li> <li> <p>Unidad 5: Reportes en Angular \ud83d\udcca    Aprende a generar reportes din\u00e1micos para aplicaciones que manejan grandes vol\u00famenes de datos. Estos reportes no solo son informativos sino que tambi\u00e9n brindan valor a la experiencia del usuario.</p> </li> <li> <p>Unidad 6: Angular y StoryBook \ud83d\udcd8    Conoce StoryBook, la herramienta que te permitir\u00e1 crear, visualizar y documentar componentes de Angular de manera independiente, facilitando el desarrollo y el mantenimiento de proyectos a largo plazo.</p> </li> <li> <p>Unidad 7: Empaquetado e Instalaci\u00f3n de Aplicaciones \ud83d\udce6    Descubre c\u00f3mo empaquetar tus aplicaciones y proceder con la instalaci\u00f3n en diversos dispositivos y plataformas. \u00a1Lleg\u00f3 la hora de que tus aplicaciones conquisten el mundo!</p> </li> <li> <p>Unidad 8: Realizaci\u00f3n de Pruebas \ud83e\uddea    Comprenderemos la importancia de las pruebas de calidad en nuestras aplicaciones. Veremos c\u00f3mo garantizar que todo funcione a la perfecci\u00f3n antes del gran lanzamiento. \u00a1No queremos sorpresas desagradables! </p> </li> </ol>"},{"location":"#a-por-ello","title":"\ud83c\udf08 \u00a1A por ello!","text":"<p>Estoy convencido de que este curso ser\u00e1 una aventura educativa llena de aprendizaje y creatividad. Al finalizar, tendr\u00e1s las habilidades necesarias para dise\u00f1ar y desarrollar interfaces de usuario interactivas y modernas, que no solo sean funcionales, sino que tambi\u00e9n sean una delicia de usar. \ud83c\udfc6</p> <p>\ud83d\udca1 Consejo del d\u00eda: No dudes en preguntar, experimentar y colaborar con tus compa\u00f1eros. \u00a1Estoy aqu\u00ed para apoyarte en cada paso de este emocionante camino!</p>"},{"location":"#vamos-a-construir-el-futuro-una-interfaz-a-la-vez","title":"\ud83d\udd25 \u00a1Vamos a construir el futuro, una interfaz a la vez! \ud83d\udcaa","text":"<p>\u00a1Espero que est\u00e9s tan emocionado como yo por comenzar! \u00a1A crear interfaces espectaculares! \ud83c\udfa8\ud83d\udcbb</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/","title":"\ud83c\udf10 La Accesibilidad en Interfaces de Usuario: Garantizando Inclusi\u00f3n para Todos","text":"<p>La accesibilidad en el dise\u00f1o de interfaces no es solo una buena pr\u00e1ctica, \u00a1es una necesidad! \ud83c\udf1f Asegura que todas las personas, sin importar sus habilidades, puedan navegar y disfrutar de aplicaciones y sitios web de manera efectiva. A continuaci\u00f3n, exploraremos las normativas de accesibilidad, las t\u00e9cnicas clave para mejorarla y las mejores pr\u00e1cticas para un dise\u00f1o inclusivo.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#normativas-de-accesibilidad-wcag","title":"\ud83d\udcdc Normativas de Accesibilidad (WCAG)","text":""},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#1-introduccion-a-las-wcag","title":"1\ufe0f\u20e3 Introducci\u00f3n a las WCAG","text":"<p>Las Pautas de Accesibilidad para el Contenido Web (WCAG), desarrolladas por el World Wide Web Consortium (W3C), son el est\u00e1ndar de oro para la accesibilidad web. Estas directrices ayudan a los desarrolladores a crear contenidos que sean inclusivos para personas con diferentes discapacidades. \ud83c\udf0d</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#2-principios-fundamentales-pour","title":"2\ufe0f\u20e3 Principios Fundamentales: POUR","text":"<p>Las WCAG se estructuran en torno a cuatro principios fundamentales, conocidos como POUR:</p> <ul> <li> <p>\ud83d\udc41\ufe0f Perceptible: El contenido debe ser f\u00e1cil de percibir para todos. Incluye alternativas para contenido no textual (como descripciones de im\u00e1genes o texto alternativo) y dise\u00f1os adaptables a diferentes necesidades.</p> </li> <li> <p>\ud83d\uddb1\ufe0f Operable: Los usuarios deben poder interactuar con la interfaz. Aseg\u00farate de que todos los elementos sean accesibles con el teclado y proporciona suficiente tiempo para completar tareas.</p> </li> <li> <p>\ud83e\udde0 Comprensible: Usa un lenguaje claro y dise\u00f1os consistentes para que el contenido sea f\u00e1cil de entender. La claridad es clave para todos los usuarios.</p> </li> <li> <p>\ud83d\udcbb Robusto: Asegura que el contenido funcione bien con diversas tecnolog\u00edas, como lectores de pantalla, y que cumpla con los est\u00e1ndares web.</p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#3-niveles-de-conformidad-hasta-donde-quieres-llegar","title":"3\ufe0f\u20e3 Niveles de Conformidad: \u00bfHasta d\u00f3nde quieres llegar?","text":"<p>Las WCAG definen tres niveles de conformidad:</p> <ul> <li>Nivel A (B\u00e1sico): Los requisitos m\u00ednimos para que el contenido sea accesible.</li> <li>Nivel AA (Intermedio): Requisitos m\u00e1s avanzados que mejoran la accesibilidad para m\u00e1s usuarios.</li> <li>Nivel AAA (\u00d3ptimo): El nivel m\u00e1s alto de accesibilidad. Es ideal, pero no siempre es pr\u00e1ctico alcanzarlo en todos los contextos.</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#tecnicas-clave-para-mejorar-la-accesibilidad","title":"\ud83d\udd27 T\u00e9cnicas Clave para Mejorar la Accesibilidad","text":""},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#1-texto-alternativo-para-imagenes","title":"\ud83d\udcf7 1. Texto Alternativo para Im\u00e1genes","text":"<p>\u00a1Una imagen vale m\u00e1s que mil palabras, pero no para todos! \ud83d\udcda A\u00f1ade descripciones claras (<code>alt text</code>) para im\u00e1genes importantes. Ejemplo: \"Gr\u00e1fico de barras que muestra las ventas mensuales del producto X\".</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#2-navegacion-por-teclado","title":"\u2328\ufe0f 2. Navegaci\u00f3n por Teclado","text":"<p>Muchos usuarios dependen del teclado para navegar. Aseg\u00farate de que todos los elementos interactivos (botones, formularios, enlaces) sean accesibles mediante el teclado. \u2714\ufe0f Usa <code>tabindex</code> para un flujo de navegaci\u00f3n l\u00f3gico.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#3-contraste-de-color","title":"\ud83c\udfa8 3. Contraste de Color","text":"<p>El contraste adecuado es vital para la legibilidad. Usa herramientas de verificaci\u00f3n para garantizar que los colores sean accesibles para personas con deficiencias visuales. \ud83c\udf08</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#4-etiquetas-y-descripciones-en-formularios","title":"\ud83d\udcdd 4. Etiquetas y Descripciones en Formularios","text":"<p>Facilita el llenado de formularios con etiquetas claras y descriptivas. \u00a1No m\u00e1s campos sin nombre! Utiliza <code>&lt;label&gt;</code> y <code>aria-label</code> para descripciones claras. </p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#5-contenido-multimedia-accesible","title":"\ud83c\udfa5 5. Contenido Multimedia Accesible","text":"<p>Proporciona subt\u00edtulos y transcripciones para videos y audios. \u00a1La accesibilidad multimedia es fundamental! \ud83c\udfa7 Usa formatos como <code>WebVTT</code> para subt\u00edtulos.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#diseno-inclusivo-construyendo-para-todos","title":"\ud83d\udda5\ufe0f Dise\u00f1o Inclusivo: Construyendo para Todos","text":""},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#1-el-poder-del-diseno-inclusivo","title":"\ud83c\udf10 1. El Poder del Dise\u00f1o Inclusivo","text":"<p>El dise\u00f1o inclusivo no es solo una tendencia; es un compromiso de crear experiencias accesibles para todos. \ud83d\udcaa Realiza pruebas de usabilidad con personas con discapacidades para recibir retroalimentaci\u00f3n real y mejorar continuamente.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#2-consideraciones-especificas-para-diversas-discapacidades","title":"\ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f 2. Consideraciones Espec\u00edficas para Diversas Discapacidades","text":"<ul> <li>Visual: Compatibilidad con lectores de pantalla, opciones de aumento de texto.</li> <li>Auditiva: Subt\u00edtulos para contenido multimedia, transcripciones de audio.</li> <li>Motora: Interfaces accesibles con dispositivos de entrada alternativos (teclados adaptativos, seguimiento ocular).</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#3-pruebas-de-accesibilidad-un-paso-esencial","title":"\ud83e\uddea 3. Pruebas de Accesibilidad: Un Paso Esencial","text":"<p>Las pruebas son esenciales para detectar problemas de accesibilidad. Usa herramientas como Axe, WAVE y Lighthouse para evaluar y mejorar continuamente tu sitio o aplicaci\u00f3n. \ud83d\udd0d</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/10accesibilidadeinterfacesdeusuario/#un-compromiso-con-la-inclusion","title":"\ud83e\udd1d Un Compromiso con la Inclusi\u00f3n","text":"<p>Implementar pr\u00e1cticas de accesibilidad no solo cumple con requisitos legales y \u00e9ticos, sino que tambi\u00e9n mejora la experiencia del usuario y ampl\u00eda el alcance de tus productos digitales. \ud83d\udcbc Al dise\u00f1ar con inclusi\u00f3n en mente, estar\u00e1s construyendo un mundo digital m\u00e1s equitativo y accesible para todos. \ud83c\udf0d</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/1introduccionalausabilidad/","title":"\ud83c\udf1f \u00a1Haz que Tus Aplicaciones Brillen con Usabilidad! \ud83d\ude80","text":"<p>Cuando hablamos de usabilidad, no solo hablamos de que algo \"funcione\". \u00a1Hablamos de magia en el dise\u00f1o! \ud83c\udf08 Crear aplicaciones que sean intuitivas, f\u00e1ciles de usar, y que hagan que la experiencia del usuario sea incre\u00edblemente satisfactoria. Al final del d\u00eda, queremos que nuestros usuarios no solo usen nuestras aplicaciones, \u00a1sino que las amen! \u2764\ufe0f</p> <p>\u00bfTe preguntas c\u00f3mo lograr esto? \u00a1Vamos a descubrirlo juntos! \ud83d\udd0d</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/1introduccionalausabilidad/#que-es-la-usabilidad-y-por-que-es-crucial","title":"\ud83d\udca1 \u00bfQu\u00e9 es la Usabilidad y Por Qu\u00e9 es Crucial?","text":"<p>La usabilidad es el alma de una app, p\u00e1gina web o software exitoso. Es lo que asegura que los usuarios puedan alcanzar sus objetivos de manera efectiva, r\u00e1pida y, lo m\u00e1s importante, \u00a1con una sonrisa en el rostro! \ud83d\ude0a </p> <p>Piensa en Google Maps. No es solo popular porque nos lleva a nuestro destino, sino porque lo hace de manera clara, r\u00e1pida, y sin estr\u00e9s. \u00a1Eso es usabilidad en su m\u00e1xima expresi\u00f3n!</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/1introduccionalausabilidad/#los-5-principios-de-usabilidad-que-debes-aplicar-si-o-si","title":"\ud83d\ude80 Los 5 Principios de Usabilidad que Debes Aplicar S\u00ed o S\u00ed","text":"<ul> <li> <p>\ud83e\udde9 Aprendibilidad   La interfaz debe ser tan intuitiva que los usuarios sepan c\u00f3mo usarla desde el primer instante. \u00bfEjemplo? WhatsApp. La primera vez que lo abres, \u00a1ya sabes c\u00f3mo enviar un mensaje!</p> </li> <li> <p>\u26a1 Eficiencia   Una vez que los usuarios dominan la app, las tareas deben ser s\u00faper r\u00e1pidas de realizar. Piensa en Slack o Trello: optimizan el trabajo y la comunicaci\u00f3n como si fueran una extensi\u00f3n de tu equipo.</p> </li> <li> <p>\ud83e\udde0 Memorabilidad   Cuando los usuarios regresan a la app despu\u00e9s de un tiempo, deben recordar f\u00e1cilmente c\u00f3mo usarla. Spotify lo logra con su dise\u00f1o simple pero potente. No importa cu\u00e1nto tiempo pase, \u00a1siempre sabes c\u00f3mo crear esa playlist \u00e9pica!</p> </li> <li> <p>\ud83d\udeab Prevenci\u00f3n de Errores   Las apps deben ayudar a prevenir errores comunes y, si ocurren, ofrecer soluciones claras. Google Drive, por ejemplo, te pregunta antes de borrar archivos importantes. \u00a1Adi\u00f3s a los sustos!</p> </li> <li> <p>\ud83c\udfa8 Satisfacci\u00f3n del Usuario   No se trata solo de ser funcional; tambi\u00e9n debe ser agradable de usar. Apps como Instagram o Apple Music son ejemplos de c\u00f3mo combinar dise\u00f1o atractivo con funcionalidad.</p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/1introduccionalausabilidad/#la-usabilidad-el-motor-secreto-del-exito-de-las-mejores-apps","title":"\ud83c\udf1f La Usabilidad: El Motor Secreto del \u00c9xito de las Mejores Apps","text":"<p>Si piensas que la usabilidad es solo un extra, \u00a1te equivocas! \ud83d\udea8 Es la clave para que una app no solo funcione, sino que sea una estrella del mercado. Una interfaz bien dise\u00f1ada no solo retiene usuarios; los convierte en fan\u00e1ticos apasionados de tu producto. \ud83c\udf89</p> <p>Aqu\u00ed tienes algunas razones clave por las que la usabilidad es fundamental:</p> <ul> <li> <p>\ud83d\ude0a Aumenta la Satisfacci\u00f3n del Usuario   Una app f\u00e1cil y agradable de usar, como Netflix, genera experiencias positivas que hacen que los usuarios regresen una y otra vez.</p> </li> <li> <p>\ud83d\udcda Reduce la Curva de Aprendizaje   Herramientas como Google Docs permiten a los usuarios ser productivos desde el minuto uno. \u00a1Menos tiempo aprendiendo, m\u00e1s tiempo haciendo!</p> </li> <li> <p>\u274c Minimiza Errores   Interfaces como la de Gmail, que ofrece la opci\u00f3n de \"deshacer env\u00edo\", muestran c\u00f3mo prevenir errores puede ser un gran alivio.</p> </li> <li> <p>\u2699\ufe0f Mejora la Productividad   Aplicaciones como Asana o Notion est\u00e1n dise\u00f1adas para facilitar el flujo de trabajo, lo que lleva a una mayor satisfacci\u00f3n y sensaci\u00f3n de logro.</p> </li> <li> <p>\ud83d\ude80 Da Ventaja Competitiva   En un mercado saturado, la usabilidad es lo que hace que Spotify se destaque sobre sus competidores.</p> </li> <li> <p>\u267f Fomenta la Accesibilidad   Apps como Zoom con funciones accesibles para todos permiten que cualquier persona, sin importar sus limitaciones, pueda interactuar sin problemas.</p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/1introduccionalausabilidad/#haz-que-tus-aplicaciones-sean-las-favoritas-de-todos","title":"\u2728 \u00a1Haz que Tus Aplicaciones Sean las Favoritas de Todos! \ud83c\udf20","text":"<p>La usabilidad no es un \"extra\", es esencial. No es suficiente con que una aplicaci\u00f3n simplemente funcione; debe ser f\u00e1cil de usar, intuitiva, y una verdadera delicia de experimentar. A lo largo de este curso, aprenderemos a aplicar estos principios para que nuestras creaciones digitales no solo sean \u00fatiles, sino tambi\u00e9n inolvidables.</p> <p>\u00a1Vamos a dise\u00f1ar aplicaciones que los usuarios no solo quieran usar, sino que adoren usar! \ud83d\ude80\ud83d\udca5</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/2dise%C3%B1ocentradoenelusuario/","title":"\ud83d\ude80 Dise\u00f1o Centrado en el Usuario: \u00a1Dise\u00f1a Pensando en las Personas! \ud83d\udc65","text":"<p>El Dise\u00f1o Centrado en el Usuario (DCU) es la clave para crear productos que no solo se vean geniales, sino que funcionen perfectamente para quienes los utilizan. No es suficiente con que una aplicaci\u00f3n luzca bonita; debe ser intuitiva, eficaz, y, sobre todo, debe resolver las necesidades del usuario de manera sencilla y r\u00e1pida. Aplicaciones como WhatsApp son un ejemplo perfecto: todo est\u00e1 dise\u00f1ado para facilitar la comunicaci\u00f3n r\u00e1pida y f\u00e1cil. \ud83d\udcf1\ud83d\udcac</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/2dise%C3%B1ocentradoenelusuario/#que-es-el-diseno-centrado-en-el-usuario","title":"\ud83d\udd0d \u00bfQu\u00e9 es el Dise\u00f1o Centrado en el Usuario?","text":"<p>El DCU significa poner al usuario en el centro de cada decisi\u00f3n de dise\u00f1o. En lugar de dise\u00f1ar bas\u00e1ndonos en suposiciones, dise\u00f1amos seg\u00fan lo que los usuarios realmente necesitan. \u00a1Es un enfoque que cambia las reglas del juego! \ud83c\udfae</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/2dise%C3%B1ocentradoenelusuario/#principios-del-dcu","title":"\ud83c\udf1f Principios del DCU:","text":"<ul> <li>\ud83d\udc64 Enfoque en el usuario desde el inicio: Todo se centra en entender y satisfacer las necesidades del usuario.</li> <li>\ud83d\udd04 Pruebas continuas: Recolectamos feedback real a lo largo de todo el proceso para garantizar que el producto sea relevante.</li> <li>\u267b\ufe0f Iteraci\u00f3n constante: Mejoramos el dise\u00f1o continuamente en base al feedback y los resultados de pruebas.</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/2dise%C3%B1ocentradoenelusuario/#el-proceso-del-dcu-una-ruta-directa-al-exito","title":"\ud83d\udee4\ufe0f El Proceso del DCU: \u00a1Una Ruta Directa al \u00c9xito! \ud83c\udfc6","text":"<p>El Dise\u00f1o Centrado en el Usuario sigue un proceso c\u00edclico que garantiza la optimizaci\u00f3n en cada fase: investigar, dise\u00f1ar, probar, mejorar y lanzar. Este ciclo se repite hasta que cada detalle est\u00e9 afinado al m\u00e1ximo. \ud83d\udd04</p> <pre><code>graph TD;\n    A[\ud83d\udd0d Investigaci\u00f3n del Usuario] --&gt; B[\ud83d\udcdd Definici\u00f3n de Requisitos]\n    B --&gt; C[\ud83d\udd8c\ufe0f Dise\u00f1o de Prototipos]\n    C --&gt; D[\ud83e\uddea Pruebas de Usabilidad]\n    D --&gt; E[\ud83d\udd04 Iteraci\u00f3n]\n    E --&gt; F[\ud83d\ude80 Desarrollo y Lanzamiento]</code></pre>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/2dise%C3%B1ocentradoenelusuario/#etapas-del-proceso-de-dcu","title":"\ud83d\udea6 Etapas del Proceso de DCU","text":"<ol> <li> <p>\ud83d\udd0d Investigaci\u00f3n del Usuario    El primer paso es entender qui\u00e9nes van a usar nuestro producto. Creamos personas ficticias que representan a los usuarios reales para guiarnos en el dise\u00f1o. \u00a1Con\u00f3celos como a tus mejores amigos! \ud83d\udc6b</p> </li> <li> <p>\ud83d\udcdd Definici\u00f3n de Requisitos    Bas\u00e1ndonos en la investigaci\u00f3n, definimos los requisitos clave que garantizar\u00e1n una experiencia de usuario impecable, como accesibilidad y facilidad de uso. \ud83d\udccb</p> </li> <li> <p>\ud83d\udd8c\ufe0f Dise\u00f1o de Prototipos    Aqu\u00ed es donde comienza la magia visual. Desde simples bocetos (wireframes) hasta simulaciones interactivas, probamos nuestras ideas desde el principio para ver qu\u00e9 funciona mejor. \u2728</p> </li> <li> <p>\ud83e\uddea Pruebas de Usabilidad    Ponemos nuestros prototipos a prueba con usuarios reales. Esta es la fase donde descubrimos qu\u00e9 ajustes necesitamos hacer antes de lanzarlo al mundo. \ud83d\udd0d</p> </li> <li> <p>\ud83d\udd04 Iteraci\u00f3n    Tomamos el feedback y refinamos el dise\u00f1o una y otra vez, hasta que sea perfecto para los usuarios. \u00a1No nos conformamos con menos! \ud83d\udd27</p> </li> <li> <p>\ud83d\ude80 Desarrollo y Lanzamiento    Una vez que todo est\u00e1 validado, es hora de llevar el producto al mercado. \u00a1Pero no termina ah\u00ed! Continuamos recopilando feedback para seguir mejorando. \ud83d\udcc8</p> </li> </ol>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/2dise%C3%B1ocentradoenelusuario/#herramientas-y-tecnicas-para-el-dcu-tus-aliados-para-disenar-mejor","title":"\ud83d\udee0\ufe0f Herramientas y T\u00e9cnicas para el DCU: \u00a1Tus Aliados para Dise\u00f1ar Mejor! \ud83e\uddf0","text":"<p>Para implementar el Dise\u00f1o Centrado en el Usuario, usamos una variedad de herramientas y t\u00e9cnicas que nos ayudan a comprender mejor a nuestros usuarios y mejorar continuamente la experiencia de usuario.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/2dise%C3%B1ocentradoenelusuario/#herramientas-clave-del-dcu","title":"\ud83e\udde9 Herramientas Clave del DCU","text":"<ul> <li> <p>\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Personas   Creaci\u00f3n de perfiles ficticios que reflejan las caracter\u00edsticas y comportamientos de nuestros usuarios. Son la base para entender a qui\u00e9n estamos dise\u00f1ando.  </p> </li> <li> <p>\ud83d\udcad Mapas de Empat\u00eda   Visualizan las emociones, pensamientos y necesidades de los usuarios, ayud\u00e1ndonos a ponernos en su lugar.  </p> </li> <li> <p>\ud83d\udcd0 Wireframes y Prototipos   Los wireframes son bocetos simples del dise\u00f1o; los prototipos permiten probar la interacci\u00f3n real con el sistema, facilitando los ajustes necesarios antes del desarrollo.  </p> </li> <li> <p>\ud83e\uddea Pruebas de Usabilidad   Evaluamos c\u00f3mo interact\u00faan los usuarios con el producto para detectar problemas y optimizar la experiencia. \u00a1Nada mejor que el feedback directo!  </p> </li> <li> <p>\ud83c\udfa4 Entrevistas y Encuestas   Recogemos informaci\u00f3n directa de los usuarios para ajustar el producto seg\u00fan sus necesidades y expectativas. \u00a1Conecta con ellos para crear algo que realmente amen!  </p> </li> <li> <p>\ud83d\uddc2\ufe0f Card Sorting   T\u00e9cnica que muestra c\u00f3mo los usuarios organizan la informaci\u00f3n, lo que es fundamental para dise\u00f1ar una navegaci\u00f3n clara e intuitiva.  </p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/2dise%C3%B1ocentradoenelusuario/#manos-a-la-obra","title":"\ud83d\ude80 \u00a1Manos a la Obra!","text":"<p>El Dise\u00f1o Centrado en el Usuario es mucho m\u00e1s que un proceso; es una filosof\u00eda que asegura que lo que estamos construyendo realmente beneficie a las personas. Utilizando estas herramientas y t\u00e9cnicas, garantizamos que nuestras interfaces no solo sean funcionales, sino que tambi\u00e9n se conviertan en experiencias memorables para los usuarios. \ud83c\udfc5</p> <p>\u00a1Dise\u00f1a pensando en las personas y crea productos que realmente cambien vidas! \ud83c\udf1f</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/3principiosdeusabilidad/","title":"\ud83c\udf1f Usabilidad: El Coraz\u00f3n de una Experiencia de Usuario Excepcional","text":"<p>La usabilidad no es solo un t\u00e9rmino t\u00e9cnico; es el pilar fundamental para crear productos digitales que enamoren a los usuarios. Si queremos ofrecer una excelente experiencia de usuario (UX), es esencial seguir una serie de principios que garantizan que nuestras interfaces no solo sean eficientes y efectivas, sino tambi\u00e9n satisfactorias.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/3principiosdeusabilidad/#los-3-pilares-de-la-usabilidad-eficiencia-efectividad-y-satisfaccion","title":"\ud83d\ude80 Los 3 Pilares de la Usabilidad: Eficiencia, Efectividad y Satisfacci\u00f3n","text":"<p>Estos tres conceptos son el punto de partida para evaluar si un sistema es realmente usable:</p> \ud83c\udf1f Concepto \ud83d\udcdd Descripci\u00f3n \u26a1 Eficiencia \u00bfCu\u00e1nto esfuerzo y tiempo necesita el usuario para completar una tarea? Un dise\u00f1o eficiente minimiza pasos y maximiza la rapidez. \ud83c\udfaf Efectividad \u00bfCu\u00e1n precisos y exitosos son los usuarios al completar sus tareas? Un buen dise\u00f1o reduce los errores al m\u00ednimo. \ud83d\ude0a Satisfacci\u00f3n \u00bfDisfruta el usuario al interactuar con el sistema? La satisfacci\u00f3n genera fidelidad y es clave para mantener a los usuarios comprometidos."},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/3principiosdeusabilidad/#asi-que-recuerda-la-usabilidad-no-solo-se-mide-en-numeros-sino-en-emociones-un-usuario-satisfecho-es-un-usuario-que-vuelve","title":"\u00a1As\u00ed que recuerda! \ud83c\udfaf La usabilidad no solo se mide en n\u00fameros, sino en emociones. \u00a1Un usuario satisfecho es un usuario que vuelve!","text":""},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/3principiosdeusabilidad/#accesibilidad-y-adaptabilidad-disenos-para-todos","title":"\ud83c\udf10 Accesibilidad y Adaptabilidad: Dise\u00f1os Para Todos","text":"<p>Para que un sistema sea verdaderamente usable, no solo tiene que ser r\u00e1pido y eficaz, sino que debe ser inclusivo y capaz de adaptarse a diferentes entornos. Estos son dos aspectos clave que no podemos ignorar:</p> <ul> <li> <p>\ud83d\udd11 Accesibilidad:   Nos aseguramos de que todos los usuarios, incluidas personas con discapacidades visuales, auditivas o motoras, puedan interactuar sin ning\u00fan obst\u00e1culo. Ejemplos de esto incluyen lectores de pantalla, altos contrastes y navegaci\u00f3n por teclado.</p> </li> <li> <p>\ud83d\udcf1 Adaptabilidad:   Dise\u00f1amos interfaces responsivas, lo que significa que nuestras aplicaciones y p\u00e1ginas web se ajustan y optimizan para cualquier dispositivo, desde un smartphone hasta una pantalla grande. \u00a1Una experiencia coherente en todos lados!</p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/3principiosdeusabilidad/#porque-un-diseno-accesible-es-un-diseno-para-todos","title":"Porque un dise\u00f1o accesible es un dise\u00f1o para todos. \ud83c\udf0d","text":""},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/3principiosdeusabilidad/#principios-de-diseno-universal-crear-para-todos-sin-excepciones","title":"\ud83c\udf1f Principios de Dise\u00f1o Universal: Crear para Todos, Sin Excepciones","text":"<p>El Dise\u00f1o Universal garantiza que nuestras interfaces no solo sean f\u00e1ciles de usar, sino que tambi\u00e9n sean inclusivas y justas para todos los usuarios, sin importar sus habilidades o limitaciones. \u00a1Echemos un vistazo a algunos de los principios m\u00e1s importantes!</p> \ud83c\udf0d Principio \ud83d\udcdd Descripci\u00f3n \u2705 Uso Equitativo La interfaz debe ser accesible para todos, sin excepciones, ya sea que tengan o no discapacidades. \ud83d\udd04 Flexibilidad en el Uso Capacidad de adaptarse a diferentes preferencias y habilidades, como usar un rat\u00f3n, un teclado, o comandos de voz. \ud83e\udde0 Uso Simple e Intuitivo Dise\u00f1os claros y directos, f\u00e1ciles de entender sin necesidad de conocimientos previos. \ud83d\udc41\ufe0f Informaci\u00f3n Perceptible Ofrecer la informaci\u00f3n en varios formatos (visual, auditivo, t\u00e1ctil) para que todos puedan acceder a ella. \u274c Tolerancia a Errores Minimizar los riesgos de error y permitir correcciones f\u00e1ciles si algo sale mal. \ud83d\udcaa Bajo Esfuerzo F\u00edsico El usuario no debe tener que hacer un esfuerzo excesivo para interactuar con la interfaz. \ud83d\udccf Tama\u00f1o y Espacio Adecuado Proporcionar espacio suficiente para una interacci\u00f3n c\u00f3moda, sobre todo en dispositivos m\u00f3viles. <p>\u00a1Importante! Aplicar estos principios asegura que nuestras interfaces sean accesibles, f\u00e1ciles de usar y, sobre todo, que brinden una experiencia fluida para todos los usuarios.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/3principiosdeusabilidad/#conclusion-usabilidad-satisfaccion-inclusividad","title":"\ud83d\udd25 Conclusi\u00f3n: Usabilidad = Satisfacci\u00f3n + Inclusividad","text":"<p>Al final del d\u00eda, la usabilidad no se trata solo de que las aplicaciones funcionen, sino de que lo hagan de manera eficiente, satisfactoria y que sean accesibles para todos. Estos principios son tu hoja de ruta para dise\u00f1ar productos que realmente marquen la diferencia.</p> <p>\u00a1Vamos a aplicar estas ideas y crear experiencias que cautiven a todos los usuarios! \ud83d\ude80\ud83c\udf89</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/","title":"\ud83c\udfa8 Patrones de Dise\u00f1o de Interfaces: La Clave para una UX Intuitiva","text":"<p>Los patrones de dise\u00f1o de interfaces son como recetas que te ayudan a resolver problemas comunes en el desarrollo de interfaces de usuario. Gracias a estos patrones, podemos crear experiencias m\u00e1s consistentes y eficientes, adaptando lo que ya sabemos que funciona a nuevos proyectos.</p> <p>A continuaci\u00f3n, te mostrar\u00e9 los principales patrones que usamos para mejorar la usabilidad y c\u00f3mo los aplicamos en diferentes contextos. \u00a1Vamos a darle vida a tus interfaces! \ud83c\udf89</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/#principales-patrones-de-diseno-las-herramientas-que-necesitas","title":"\ud83d\udd11 Principales Patrones de Dise\u00f1o: \u00a1Las Herramientas que Necesitas!","text":"\ud83d\udee0\ufe0f Patr\u00f3n \ud83d\udcdd Descripci\u00f3n \ud83e\udded Barra de Navegaci\u00f3n Proporciona acceso f\u00e1cil a las diferentes secciones de la interfaz (horizontal o vertical) e incluye men\u00fas desplegables para mayor accesibilidad. \ud83c\udf5e Migas de Pan (Breadcrumbs) Muestra una ruta de navegaci\u00f3n, ayudando al usuario a entender d\u00f3nde est\u00e1 dentro de la estructura del sitio o aplicaci\u00f3n. \ud83d\uded2 CTA (Call to Action) Botones que invitan a realizar acciones como \"Comprar ahora\" o \"Suscribirse\". Son cruciales para guiar a los usuarios hacia sus objetivos. \ud83d\uddc2\ufe0f Tarjetas (Cards) Organizan el contenido de forma compacta y visual, ideal para mostrar productos, art\u00edculos o perfiles de manera clara y accesible. \ud83d\udd32 Ventanas Modales Ventanas emergentes que muestran informaci\u00f3n adicional o requieren una acci\u00f3n espec\u00edfica, como confirmar una compra o aceptar t\u00e9rminos. \ud83d\udd04 Scroll Infinito Carga autom\u00e1ticamente m\u00e1s contenido a medida que el usuario se desplaza, perfecto para sitios con mucho contenido, como redes sociales o e-commerce. \ud83d\udcd1 Pesta\u00f1as (Tabs) Organizan el contenido en secciones dentro de la misma p\u00e1gina, permitiendo cambiar de vista sin recargar la interfaz."},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/#aplicacion-de-patrones-en-diferentes-contextos","title":"\ud83d\udda5\ufe0f Aplicaci\u00f3n de Patrones en Diferentes Contextos","text":""},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/#e-commerce","title":"E-commerce \ud83d\udecd\ufe0f","text":"<p>En tiendas online como Amazon, los patrones son fundamentales para una experiencia fluida:</p> <ul> <li>Tarjetas para presentar productos de forma visual y ordenada.  </li> <li>CTA para incitar a la compra con botones como \"A\u00f1adir al carrito\".  </li> <li>Migas de Pan para que el usuario no se pierda navegando entre categor\u00edas.</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/#redes-sociales","title":"Redes Sociales \ud83d\udcf1","text":"<p>En plataformas como Instagram o Twitter, los patrones ayudan a mantener la interacci\u00f3n fluida:</p> <ul> <li>Scroll Infinito para que el contenido nunca termine.  </li> <li>Tarjetas para mostrar publicaciones de manera clara.</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/#gestion-empresarial-erpcrm","title":"Gesti\u00f3n Empresarial (ERP/CRM) \ud83c\udfe2","text":"<p>En herramientas m\u00e1s t\u00e9cnicas como Salesforce o HubSpot, se requieren patrones para gestionar grandes cantidades de datos:</p> <ul> <li>Pesta\u00f1as para organizar las \u00e1reas (Ventas, Inventario, Informes).  </li> <li>Ventanas Modales para confirmar acciones cr\u00edticas.</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/#sistemas-de-informacion-de-salud","title":"Sistemas de Informaci\u00f3n de Salud \ud83c\udfe5","text":"<p>Aqu\u00ed la seguridad y la claridad son esenciales. Los patrones ayudan a organizar la informaci\u00f3n m\u00e9dica y minimizar errores:</p> <ul> <li>Pesta\u00f1as para estructurar informaci\u00f3n del paciente.  </li> <li>Ventanas Modales para confirmar la introducci\u00f3n de datos cr\u00edticos.</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/#aplicaciones-moviles","title":"Aplicaciones M\u00f3viles \ud83d\udcf1","text":"<p>El espacio en pantallas m\u00f3viles es limitado, as\u00ed que debemos optimizar cada pixel:</p> <ul> <li>Tarjetas para organizar contenido de manera compacta y clara.  </li> <li>CTA bien visibles para facilitar la interacci\u00f3n.  </li> <li>Scroll Infinito para mejorar la navegaci\u00f3n sin interrupciones.</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/#visualizacion-de-patrones-vamos-a-verlo-en-accion","title":"\ud83d\udcca Visualizaci\u00f3n de Patrones: \u00a1Vamos a Verlo en Acci\u00f3n!","text":"<p>Patrones en acci\u00f3n:</p> <ol> <li>Barra de Navegaci\u00f3n:    La barra superior de Amazon ofrece acceso a m\u00faltiples secciones.  </li> <li>Breadcrumbs (Migas de Pan):    En este ejemplo, se muestra la ruta desde \"Inicio\" hasta la categor\u00eda actual del producto.  </li> <li>CTA (Call to Action):    El bot\u00f3n \"A\u00f1adir al carrito\" es un claro ejemplo de un CTA orientado a la compra.  </li> <li>Tarjetas:    Los productos est\u00e1n organizados en tarjetas individuales que muestran informaci\u00f3n clave de un vistazo.</li> </ol>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/#eleccion-del-patron-adecuado-el-arte-de-decidir","title":"\ud83c\udfaf Elecci\u00f3n del Patr\u00f3n Adecuado: El Arte de Decidir","text":"<p>\u00a1Seleccionar el patr\u00f3n correcto puede transformar la experiencia de tu usuario! \ud83c\udfaf</p> \ud83d\udd0d Objetivo \ud83d\udee0\ufe0f Patr\u00f3n Recomendado \ud83d\uded2 Facilitar la Compra CTA y Barra de Navegaci\u00f3n para guiar al usuario hacia la compra. \ud83d\udcca Gestionar Datos Complejos Pesta\u00f1as y Ventanas Modales para organizar y controlar la informaci\u00f3n. \ud83d\udcf1 Optimizar Aplicaciones M\u00f3viles Tarjetas y Scroll Infinito para aprovechar al m\u00e1ximo el espacio reducido."},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/4patronesdedise%C3%B1odeinterfaces/#conclusion-los-patrones-son-tus-mejores-aliados","title":"\ud83d\udca1 Conclusi\u00f3n: Los Patrones son Tus Mejores Aliados","text":"<p>Al usar patrones de dise\u00f1o en tus interfaces, no solo mejoras la usabilidad, sino que tambi\u00e9n creas experiencias que son eficientes y agradables para los usuarios. La clave est\u00e1 en elegir el patr\u00f3n correcto seg\u00fan el contexto y los objetivos de tu proyecto.</p> <p>\u00a1Dale vida a tus interfaces con estos patrones y lleva la experiencia de usuario al siguiente nivel!</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/5evaluacionheuristica/","title":"\ud83d\udd0d Evaluaci\u00f3n Heur\u00edstica: Detecta Problemas de Usabilidad Como un Experto","text":"<p>La Evaluaci\u00f3n Heur\u00edstica es una de las t\u00e9cnicas m\u00e1s efectivas para identificar problemas de usabilidad en interfaces de usuario. Este m\u00e9todo se basa en una serie de principios generales o \"heur\u00edsticas\" que permiten a los evaluadores encontrar y resolver problemas que podr\u00edan afectar la experiencia del usuario. A continuaci\u00f3n, te explicar\u00e9 el m\u00e9todo, los criterios de Jakob Nielsen y algunos ejemplos pr\u00e1cticos de su aplicaci\u00f3n. </p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/5evaluacionheuristica/#como-funciona-el-metodo-de-evaluacion-heuristica","title":"\ud83d\udee0\ufe0f \u00bfC\u00f3mo Funciona el M\u00e9todo de Evaluaci\u00f3n Heur\u00edstica?","text":"<p>El m\u00e9todo de evaluaci\u00f3n heur\u00edstica es directo y muy eficiente. Un grupo peque\u00f1o de evaluadores (generalmente entre 3 y 5) revisa la interfaz de usuario utilizando principios de usabilidad predefinidos. \u00bfLo mejor de todo? Este proceso es r\u00e1pido y rentable, ya que no necesita la participaci\u00f3n de usuarios reales. </p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/5evaluacionheuristica/#pasos-para-una-evaluacion-heuristica-efectiva","title":"\ud83d\udccb Pasos para una Evaluaci\u00f3n Heur\u00edstica Efectiva","text":"\ud83d\udd0d Paso \ud83d\udcdd Descripci\u00f3n \ud83e\udde0 Definir las heur\u00edsticas Seleccionamos los principios que guiar\u00e1n la evaluaci\u00f3n (usualmente las heur\u00edsticas de Jakob Nielsen). \ud83d\udc40 Revisi\u00f3n de la interfaz Cada evaluador inspecciona la interfaz de manera independiente para detectar problemas de usabilidad. \ud83d\udcca An\u00e1lisis de resultados Los problemas encontrados se agrupan y priorizan seg\u00fan su gravedad e impacto en la experiencia del usuario. \ud83d\ude80 Propuestas de mejora Se generan recomendaciones espec\u00edficas para mejorar la usabilidad del sistema y resolver los problemas detectados."},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/5evaluacionheuristica/#los-10-principios-heuristicos-de-jakob-nielsen-los-fundamentos-de-la-usabilidad","title":"\ud83e\udde9 Los 10 Principios Heur\u00edsticos de Jakob Nielsen: \u00a1Los Fundamentos de la Usabilidad!","text":"<p>Jakob Nielsen, uno de los gur\u00fas de la usabilidad, desarroll\u00f3 un conjunto de 10 principios heur\u00edsticos que son ampliamente utilizados en la industria. Vamos a desglosarlos con ejemplos pr\u00e1cticos para que los puedas aplicar en tus proyectos. \ud83d\udc47</p> \ud83e\udde0 Principio \ud83d\udcdd Descripci\u00f3n \ud83d\udccc Ejemplo \ud83d\udfe2 Visibilidad del estado del sistema La interfaz debe mantener a los usuarios informados sobre lo que est\u00e1 ocurriendo mediante retroalimentaci\u00f3n adecuada. Mostrar una barra de progreso durante la carga. \ud83c\udf0e Relaci\u00f3n entre el sistema y el mundo real Utiliza un lenguaje claro y familiar, y sigue convenciones del mundo real. Usar un icono de sobre para representar el correo. \ud83d\udd04 Control y libertad del usuario Permitir que los usuarios deshagan o rehagan acciones f\u00e1cilmente. Botones de \"Deshacer\" y \"Rehacer\" en un editor de texto. \ud83e\udde9 Consistencia y est\u00e1ndares Mant\u00e9n un dise\u00f1o consistente y aseg\u00farate de que los elementos tengan el mismo significado en diferentes contextos. Mismo estilo de botones en toda la aplicaci\u00f3n. \ud83d\udeab Prevenci\u00f3n de errores Dise\u00f1a de manera que se eviten errores, no solo que se manejen. Deshabilitar el bot\u00f3n de enviar hasta que se completen todos los campos. \ud83d\udc41\ufe0f Reconocimiento antes que recuerdo Minimiza la carga de memoria del usuario haciendo visibles las opciones y acciones posibles. Mostrar opciones recientes o predicciones de texto. \ud83d\ude80 Flexibilidad y eficiencia de uso Ofrece atajos para los usuarios avanzados sin complicar la experiencia para los principiantes. Atajos de teclado en una aplicaci\u00f3n de escritorio. \ud83c\udfa8 Dise\u00f1o est\u00e9tico y minimalista Evita la informaci\u00f3n irrelevante o que distraiga al usuario. Eliminar elementos visuales innecesarios en una p\u00e1gina. \ud83d\udee0\ufe0f Ayuda a reconocer, diagnosticar y recuperarse de errores Los mensajes de error deben ser claros y proporcionar soluciones. Mensaje de error espec\u00edfico: \"El formato del correo es incorrecto.\" \ud83d\udcda Ayuda y documentaci\u00f3n Proporciona ayuda accesible y comprensible, aunque la interfaz deber\u00eda ser f\u00e1cil de usar por s\u00ed misma. Un bot\u00f3n de ayuda visible en cada secci\u00f3n."},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/5evaluacionheuristica/#ejemplos-practicos-de-evaluacion-heuristica","title":"\ud83d\udd0d Ejemplos Pr\u00e1cticos de Evaluaci\u00f3n Heur\u00edstica","text":""},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/5evaluacionheuristica/#caso-1-evaluacion-de-una-tienda-online","title":"\ud83d\udce6 Caso 1: Evaluaci\u00f3n de una Tienda Online \ud83d\uded2","text":"<p>Al aplicar las heur\u00edsticas de Nielsen en una tienda online, encontramos:</p> <ul> <li>\u274c Inconsistencias en los botones: El bot\u00f3n de \"A\u00f1adir al carrito\" cambia de tama\u00f1o y ubicaci\u00f3n en diferentes p\u00e1ginas. (Violaci\u00f3n de \"Consistencia y est\u00e1ndares\").</li> <li>\ud83d\udea8 Falta de retroalimentaci\u00f3n: No hay una confirmaci\u00f3n clara despu\u00e9s de a\u00f1adir un producto al carrito. (Violaci\u00f3n de \"Visibilidad del estado del sistema\").</li> <li>\u26a0\ufe0f Errores dif\u00edciles de entender: Mensajes vagos como \"Error en el proceso de pago\" en lugar de ser espec\u00edficos. (Violaci\u00f3n de \"Ayuda a reconocer, diagnosticar y recuperarse de errores\").</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/5evaluacionheuristica/#propuestas-de-mejora","title":"\ud83d\udee0\ufe0f Propuestas de Mejora:","text":"<ol> <li>Asegurar consistencia en el dise\u00f1o de botones.</li> <li>A\u00f1adir una notificaci\u00f3n clara tras a\u00f1adir productos al carrito.</li> <li>Mejorar los mensajes de error para que sean m\u00e1s descriptivos.</li> </ol>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/5evaluacionheuristica/#caso-2-evaluacion-de-una-aplicacion-movil-de-redes-sociales","title":"\ud83d\udcf1 Caso 2: Evaluaci\u00f3n de una Aplicaci\u00f3n M\u00f3vil de Redes Sociales","text":"<p>En la evaluaci\u00f3n de una app m\u00f3vil encontramos:</p> <ul> <li>\ud83c\udf00 Carga confusa de contenido: No hay indicaci\u00f3n clara cuando se carga m\u00e1s contenido. (Violaci\u00f3n de \"Visibilidad del estado del sistema\").</li> <li>\ud83d\udd19 Falta de control para deshacer acciones: No hay opci\u00f3n para deshacer publicaciones hechas por error. (Violaci\u00f3n de \"Control y libertad del usuario\").</li> <li>\ud83d\uddc2\ufe0f Contenido excesivo en pantallas peque\u00f1as: Demasiada informaci\u00f3n en cada vista, abrumando al usuario. (Violaci\u00f3n de \"Dise\u00f1o est\u00e9tico y minimalista\").</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/5evaluacionheuristica/#propuestas-de-mejora_1","title":"\ud83d\udee0\ufe0f Propuestas de Mejora:","text":"<ol> <li>A\u00f1adir un icono de carga visible cuando se est\u00e1 cargando contenido nuevo.</li> <li>Implementar una opci\u00f3n para deshacer publicaciones.</li> <li>Simplificar el dise\u00f1o visual para mejorar la adaptaci\u00f3n a pantallas peque\u00f1as.</li> </ol>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/5evaluacionheuristica/#por-que-usar-la-evaluacion-heuristica","title":"\ud83c\udfaf \u00bfPor Qu\u00e9 Usar la Evaluaci\u00f3n Heur\u00edstica?","text":"<p>Aplicar los principios de Jakob Nielsen es una manera r\u00e1pida y eficaz de identificar problemas de usabilidad antes de que los usuarios finales se encuentren con ellos. Aunque no sustituye las pruebas con usuarios reales, es una herramienta poderosa en las fases iniciales del desarrollo y en las revisiones iterativas.</p> <p>\ud83d\udc49 Recuerda: \u00a1Mejorar la usabilidad significa crear experiencias de usuario que sean intuitivas, fluidas y agradables! \ud83c\udf1f</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/6interfacesmultidispositivo/","title":"\ud83c\udf10 Dise\u00f1o Multidispositivo: Creando Experiencias Consistentes en Todas las Pantallas","text":"<p>En el desarrollo moderno de interfaces, garantizar que las aplicaciones y sitios web funcionen perfectamente en m\u00f3viles, tabletas y escritorios es fundamental. Al ofrecer una experiencia consistente y satisfactoria, sin importar el dispositivo que utilicen los usuarios, conseguimos que se sientan c\u00f3modos y conectados con nuestra plataforma. </p> <p>En esta secci\u00f3n, exploraremos c\u00f3mo adaptar interfaces para diferentes dispositivos, los enfoques de dise\u00f1o responsivo y adaptativo, y las mejores pr\u00e1cticas para crear experiencias multidispositivo efectivas. \u00a1Vamos a sumergirnos en ello! \ud83c\udf1f</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/6interfacesmultidispositivo/#adaptacion-de-interfaces-para-moviles-tabletas-y-escritorios","title":"\ud83d\udcf1\ud83d\udda5\ufe0f Adaptaci\u00f3n de Interfaces para M\u00f3viles, Tabletas y Escritorios","text":"<p>La adaptaci\u00f3n de interfaces consiste en ajustar el dise\u00f1o y la funcionalidad seg\u00fan las caracter\u00edsticas de cada tipo de dispositivo. Cada uno tiene sus propias limitaciones y posibilidades, por lo que la optimizaci\u00f3n debe estar centrada en ofrecer la mejor experiencia de usuario (UX).</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/6interfacesmultidispositivo/#diferencias-clave-por-dispositivo","title":"\ud83d\udd0d Diferencias Clave por Dispositivo","text":"<ul> <li> <p>\ud83d\udcf1 M\u00f3viles:   Las interfaces deben ser t\u00e1ctiles y f\u00e1ciles de navegar con una sola mano. Los elementos deben ser lo suficientemente grandes para tocar con precisi\u00f3n y estar dispuestos de manera que aprovechen al m\u00e1ximo el espacio limitado en la pantalla. </p> </li> <li> <p>\ud83d\udcf2 Tabletas:   Las tabletas, con sus pantallas m\u00e1s grandes, permiten una disposici\u00f3n de elementos m\u00e1s compleja. Es importante considerar tanto la interacci\u00f3n t\u00e1ctil como el uso en modo horizontal y vertical, ofreciendo flexibilidad y adaptabilidad. </p> </li> <li> <p>\ud83d\udda5\ufe0f Escritorios:   Con m\u00e1s espacio en pantalla, las interfaces de escritorio pueden incluir m\u00e1s detalles y elementos adicionales como men\u00fas desplegables, barras laterales y paneles de control. Aqu\u00ed, la navegaci\u00f3n con rat\u00f3n y teclado debe ser intuitiva y eficiente. </p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/6interfacesmultidispositivo/#diseno-responsivo-vs-adaptativo-cual-es-la-diferencia","title":"\ud83c\udf08 Dise\u00f1o Responsivo vs. Adaptativo: \u00bfCu\u00e1l Es la Diferencia?","text":"<p>Para crear interfaces que funcionen en m\u00faltiples dispositivos, existen dos enfoques clave: dise\u00f1o responsivo y dise\u00f1o adaptativo. Aunque ambos buscan mejorar la experiencia de usuario, tienen diferencias importantes que pueden influir en su implementaci\u00f3n.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/6interfacesmultidispositivo/#diseno-responsivo","title":"\ud83c\udf10 Dise\u00f1o Responsivo","text":"<p>El dise\u00f1o responsivo es como el camale\u00f3n del dise\u00f1o web: se adapta de manera fluida a diferentes tama\u00f1os de pantalla utilizando grillas fluidas y consultas de medios en CSS.</p> <ul> <li>Grillas Fluidas: Los elementos utilizan porcentajes en lugar de tama\u00f1os fijos, lo que permite que se redimensionen seg\u00fan el tama\u00f1o de la pantalla.</li> <li>Consultas de Medios (Media Queries): Permiten aplicar estilos espec\u00edficos seg\u00fan las caracter\u00edsticas del dispositivo, como el ancho de pantalla o la orientaci\u00f3n. </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/6interfacesmultidispositivo/#diseno-adaptativo","title":"\ud83d\udda5\ufe0f Dise\u00f1o Adaptativo","text":"<p>El dise\u00f1o adaptativo es m\u00e1s como un traje hecho a medida: utiliza dise\u00f1os fijos para diferentes tama\u00f1os de pantalla y ajusta la interfaz seg\u00fan el dispositivo detectado.</p> <ul> <li>Puntos de Ruptura: Definen diferentes tama\u00f1os de pantalla para cargar distintos layouts seg\u00fan el dispositivo. </li> <li>Dise\u00f1os Predise\u00f1ados: Se crean versiones espec\u00edficas del dise\u00f1o para cada tipo de dispositivo, proporcionando una experiencia m\u00e1s personalizada. </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/6interfacesmultidispositivo/#cual-elegir","title":"\ud83e\udd14 \u00bfCu\u00e1l Elegir?","text":"<p>\u00a1No tienes que elegir solo uno! Puedes combinar ambos enfoques para crear una experiencia verdaderamente multidispositivo, aprovechando lo mejor de cada m\u00e9todo.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/6interfacesmultidispositivo/#buenas-practicas-en-diseno-multidispositivo","title":"\ud83d\udccb Buenas Pr\u00e1cticas en Dise\u00f1o Multidispositivo","text":"<p>Crear interfaces atractivas y funcionales en todas las plataformas requiere seguir algunas mejores pr\u00e1cticas. Aqu\u00ed tienes algunas recomendaciones clave para lograr un dise\u00f1o multidispositivo efectivo:</p> <ul> <li> <p>\ud83d\udcf1 Dise\u00f1o Mobile-First: Empieza dise\u00f1ando para dispositivos m\u00f3viles y luego expande a pantallas m\u00e1s grandes. Este enfoque asegura que las funciones esenciales sean accesibles en dispositivos con menos capacidad.  </p> </li> <li> <p>\ud83c\udfaf Priorizaci\u00f3n del Contenido: Organiza el contenido de manera que la informaci\u00f3n m\u00e1s importante sea visible y accesible en todas las resoluciones. El contenido debe fluir de forma l\u00f3gica y estar jerarquizado.  </p> </li> <li> <p>\ud83d\udd0d Pruebas en M\u00faltiples Dispositivos: Realiza pruebas exhaustivas en diferentes dispositivos y navegadores para identificar y corregir problemas espec\u00edficos de cada plataforma.  </p> </li> <li> <p>\u26a1 Optimizaci\u00f3n de Im\u00e1genes y Medios: Utiliza im\u00e1genes de alta calidad pero optimizadas para no afectar el rendimiento en dispositivos m\u00f3viles. Implementa t\u00e9cnicas como carga diferida (lazy loading) para mejorar los tiempos de carga.  </p> </li> <li> <p>\ud83d\uddb2\ufe0f Interactividad y Accesibilidad: Aseg\u00farate de que todos los elementos interactivos sean accesibles y funcionen correctamente en dispositivos t\u00e1ctiles y de escritorio. Implementa controles de accesibilidad como lectores de pantalla y navegaci\u00f3n por teclado.  </p> </li> <li> <p>\ud83c\udf1f Consistencia en la Experiencia de Usuario: Mant\u00e9n una apariencia y comportamiento coherente en diferentes dispositivos para que los usuarios tengan una experiencia uniforme sin importar el medio.  </p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/6interfacesmultidispositivo/#conclusion-el-poder-del-diseno-multidispositivo","title":"\ud83d\ude80 Conclusi\u00f3n: El Poder del Dise\u00f1o Multidispositivo","text":"<p>En un mundo donde los usuarios acceden a aplicaciones y sitios web desde una variedad de dispositivos, el dise\u00f1o multidispositivo no es opcional; es esencial. Al implementar t\u00e9cnicas de dise\u00f1o responsivo y adaptativo, junto con seguir buenas pr\u00e1cticas, puedes ofrecer experiencias de usuario excepcionales en todas las plataformas.</p> <p>\u00a1Recuerda! Adaptar y optimizar el dise\u00f1o para diferentes dispositivos no solo mejora la accesibilidad y la satisfacci\u00f3n del usuario, sino que tambi\u00e9n asegura el \u00e9xito de tu aplicaci\u00f3n en un entorno diverso y en constante evoluci\u00f3n. \ud83c\udf10\ud83d\udcaa</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/","title":"\u2728 Elementos de Interacci\u00f3n: La Clave para una Experiencia de Usuario Din\u00e1mica","text":"<p>Los elementos de interacci\u00f3n son los componentes que permiten a los usuarios comunicarse con la interfaz y realizar acciones espec\u00edficas. Son el puente entre el usuario y el sistema. Aqu\u00ed exploraremos los principales elementos de interacci\u00f3n, como botones, men\u00fas, formularios, y otros componentes interactivos, junto con los est\u00e1ndares de interacci\u00f3n que garantizan una experiencia de usuario coherente y efectiva. \u00a1Vamos a sumergirnos en el mundo de los elementos de interacci\u00f3n! \ud83c\udf10</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#botones-acciones-al-alcance-de-un-clic","title":"\ud83d\udd18 Botones: Acciones al Alcance de un Clic","text":"<p>Los botones son los protagonistas del dise\u00f1o de interacci\u00f3n. Permiten a los usuarios realizar acciones clave, desde enviar un formulario hasta abrir un men\u00fa.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#diseno-de-botones","title":"\ud83c\udfa8 Dise\u00f1o de Botones","text":"<ul> <li> <p>\ud83d\udccf Tama\u00f1o y Espaciado: Los botones deben ser lo suficientemente grandes para que los usuarios puedan hacer clic f\u00e1cilmente, con un espaciado adecuado para evitar clics accidentales.  </p> </li> <li> <p>\ud83c\udf08 Contraste y Legibilidad: Utiliza colores que resalten y tipograf\u00edas claras para asegurar que los botones sean visibles y legibles.  </p> </li> <li> <p>\ud83c\udfaf Estados del Bot\u00f3n: A\u00f1ade estados visuales para cuando el bot\u00f3n est\u00e1 en reposo, al pasar el rat\u00f3n (hover) y al hacer clic, proporcionando una retroalimentaci\u00f3n visual inmediata al usuario.  </p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#accesibilidad","title":"\ud83c\udf0d Accesibilidad","text":"<ul> <li> <p>\ud83d\udcdd Texto Alternativo: Los botones deben tener un texto claro y descriptivo. Utiliza etiquetas y atributos ARIA para mejorar la accesibilidad para los usuarios de lectores de pantalla.  </p> </li> <li> <p>\u2328\ufe0f Accesibilidad del Teclado: Los botones deben ser accesibles mediante el teclado, permitiendo navegaci\u00f3n por tabulaci\u00f3n y atajos de teclado.</p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#menus-navegacion-simplificada-para-el-usuario","title":"\ud83d\udccb Men\u00fas: Navegaci\u00f3n Simplificada para el Usuario","text":"<p>Los men\u00fas son esenciales para organizar opciones y acciones de manera que los usuarios puedan navegar f\u00e1cilmente por la interfaz.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#tipos-de-menus","title":"\ud83c\udf54 Tipos de Men\u00fas","text":"<ul> <li> <p>\ud83d\udcc2 Men\u00fas Desplegables: Expanden para mostrar opciones adicionales al hacer clic o pasar el rat\u00f3n, permitiendo una navegaci\u00f3n compacta.  </p> </li> <li> <p>\u27a1\ufe0f Men\u00fas Laterales: Se colocan en un panel lateral y permiten una navegaci\u00f3n continua sin interrumpir el contenido principal.  </p> </li> <li> <p>\ud83d\udcdc Men\u00fas de Navegaci\u00f3n: Ubicados en la parte superior o lateral, son el coraz\u00f3n de la navegaci\u00f3n principal de un sitio o aplicaci\u00f3n.</p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#diseno-y-usabilidad","title":"\ud83e\udde9 Dise\u00f1o y Usabilidad","text":"<ul> <li>\ud83d\uddc2\ufe0f Estructura Jer\u00e1rquica: Organiza los elementos de men\u00fa de manera l\u00f3gica y jer\u00e1rquica para una navegaci\u00f3n f\u00e1cil.  </li> <li>\u26a1 Interacci\u00f3n del Usuario: Los men\u00fas deben responder r\u00e1pidamente a las acciones del usuario, ofreciendo una experiencia fluida.  </li> <li>\ud83d\udd0d Visibilidad y Accesibilidad: Asegura que los men\u00fas sean visibles y f\u00e1cilmente accesibles en todas las resoluciones y dispositivos.  </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#formularios-recopilando-informacion-con-estilo","title":"\ud83d\udcdd Formularios: Recopilando Informaci\u00f3n con Estilo","text":"<p>Los formularios son cruciales para que los usuarios puedan ingresar y enviar informaci\u00f3n en aplicaciones y sitios web.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#elementos-de-un-formulario","title":"\ud83d\udee0\ufe0f Elementos de un Formulario","text":"<ul> <li>\ud83d\udd8a\ufe0f Campos de Texto: Para entradas como nombres, correos electr\u00f3nicos y direcciones.  </li> <li>\ud83d\ude80 Botones de Env\u00edo: Facilitan el env\u00edo del formulario y la procesaci\u00f3n de la informaci\u00f3n.  </li> <li>\u2705 Casillas de Verificaci\u00f3n y Radio Buttons: Permiten seleccionar m\u00faltiples opciones o una \u00fanica opci\u00f3n dentro de un grupo.  </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#buenas-practicas-en-formularios","title":"\ud83c\udf1f Buenas Pr\u00e1cticas en Formularios","text":"<ul> <li>\u2714\ufe0f Validaci\u00f3n de Datos: Implementa validaciones para asegurar que los datos ingresados sean correctos. Proporciona mensajes de error claros y \u00fatiles.  </li> <li>\ud83e\uddfc Dise\u00f1o y Usabilidad: Un dise\u00f1o limpio y organizado hace que los formularios sean f\u00e1ciles de completar. Agrupa campos relacionados y ofrece instrucciones claras.  </li> <li>\u267f Accesibilidad: Aseg\u00farate de que los formularios sean accesibles para todos los usuarios, usando etiquetas y descripciones para los lectores de pantalla.  </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#componentes-interactivos-funcionalidades-avanzadas-para-una-experiencia-enriquecida","title":"\ud83c\udf9b\ufe0f Componentes Interactivos: Funcionalidades Avanzadas para una Experiencia Enriquecida","text":"<p>Los componentes interactivos son elementos adicionales que mejoran la experiencia del usuario al proporcionar funcionalidades din\u00e1micas.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#tipos-de-componentes","title":"\u2699\ufe0f Tipos de Componentes","text":"<ul> <li>\ud83c\udf9a\ufe0f Deslizadores (Sliders): Permiten a los usuarios seleccionar un valor dentro de un rango moviendo un control deslizante.  </li> <li>\ud83d\udcc2 Acordeones: Ayudan a organizar la informaci\u00f3n mostrando y ocultando contenido en secciones colapsables.  </li> <li>\ud83d\udd14 Modales y Di\u00e1logos: Utilizados para mostrar informaci\u00f3n adicional o realizar acciones sin abandonar la p\u00e1gina actual.  </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#implementacion","title":"\ud83d\ude80 Implementaci\u00f3n","text":"<ul> <li>\ud83e\udd16 Consistencia: Asegura que todos los componentes interactivos sigan un dise\u00f1o y comportamiento coherente en toda la interfaz.  </li> <li>\ud83d\udd04 Feedback del Usuario: Proporciona retroalimentaci\u00f3n clara mediante animaciones o mensajes de confirmaci\u00f3n sobre las acciones realizadas.  </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#estandares-de-interaccion-haciendo-que-todo-funcione-de-forma-intuitiva","title":"\ud83d\udccf Est\u00e1ndares de Interacci\u00f3n: Haciendo que Todo Funcione de Forma Intuitiva","text":"<p>Adherirse a los est\u00e1ndares de interacci\u00f3n garantiza que las interfaces sean intuitivas, coherentes y f\u00e1ciles de usar. \u00a1Veamos los aspectos clave!</p> <ul> <li>\ud83d\udd04 Consistencia en el Dise\u00f1o: Mant\u00e9n una consistencia visual y funcional en todos los elementos de interacci\u00f3n. Los usuarios deben poder predecir c\u00f3mo interactuar con la interfaz.  </li> <li>\ud83d\udce2 Retroalimentaci\u00f3n del Usuario: Implementa mecanismos de retroalimentaci\u00f3n, como mensajes de \u00e9xito o error, para informar a los usuarios sobre el estado de sus acciones.  </li> <li>\u267f Normas de Accesibilidad: Cumple con los est\u00e1ndares de accesibilidad para asegurar que todos los usuarios puedan utilizar la interfaz eficazmente, independientemente de sus capacidades.</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/7elementosdeinteraccioneninterfaces/#conclusion","title":"\ud83c\udf1f Conclusi\u00f3n","text":"<p>Los elementos de interacci\u00f3n son los componentes esenciales que conectan a los usuarios con tu sistema. Dise\u00f1arlos correctamente garantiza una experiencia de usuario efectiva, accesible y agradable. \u00a1Recuerda seguir los est\u00e1ndares de interacci\u00f3n para crear interfaces que sean intuitivas y coherentes en todas las plataformas! \ud83d\ude80</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/8flujosdeusuario/","title":"\ud83c\udf1f Flujos de Usuario: El Camino hacia una Experiencia de Usuario Excepcional","text":"<p>Los flujos de usuario son fundamentales en el dise\u00f1o de interfaces. Imag\u00ednalos como un mapa de carreteras que gu\u00eda a los usuarios paso a paso para completar una tarea o alcanzar un objetivo dentro de una aplicaci\u00f3n o sitio web. Conocer c\u00f3mo se construyen y optimizan los flujos de usuario es esencial para crear experiencias de usuario intuitivas y eficientes. \ud83c\udf10</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/8flujosdeusuario/#que-son-los-flujos-de-usuario-y-como-se-construyen","title":"\ud83d\udeb6\u200d\u2642\ufe0f \u00bfQu\u00e9 Son los Flujos de Usuario y C\u00f3mo se Construyen?","text":"<p>Un flujo de usuario es una representaci\u00f3n visual (\u00a1o textual!) de los pasos que un usuario sigue para completar una tarea espec\u00edfica dentro de un sistema. Piensa en \u00e9l como una hoja de ruta que gu\u00eda a tus usuarios desde el punto A hasta el punto B, asegurando que el viaje sea suave y sin complicaciones.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/8flujosdeusuario/#construccion-de-flujos-de-usuario-paso-a-paso","title":"\ud83e\udde9 Construcci\u00f3n de Flujos de Usuario: Paso a Paso","text":"<ol> <li> <p>\ud83c\udfaf Definici\u00f3n de Flujos de Usuario:</p> <ul> <li>Objetivo: \u00bfCu\u00e1l es la meta principal que el usuario quiere alcanzar? (Por ejemplo, comprar un producto, registrarse o enviar un formulario).  </li> <li>Pasos del Flujo: Desglosa el proceso en pasos individuales que el usuario debe seguir. Cada paso representa una acci\u00f3n (como \"hacer clic en 'Comprar'\") o una decisi\u00f3n (\"\u00bfQu\u00e9 m\u00e9todo de pago elegir?\").  </li> <li>Puntos de Decisi\u00f3n: Incluye puntos clave donde el usuario debe tomar decisiones. Estas decisiones afectan el camino que toma el flujo, como seleccionar opciones o responder preguntas.  </li> </ul> </li> <li> <p>\u270f\ufe0f Construcci\u00f3n de Flujos de Usuario:</p> <ul> <li>Recopilaci\u00f3n de Informaci\u00f3n: Conoce a tu usuario. Utiliza investigaci\u00f3n de usuarios, entrevistas y an\u00e1lisis de tareas para entender sus necesidades.  </li> <li>Dise\u00f1o del Flujo: Crea un diagrama visual que represente los pasos y decisiones del usuario. Herramientas como diagramas de flujo, wireframes o mapas de navegaci\u00f3n son perfectas para esto.  </li> <li>Iteraci\u00f3n y Pruebas: No te quedes con la primera versi\u00f3n. Prueba, ajusta y repite hasta que el flujo sea intuitivo y eficiente.  </li> </ul> </li> </ol>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/8flujosdeusuario/#mapas-de-navegacion-la-guia-para-un-viaje-de-usuario-fluido","title":"\ud83d\uddfa\ufe0f Mapas de Navegaci\u00f3n: La Gu\u00eda para un Viaje de Usuario Fluido","text":"<p>Los mapas de navegaci\u00f3n son como un GPS que muestra c\u00f3mo las diferentes pantallas o p\u00e1ginas de una aplicaci\u00f3n o sitio web est\u00e1n interconectadas. Son esenciales para entender la estructura y el flujo de navegaci\u00f3n, ayudando a crear una experiencia de usuario coherente y fluida.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/8flujosdeusuario/#que-son-los-mapas-de-navegacion-y-como-mejoran-la-ux","title":"\ud83d\uddfa\ufe0f \u00bfQu\u00e9 Son los Mapas de Navegaci\u00f3n y C\u00f3mo Mejoran la UX?","text":"<ul> <li> <p>\ud83d\udcda Definici\u00f3n: Un mapa de navegaci\u00f3n es un diagrama visual que muestra c\u00f3mo las diferentes partes de un sistema est\u00e1n conectadas. Incluye enlaces, rutas y c\u00f3mo los usuarios se mueven de una secci\u00f3n a otra.  </p> </li> <li> <p>\ud83d\udd28 Construcci\u00f3n del Mapa de Navegaci\u00f3n:</p> <ul> <li>Estructura de Contenido: Organiza y visualiza c\u00f3mo se distribuye el contenido dentro del sitio o aplicaci\u00f3n.  </li> <li>L\u00f3gica de Navegaci\u00f3n: Representa c\u00f3mo se conectan las diferentes secciones y c\u00f3mo los usuarios pueden moverse de una a otra.  </li> <li>Visualizaci\u00f3n: Usa herramientas de dise\u00f1o o diagramas para crear una imagen clara de la navegaci\u00f3n del sistema.  </li> </ul> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/8flujosdeusuario/#por-que-son-importantes-para-la-ux","title":"\ud83d\ude80 \u00bfPor Qu\u00e9 son Importantes para la UX?","text":"<ul> <li>\ud83d\udcc8 Mejora de la Experiencia de Usuario (UX):<ul> <li>Fluidez en la Navegaci\u00f3n: Los usuarios deben encontrar f\u00e1cilmente lo que buscan sin perderse. Un buen mapa de navegaci\u00f3n hace que esto sea posible.  </li> <li>Pruebas de Usabilidad: Realiza pruebas para ver c\u00f3mo los usuarios interact\u00faan con la navegaci\u00f3n. \u00bfEncuentran obst\u00e1culos? \u00a1Aj\u00fastalo!  </li> <li>Mejora Continua: La navegaci\u00f3n debe estar en constante evoluci\u00f3n. Utiliza feedback de usuarios y pruebas de usabilidad para hacer mejoras continuas.</li> </ul> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/8flujosdeusuario/#como-utilizar-los-flujos-de-usuario-y-mapas-de-navegacion-para-mejorar-la-experiencia","title":"\ud83d\udee0\ufe0f \u00bfC\u00f3mo Utilizar los Flujos de Usuario y Mapas de Navegaci\u00f3n para Mejorar la Experiencia?","text":"<ol> <li> <p>\ud83d\udd0d Anticipa las Necesidades del Usuario: Usa flujos de usuario para prever los posibles caminos que tomar\u00e1 el usuario. Esto te permite optimizar la interfaz para que el usuario encuentre exactamente lo que necesita.  </p> </li> <li> <p>\ud83e\udded Mejora la Navegaci\u00f3n: Un mapa de navegaci\u00f3n bien dise\u00f1ado asegura que los usuarios nunca se pierdan. Organiza el contenido de manera l\u00f3gica y permite una navegaci\u00f3n fluida.  </p> </li> <li> <p>\ud83d\udd04 Itera y Optimiza: Nunca dejes de mejorar. Realiza pruebas frecuentes, recopila feedback y haz ajustes constantes para perfeccionar la experiencia de usuario.</p> </li> </ol>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/8flujosdeusuario/#conclusion-flujos-de-usuario-y-mapas-de-navegacion-para-una-ux-optima","title":"\ud83c\udfaf Conclusi\u00f3n: Flujos de Usuario y Mapas de Navegaci\u00f3n para una UX \u00d3ptima","text":"<p>Los flujos de usuario y los mapas de navegaci\u00f3n son herramientas imprescindibles para dise\u00f1ar interfaces efectivas y proporcionar una experiencia de usuario fluida. Al definir y construir flujos claros y mapas de navegaci\u00f3n bien estructurados, podemos asegurar que los usuarios completen sus tareas de manera eficiente y sin frustraciones.</p> <p>\u00a1Empieza a utilizar estas herramientas hoy para anticipar las necesidades del usuario, mejorar la navegaci\u00f3n y optimizar la experiencia general en tu aplicaci\u00f3n o sitio web! \ud83d\ude80</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/","title":"\ud83c\udfa8 Prototipado y Wireframing: Visualiza el Dise\u00f1o Perfecto Antes de Construirlo","text":"<p>En el fascinante proceso de dise\u00f1o de interfaces, el prototipado y el wireframing son los pasos donde la imaginaci\u00f3n se convierte en algo tangible. Son como los planos y maquetas de una casa: permiten visualizar c\u00f3mo se ver\u00e1 y funcionar\u00e1 antes de invertir en la construcci\u00f3n final. \ud83c\udfd7\ufe0f</p> <p>Estas t\u00e9cnicas te permiten crear representaciones visuales y funcionales de una interfaz, facilitar la comunicaci\u00f3n de ideas, y detectar problemas antes de que sea demasiado tarde. A continuaci\u00f3n, exploraremos c\u00f3mo crear prototipos impactantes, las herramientas m\u00e1s \u00fatiles para el wireframing, y la importancia de iterar y refinar tu dise\u00f1o. \u00a1Vamos all\u00e1! \ud83d\ude80</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#creacion-de-prototipos-de-interfaces-del-papel-a-la-realidad-digital","title":"\ud83d\udd8c\ufe0f Creaci\u00f3n de Prototipos de Interfaces: Del Papel a la Realidad Digital","text":"<p>El prototipado es como darle vida a tu idea. Es el proceso de crear una versi\u00f3n preliminar de una interfaz que se puede usar para probar conceptos y recibir feedback antes del desarrollo final. Existen diferentes niveles de prototipos, desde bocetos r\u00e1pidos hasta simulaciones interactivas muy detalladas.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#tipos-de-prototipos","title":"\ud83c\udf1f Tipos de Prototipos","text":"<ul> <li> <p>\ud83d\udcdd Prototipo de Baja Fidelidad:   Representaciones simples y esquem\u00e1ticas, como bocetos en papel o wireframes b\u00e1sicos. Ideales para explorar ideas iniciales sin entrar en detalles visuales. \u00a1Perfectos para sesiones de lluvia de ideas y pruebas tempranas!</p> </li> <li> <p>\ud83d\udcbb Prototipo de Alta Fidelidad:   Versiones detalladas y funcionales que simulan el comportamiento real del producto. Incluyen elementos interactivos, dise\u00f1o visual completo y animaciones. Son excelentes para pruebas de usabilidad y presentaciones a clientes.</p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#beneficios-del-prototipado","title":"\ud83d\ude80 Beneficios del Prototipado","text":"<ul> <li>\ud83d\udd0d Validaci\u00f3n Temprana: Prueba tus ideas antes de la implementaci\u00f3n, lo que te permite ajustar el dise\u00f1o sin grandes costos.  </li> <li>\ud83d\udde3\ufe0f Recopilaci\u00f3n de Feedback: Obt\u00e9n retroalimentaci\u00f3n valiosa de usuarios reales y partes interesadas para mejorar el dise\u00f1o.  </li> <li>\ud83e\udd1d Comunicaci\u00f3n Eficaz: Facilita la comunicaci\u00f3n entre dise\u00f1adores, desarrolladores y clientes, asegurando una visi\u00f3n clara del producto final.  </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#proceso-de-creacion-de-prototipos","title":"\ud83d\udd27 Proceso de Creaci\u00f3n de Prototipos","text":"<ol> <li>Definir Objetivos: \u00bfQu\u00e9 deseas validar? \u00bfNavegaci\u00f3n, funcionalidad, est\u00e9tica?  </li> <li>Seleccionar el Tipo de Prototipo: \u00bfNecesitas un boceto r\u00e1pido o una simulaci\u00f3n detallada?  </li> <li>Dise\u00f1ar y Construir: Utiliza herramientas de prototipado para crear tu prototipo, a\u00f1adiendo interactividad y detalles visuales.  </li> <li>Probar y Recopilar Feedback: Realiza pruebas con usuarios y ajusta en base a sus comentarios. \u00a1El mejor dise\u00f1o es el que evoluciona! \ud83d\udd04</li> </ol>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#herramientas-para-wireframing-el-primer-paso-hacia-una-gran-interfaz","title":"\ud83e\udde9 Herramientas para Wireframing: El Primer Paso hacia una Gran Interfaz","text":"<p>El wireframing es el arte de dibujar los esqueletos de una interfaz. Piensa en los wireframes como los mapas que muestran la disposici\u00f3n de los elementos en la pantalla. Son esenciales para planificar la estructura y funcionalidad antes de a\u00f1adir los detalles visuales. \ud83d\uddfa\ufe0f</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#tipos-de-wireframes","title":"\ud83d\uddbc\ufe0f Tipos de Wireframes","text":"<ul> <li> <p>\ud83d\udcc4 Wireframe de Baja Fidelidad:   Diagramas simples que muestran la estructura b\u00e1sica y la disposici\u00f3n de los elementos. Se enfocan en la funcionalidad y el flujo de la interfaz, sin distracciones visuales.</p> </li> <li> <p>\ud83d\udda5\ufe0f Wireframe de Alta Fidelidad:   M\u00e1s detallados y cercanos al dise\u00f1o final. Incluyen tipograf\u00eda, im\u00e1genes y ciertos elementos visuales para proporcionar una visi\u00f3n m\u00e1s completa de la interfaz.</p> </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#herramientas-populares-para-wireframing","title":"\u2699\ufe0f Herramientas Populares para Wireframing","text":"<ul> <li>\ud83d\udd8c\ufe0f Balsamiq Mockups: Herramienta intuitiva para crear wireframes de baja fidelidad. Ideal para bocetos r\u00e1pidos y colaboraciones creativas.  </li> <li>\ud83d\udd27 Axure RP: Perfecta para wireframes de alta fidelidad con funcionalidades avanzadas y pruebas de usabilidad.  </li> <li>\ud83c\udfa8 Sketch: Herramienta de dise\u00f1o vectorial que tambi\u00e9n permite crear wireframes y prototipos interactivos de alta fidelidad.  </li> <li>\ud83d\uddb1\ufe0f Adobe XD: Todo en uno para wireframing, prototipado y dise\u00f1o de alta fidelidad en una plataforma f\u00e1cil de usar.  </li> <li>\ud83c\udf10 Figma: Basada en la web, Figma facilita la colaboraci\u00f3n en tiempo real y el dise\u00f1o de wireframes y prototipos interactivos. \u00a1Dise\u00f1a en equipo sin importar la distancia!  </li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#mejores-practicas-para-wireframing","title":"\u2728 Mejores Pr\u00e1cticas para Wireframing","text":"<ul> <li>\ud83c\udfaf Claridad y Simplicidad: Mant\u00e9n los wireframes simples, enfocados en la funcionalidad.  </li> <li>\ud83d\udcd0 Consistencia: Usa un dise\u00f1o consistente para representar c\u00f3mo se disponen y comportan los elementos.  </li> <li>\ud83d\udd04 Iteraci\u00f3n Temprana: Realiza ajustes y mejoras basadas en pruebas y feedback antes de pasar a los detalles visuales.</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#iteracion-y-refinamiento-de-disenos-perfecciona-cada-detalle","title":"\ud83d\udd04 Iteraci\u00f3n y Refinamiento de Dise\u00f1os: \u00a1Perfecciona Cada Detalle!","text":"<p>La iteraci\u00f3n y el refinamiento son como el pulido final de una obra de arte. Implican revisar, ajustar y mejorar los prototipos y wireframes hasta que el dise\u00f1o sea intuitivo y efectivo.</p>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#proceso-de-iteracion","title":"\ud83d\udcca Proceso de Iteraci\u00f3n","text":"<ol> <li>Revisi\u00f3n de Feedback: Analiza los comentarios de las pruebas y busca patrones de mejora.  </li> <li>Realizaci\u00f3n de Cambios: Implementa cambios que mejoren la experiencia del usuario sin introducir nuevos problemas.  </li> <li>Repetici\u00f3n del Ciclo: Repite este proceso hasta que el dise\u00f1o cumpla con todos los objetivos y satisfaga las necesidades del usuario. \u00a1Nunca dejes de mejorar! \ud83d\ude80</li> </ol>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#beneficios-del-refinamiento","title":"\ud83d\udca1 Beneficios del Refinamiento","text":"<ul> <li>\ud83d\udc4c Mejora de la Usabilidad: Ajusta y optimiza los dise\u00f1os para que sean f\u00e1ciles de usar y eficientes.  </li> <li>\ud83d\udea8 Reducci\u00f3n de Riesgos: Identifica problemas en las primeras etapas, evitando errores costosos en el desarrollo final.  </li> <li>\ud83c\udfc6 Optimizaci\u00f3n del Dise\u00f1o: Asegura que el dise\u00f1o sea lo m\u00e1s intuitivo y funcional posible antes de su desarrollo final.</li> </ul>"},{"location":"ut1-desarrollodeinterfacesdeusuario-usabilidad/9prototipadoywireframing/#conclusion","title":"\ud83c\udfc1 Conclusi\u00f3n","text":"<p>El prototipado y el wireframing son esenciales en el proceso de dise\u00f1o de interfaces. Al utilizar herramientas adecuadas y realizar una iteraci\u00f3n continua y refinamiento, te aseguras de que el dise\u00f1o final sea eficiente, efectivo y centrado en el usuario. Siguiendo estos procesos, puedes crear interfaces que ofrezcan una experiencia de usuario fluida y satisfactoria. \u00a1Haz que tu idea cobre vida con prototipos y wireframes excepcionales! \ud83c\udf89</p>"},{"location":"ut2-introduccionatypescript/10interfacesyobjetos/","title":"\ud83e\udde9 Interfaces y Tipos Personalizados en TypeScript","text":"<p>Las interfaces y los tipos personalizados son herramientas poderosas en TypeScript que te permiten definir la forma exacta de los objetos y otros datos. Usar estas caracter\u00edsticas hace que tu c\u00f3digo sea m\u00e1s claro, seguro y f\u00e1cil de mantener. \u00a1Vamos a sumergirnos en el mundo de las interfaces y los tipos personalizados! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/10interfacesyobjetos/#1-definicion-de-interfaces","title":"1\ufe0f\u20e3 Definici\u00f3n de Interfaces","text":"<p>Una interface en TypeScript act\u00faa como un contrato para un objeto. Define la estructura que un objeto debe tener: qu\u00e9 propiedades, tipos y m\u00e9todos debe incluir. Es ideal para crear aplicaciones m\u00e1s estructuradas y menos propensas a errores.</p> <p>Ejemplo de Interface:</p> <pre><code>interface Usuario {\n  nombre: string;\n  edad: number;\n  esAdmin: boolean;\n}\n\nconst usuario1: Usuario = {\n  nombre: \"Mar\u00eda\",\n  edad: 32,\n  esAdmin: true,\n};\n\nconsole.log(`Nombre: ${usuario1.nombre}, Edad: ${usuario1.edad}, Admin: ${usuario1.esAdmin ? 'S\u00ed' : 'No'} \ud83d\udc64`);\n</code></pre> <p>En este ejemplo, la interface <code>Usuario</code> define que cualquier objeto de tipo <code>Usuario</code> debe tener las propiedades <code>nombre</code>, <code>edad</code>, y <code>esAdmin</code> con sus respectivos tipos. Si falta alguna propiedad o el tipo no coincide, TypeScript te lo har\u00e1 saber inmediatamente. \ud83d\uded1</p>"},{"location":"ut2-introduccionatypescript/10interfacesyobjetos/#2-uso-de-interfaces-para-la-tipificacion-de-objetos","title":"2\ufe0f\u20e3 Uso de Interfaces para la Tipificaci\u00f3n de Objetos","text":"<p>Las interfaces no solo son \u00fatiles para tipar objetos simples; tambi\u00e9n puedes usarlas para definir tipos m\u00e1s complejos y estructurados. Esto te permite reutilizar definiciones de tipos en varias partes de tu aplicaci\u00f3n.</p> <p>Ejemplo de Interface con Tipado Complejo:</p> <pre><code>interface Direccion {\n  calle: string;\n  ciudad: string;\n  pais: string;\n}\n\ninterface Cliente {\n  nombre: string;\n  direccion: Direccion; // Propiedad de tipo Direccion\n  pedidos: number[];\n}\n\nconst cliente1: Cliente = {\n  nombre: \"Carlos\",\n  direccion: {\n    calle: \"Av. Siempre Viva\",\n    ciudad: \"Springfield\",\n    pais: \"EE.UU.\",\n  },\n  pedidos: [101, 102, 103],\n};\n\nconsole.log(`Cliente: ${cliente1.nombre}, Ciudad: ${cliente1.direccion.ciudad} \ud83d\udce6`);\n</code></pre> <p>En este ejemplo, la interface <code>Cliente</code> tiene una propiedad <code>direccion</code> que es de tipo <code>Direccion</code>, mostrando c\u00f3mo las interfaces pueden ser anidadas y reutilizadas para representar estructuras de datos complejas. \ud83c\udf33</p>"},{"location":"ut2-introduccionatypescript/10interfacesyobjetos/#3-creacion-de-tipos-personalizados","title":"3\ufe0f\u20e3 Creaci\u00f3n de Tipos Personalizados","text":"<p>Adem\u00e1s de las interfaces, TypeScript permite crear tipos personalizados utilizando la palabra clave <code>type</code>. Los tipos personalizados son extremadamente flexibles y te permiten definir tipos que pueden ser combinaciones de varios otros tipos, incluso con caracter\u00edsticas avanzadas como uniones y intersecciones.</p>"},{"location":"ut2-introduccionatypescript/10interfacesyobjetos/#definicion-basica-de-un-tipo","title":"\ud83d\udd39 Definici\u00f3n B\u00e1sica de un Tipo","text":"<p>Ejemplo de Tipo Personalizado:</p> <pre><code>type Producto = {\n  nombre: string;\n  precio: number;\n  enStock: boolean;\n};\n\nconst producto1: Producto = {\n  nombre: \"Laptop\",\n  precio: 1200,\n  enStock: true,\n};\n\nconsole.log(`Producto: ${producto1.nombre}, Precio: $${producto1.precio} \ud83d\udcbb`);\n</code></pre> <p>El tipo <code>Producto</code> define la forma exacta que debe tener un objeto <code>Producto</code>. Este tipo es reutilizable en cualquier parte de tu aplicaci\u00f3n donde necesites un objeto que tenga esta estructura.</p>"},{"location":"ut2-introduccionatypescript/10interfacesyobjetos/#tipos-de-union-union-types","title":"\ud83d\udd39 Tipos de Uni\u00f3n (Union Types)","text":"<p>Los tipos de uni\u00f3n permiten que una variable pueda ser de varios tipos diferentes. Esto es \u00fatil cuando una variable puede tener un valor de uno de varios tipos.</p> <p>Ejemplo de Tipo de Uni\u00f3n:</p> <pre><code>type ID = number | string;\n\nlet idUsuario: ID;\n\nidUsuario = 123; // \u2705 V\u00e1lido\nidUsuario = \"ABC123\"; // \u2705 V\u00e1lido\n\nconsole.log(`ID del usuario: ${idUsuario} \ud83c\udd94`);\n</code></pre> <p>Aqu\u00ed, <code>ID</code> puede ser un <code>number</code> o un <code>string</code>, permitiendo una mayor flexibilidad. Es muy \u00fatil cuando un identificador puede tener diferentes formatos.</p>"},{"location":"ut2-introduccionatypescript/10interfacesyobjetos/#tipos-de-interseccion-intersection-types","title":"\ud83d\udd39 Tipos de Intersecci\u00f3n (Intersection Types)","text":"<p>Los tipos de intersecci\u00f3n combinan varios tipos en uno solo. Una variable que tenga un tipo de intersecci\u00f3n debe cumplir con todos los tipos involucrados.</p> <p>Ejemplo de Tipo de Intersecci\u00f3n:</p> <pre><code>type Animal = {\n  nombre: string;\n};\n\ntype Volador = {\n  puedeVolar: boolean;\n};\n\ntype Ave = Animal &amp; Volador; // Intersecci\u00f3n de Animal y Volador\n\nconst pajaro: Ave = {\n  nombre: \"Gaviota\",\n  puedeVolar: true,\n};\n\nconsole.log(`Animal: ${pajaro.nombre}, \u00bfPuede volar? ${pajaro.puedeVolar ? 'S\u00ed' : 'No'} \ud83d\udd4a\ufe0f`);\n</code></pre> <p>En este caso, <code>Ave</code> es un tipo que debe tener todas las propiedades de <code>Animal</code> y <code>Volador</code>, combinando ambas en un solo tipo robusto.</p>"},{"location":"ut2-introduccionatypescript/10interfacesyobjetos/#resumen-rapido","title":"\ud83c\udf1f \u00a1Resumen R\u00e1pido!","text":"<p>TypeScript ofrece herramientas robustas para manejar tipos:</p> <ul> <li>Interfaces: Perfectas para definir estructuras de objetos y contratos de c\u00f3digo.</li> <li>Tipos Personalizados (<code>type</code>): Flexibles y potentes, permiten definir estructuras m\u00e1s complejas con uniones e intersecciones.</li> <li>Uniones e Intersecciones: A\u00f1aden flexibilidad y precisi\u00f3n al tipado, mejorando la robustez del c\u00f3digo.</li> </ul> <p>Con estas caracter\u00edsticas, tu c\u00f3digo ser\u00e1 m\u00e1s seguro, claro y f\u00e1cil de mantener. \u00a1Experimenta con interfaces y tipos personalizados y lleva tu desarrollo en TypeScript al siguiente nivel! \ud83d\udcaa</p>"},{"location":"ut2-introduccionatypescript/11clasesyherencia/","title":"\ud83c\udfdb\ufe0f Clases y Herencia en TypeScript","text":"<p>En TypeScript, las clases son una forma poderosa de crear objetos y organizar el c\u00f3digo en estructuras reutilizables y f\u00e1ciles de mantener. Las clases permiten definir propiedades, m\u00e9todos, y utilizar herencia para extender la funcionalidad de otras clases. Tambi\u00e9n puedes definir propiedades como privadas o p\u00fablicas para controlar el acceso a los datos. \u00a1Vamos a explorar estas caracter\u00edsticas! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/11clasesyherencia/#1-declaracion-de-clases-y-metodos","title":"1\ufe0f\u20e3 Declaraci\u00f3n de Clases y M\u00e9todos","text":"<p>Una clase en TypeScript se define utilizando la palabra clave <code>class</code>. Dentro de una clase, puedes definir propiedades (datos) y m\u00e9todos (funciones). Las clases son plantillas que describen c\u00f3mo deben ser los objetos que se basan en ellas.</p> <p>Ejemplo de Declaraci\u00f3n de Clase:</p> <pre><code>class Animal {\n  nombre: string; // Propiedad\n\n  constructor(nombre: string) {\n    this.nombre = nombre; // Inicializaci\u00f3n de la propiedad\n  }\n\n  hacerSonido(): void { // M\u00e9todo\n    console.log(`${this.nombre} hace un sonido. \ud83d\udc3e`);\n  }\n}\n\nconst miAnimal = new Animal(\"Elefante\");\nmiAnimal.hacerSonido(); // Elefante hace un sonido. \ud83d\udc3e\n</code></pre> <p>En este ejemplo, hemos declarado una clase <code>Animal</code> con una propiedad <code>nombre</code> y un m\u00e9todo <code>hacerSonido()</code>. El constructor se usa para inicializar las propiedades de la clase cuando se crea una nueva instancia del objeto. \ud83c\udfd7\ufe0f</p>"},{"location":"ut2-introduccionatypescript/11clasesyherencia/#2-propiedades-privadas-y-publicas","title":"2\ufe0f\u20e3 Propiedades Privadas y P\u00fablicas","text":"<p>En TypeScript, puedes definir propiedades y m\u00e9todos como p\u00fablicos (<code>public</code>) o privados (<code>private</code>). Las propiedades y m\u00e9todos p\u00fablicos son accesibles desde fuera de la clase, mientras que los privados solo son accesibles dentro de la propia clase.</p> <p>Propiedades P\u00fablicas y Privadas:</p> <pre><code>class Persona {\n  public nombre: string; // Propiedad p\u00fablica\n  private edad: number;  // Propiedad privada\n\n  constructor(nombre: string, edad: number) {\n    this.nombre = nombre;\n    this.edad = edad;\n  }\n\n  public saludar(): void {\n    console.log(`Hola, soy ${this.nombre} \ud83d\udc4b`);\n  }\n\n  private mostrarEdad(): void {\n    console.log(`Tengo ${this.edad} a\u00f1os.`);\n  }\n\n  public informacionCompleta(): void {\n    this.saludar();\n    this.mostrarEdad(); // Llamada a m\u00e9todo privado dentro de la clase\n  }\n}\n\nconst persona1 = new Persona(\"Carlos\", 30);\npersona1.saludar(); // Hola, soy Carlos \ud83d\udc4b\n// persona1.mostrarEdad(); \u274c Error: 'mostrarEdad' es privado y no accesible fuera de la clase\npersona1.informacionCompleta(); // Hola, soy Carlos \ud83d\udc4b Tengo 30 a\u00f1os.\n</code></pre> <p>En este ejemplo, <code>nombre</code> es una propiedad p\u00fablica y <code>edad</code> es privada. Los m\u00e9todos p\u00fablicos como <code>saludar()</code> pueden ser llamados desde fuera de la clase, pero los m\u00e9todos privados como <code>mostrarEdad()</code> solo se pueden usar dentro de la propia clase. \ud83d\udd12</p>"},{"location":"ut2-introduccionatypescript/11clasesyherencia/#3-herencia-y-clases-abstractas","title":"3\ufe0f\u20e3 Herencia y Clases Abstractas","text":"<p>La herencia es un principio clave de la programaci\u00f3n orientada a objetos que permite a una clase derivar de otra clase, heredando todas sus propiedades y m\u00e9todos. TypeScript tambi\u00e9n soporta clases abstractas, que act\u00faan como plantillas para otras clases.</p>"},{"location":"ut2-introduccionatypescript/11clasesyherencia/#herencia","title":"\ud83d\udd39 Herencia","text":"<p>Para heredar de una clase, utiliza la palabra clave <code>extends</code>. La clase derivada puede agregar nuevas propiedades o m\u00e9todos y tambi\u00e9n puede sobrescribir los m\u00e9todos existentes.</p> <p>Ejemplo de Herencia:</p> <pre><code>class Animal {\n  constructor(public nombre: string) {}\n\n  hacerSonido(): void {\n    console.log(`${this.nombre} hace un sonido. \ud83d\udc3e`);\n  }\n}\n\nclass Perro extends Animal {\n  constructor(nombre: string) {\n    super(nombre); // Llamada al constructor de la clase padre\n  }\n\n  hacerSonido(): void { // Sobrescribe el m\u00e9todo de la clase padre\n    console.log(`${this.nombre} ladra: \u00a1Guau guau! \ud83d\udc15`);\n  }\n}\n\nconst miPerro = new Perro(\"Max\");\nmiPerro.hacerSonido(); // Max ladra: \u00a1Guau guau! \ud83d\udc15\n</code></pre> <p>En este ejemplo, la clase <code>Perro</code> extiende la clase <code>Animal</code>, heredando su propiedad <code>nombre</code> y su m\u00e9todo <code>hacerSonido()</code>, que luego sobrescribe con un comportamiento espec\u00edfico para perros. \ud83d\udc36</p>"},{"location":"ut2-introduccionatypescript/11clasesyherencia/#clases-abstractas","title":"\ud83d\udd39 Clases Abstractas","text":"<p>Una clase abstracta es una clase que no puede ser instanciada directamente. Sirve como plantilla para otras clases que la extienden. Una clase abstracta puede contener m\u00e9todos abstractos (sin implementaci\u00f3n) que deben ser implementados por las clases derivadas.</p> <p>Ejemplo de Clase Abstracta:</p> <pre><code>abstract class Vehiculo {\n  constructor(public marca: string) {}\n\n  abstract moverse(): void; // M\u00e9todo abstracto, sin implementaci\u00f3n\n\n  mostrarMarca(): void {\n    console.log(`Este veh\u00edculo es un ${this.marca}. \ud83d\ude97`);\n  }\n}\n\nclass Coche extends Vehiculo {\n  constructor(marca: string) {\n    super(marca);\n  }\n\n  moverse(): void { // Implementaci\u00f3n del m\u00e9todo abstracto\n    console.log(`El ${this.marca} est\u00e1 conduciendo. \ud83d\udee3\ufe0f`);\n  }\n}\n\nconst miCoche = new Coche(\"Toyota\");\nmiCoche.mostrarMarca(); // Este veh\u00edculo es un Toyota. \ud83d\ude97\nmiCoche.moverse(); // El Toyota est\u00e1 conduciendo. \ud83d\udee3\ufe0f\n</code></pre> <p>En este ejemplo, <code>Vehiculo</code> es una clase abstracta con un m\u00e9todo abstracto <code>moverse()</code> que debe ser implementado por cualquier clase que la extienda, como <code>Coche</code>. \ud83d\ude99</p>"},{"location":"ut2-introduccionatypescript/11clasesyherencia/#resumen-rapido","title":"\ud83c\udf1f \u00a1Resumen R\u00e1pido!","text":"<p>TypeScript ofrece potentes caracter\u00edsticas de programaci\u00f3n orientada a objetos:</p> <ul> <li>Declaraci\u00f3n de Clases y M\u00e9todos: Crea plantillas de objetos con propiedades y m\u00e9todos.</li> <li>Propiedades Privadas y P\u00fablicas: Controla el acceso a los datos dentro de las clases.</li> <li>Herencia y Clases Abstractas: Reutiliza c\u00f3digo y establece contratos claros para las clases derivadas.</li> </ul> <p>Estas caracter\u00edsticas te permiten escribir c\u00f3digo m\u00e1s modular, reutilizable y organizado. \u00a1Experimenta con las clases en TypeScript y lleva tu programaci\u00f3n orientada a objetos al siguiente nivel! \ud83d\udcaa</p>"},{"location":"ut2-introduccionatypescript/12modularizaciondecodigo/","title":"\ud83d\udce6 Modularizaci\u00f3n en TypeScript","text":"<p>La modularizaci\u00f3n es una t\u00e9cnica fundamental en la programaci\u00f3n moderna que permite dividir el c\u00f3digo en m\u00f3dulos m\u00e1s peque\u00f1os y manejables. Esto facilita la organizaci\u00f3n, reutilizaci\u00f3n y mantenimiento del c\u00f3digo. En TypeScript, podemos utilizar importaciones y exportaciones para gestionar nuestros m\u00f3dulos de manera eficiente. \u00a1Vamos a ver c\u00f3mo hacerlo! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/12modularizaciondecodigo/#1-importaciones-y-exportaciones-en-typescript","title":"1\ufe0f\u20e3 Importaciones y Exportaciones en TypeScript","text":"<p>En TypeScript, puedes dividir tu c\u00f3digo en m\u00faltiples archivos (m\u00f3dulos) y utilizar exportaciones para hacer que las funciones, clases, interfaces, u objetos est\u00e9n disponibles para otros m\u00f3dulos. Por otro lado, puedes usar importaciones para traer esas entidades de otros m\u00f3dulos y usarlas en el tuyo.</p>"},{"location":"ut2-introduccionatypescript/12modularizaciondecodigo/#exportaciones","title":"\ud83d\udd39 Exportaciones","text":"<p>Las exportaciones se utilizan para declarar qu\u00e9 partes de un m\u00f3dulo deben estar disponibles para otros m\u00f3dulos. Puedes exportar variables, funciones, clases, interfaces, etc.</p> <p>Ejemplo de Exportaci\u00f3n de Funci\u00f3n y Clase:</p> <pre><code>// archivo: calculadora.ts\n\nexport function sumar(a: number, b: number): number {\n  return a + b;\n}\n\nexport class Calculadora {\n  restar(a: number, b: number): number {\n    return a - b;\n  }\n}\n</code></pre> <p>En este archivo <code>calculadora.ts</code>, hemos exportado una funci\u00f3n <code>sumar</code> y una clase <code>Calculadora</code> que contiene un m\u00e9todo <code>restar</code>. Estos estar\u00e1n disponibles para ser importados y utilizados en otros archivos. \ud83e\udde9</p>"},{"location":"ut2-introduccionatypescript/12modularizaciondecodigo/#importaciones","title":"\ud83d\udd39 Importaciones","text":"<p>Para importar entidades exportadas de otro m\u00f3dulo, usamos la palabra clave <code>import</code>. Puedes importar funciones, clases o cualquier cosa que haya sido exportada.</p> <p>Ejemplo de Importaci\u00f3n:</p> <pre><code>// archivo: app.ts\n\nimport { sumar, Calculadora } from \"./calculadora\"; // Importa la funci\u00f3n y la clase\n\nconsole.log(sumar(10, 5)); // 15 \u2795\n\nconst miCalculadora = new Calculadora();\nconsole.log(miCalculadora.restar(10, 5)); // 5 \u2796\n</code></pre> <p>En este ejemplo, <code>app.ts</code> importa la funci\u00f3n <code>sumar</code> y la clase <code>Calculadora</code> desde <code>calculadora.ts</code> y las utiliza. La importaci\u00f3n se hace con la sintaxis <code>{ nombre }</code> desde el archivo correspondiente. \ud83c\udf1f</p>"},{"location":"ut2-introduccionatypescript/12modularizaciondecodigo/#exportacion-por-defecto","title":"\ud83d\udd39 Exportaci\u00f3n por Defecto","text":"<p>Adem\u00e1s de las exportaciones nombradas, TypeScript tambi\u00e9n permite exportaciones por defecto, que exportan una \u00fanica entidad por defecto.</p> <p>Ejemplo de Exportaci\u00f3n por Defecto:</p> <pre><code>// archivo: usuario.ts\n\nexport default class Usuario {\n  constructor(public nombre: string) {}\n\n  saludar(): void {\n    console.log(`\u00a1Hola, ${this.nombre}! \ud83d\udc4b`);\n  }\n}\n</code></pre> <p>Aqu\u00ed, <code>Usuario</code> es exportado como la exportaci\u00f3n por defecto. Al importar, no necesitas usar llaves <code>{}</code>.</p> <p>Ejemplo de Importaci\u00f3n por Defecto:</p> <pre><code>// archivo: main.ts\n\nimport Usuario from \"./usuario\"; // Importaci\u00f3n sin llaves\n\nconst usuario1 = new Usuario(\"Ana\");\nusuario1.saludar(); // \u00a1Hola, Ana! \ud83d\udc4b\n</code></pre> <p>\u00a1As\u00ed de simple! Las importaciones por defecto son perfectas cuando solo necesitas importar una entidad principal de un m\u00f3dulo. \ud83c\udfaf</p>"},{"location":"ut2-introduccionatypescript/12modularizaciondecodigo/#2-uso-de-modulos-para-organizar-el-codigo","title":"2\ufe0f\u20e3 Uso de M\u00f3dulos para Organizar el C\u00f3digo","text":"<p>Organizar el c\u00f3digo en m\u00f3dulos es fundamental para el desarrollo de software a gran escala. Al dividir el c\u00f3digo en m\u00f3dulos, puedes trabajar en diferentes partes de tu aplicaci\u00f3n sin que los archivos se vuelvan enormes y dif\u00edciles de manejar. Cada m\u00f3dulo tiene un prop\u00f3sito espec\u00edfico, lo que hace que tu aplicaci\u00f3n sea m\u00e1s modular, reutilizable, y mantenible.</p>"},{"location":"ut2-introduccionatypescript/12modularizaciondecodigo/#organizando-el-codigo-en-modulos","title":"\ud83d\udd39 Organizando el C\u00f3digo en M\u00f3dulos","text":"<p>Imagina que est\u00e1s desarrollando una aplicaci\u00f3n de e-commerce. Puedes dividir el c\u00f3digo en m\u00f3dulos separados para manejar diferentes responsabilidades:</p> <ol> <li>Producto (product.ts): L\u00f3gica relacionada con los productos.</li> <li>Carrito de Compras (cart.ts): L\u00f3gica para agregar, quitar, y manejar productos en el carrito.</li> <li>Usuario (user.ts): L\u00f3gica relacionada con la autenticaci\u00f3n y gesti\u00f3n del usuario.</li> </ol> <p>Ejemplo de Organizaci\u00f3n Modular:</p> <pre><code>// archivo: product.ts\nexport class Producto {\n  constructor(public nombre: string, public precio: number) {}\n}\n\n// archivo: cart.ts\nimport { Producto } from \"./product\";\n\nexport class Carrito {\n  private productos: Producto[] = [];\n\n  agregarProducto(producto: Producto): void {\n    this.productos.push(producto);\n    console.log(`Producto agregado: ${producto.nombre} \ud83d\uded2`);\n  }\n\n  mostrarCarrito(): void {\n    console.log(\"Carrito de compras:\");\n    this.productos.forEach((producto) =&gt;\n      console.log(`${producto.nombre} - $${producto.precio}`)\n    );\n  }\n}\n\n// archivo: main.ts\nimport { Producto } from \"./product\";\nimport { Carrito } from \"./cart\";\n\nconst carrito = new Carrito();\nconst prod1 = new Producto(\"Laptop\", 1200);\nconst prod2 = new Producto(\"Smartphone\", 800);\n\ncarrito.agregarProducto(prod1); // Producto agregado: Laptop \ud83d\uded2\ncarrito.agregarProducto(prod2); // Producto agregado: Smartphone \ud83d\uded2\ncarrito.mostrarCarrito();\n</code></pre> <p>En este ejemplo, el archivo <code>main.ts</code> act\u00faa como el punto de entrada de la aplicaci\u00f3n, importando clases desde los m\u00f3dulos <code>product.ts</code> y <code>cart.ts</code> para utilizarlas. Esto mantiene el c\u00f3digo limpio, organizado y f\u00e1cil de mantener. \ud83d\uddc2\ufe0f</p>"},{"location":"ut2-introduccionatypescript/12modularizaciondecodigo/#resumen-rapido","title":"\ud83c\udf1f \u00a1Resumen R\u00e1pido!","text":"<ul> <li>Importaciones y Exportaciones: Divide tu c\u00f3digo en m\u00f3dulos y reutiliza funciones, clases, y otros elementos.</li> <li>M\u00f3dulos para Organizaci\u00f3n del C\u00f3digo: Mant\u00e9n tu aplicaci\u00f3n organizada, clara y escalable.</li> </ul> <p>Utilizar m\u00f3dulos en TypeScript es esencial para escribir c\u00f3digo limpio, organizado y de alta calidad. \u00a1Empieza a modularizar tu c\u00f3digo hoy y disfruta de un desarrollo m\u00e1s eficiente y manejable! \ud83d\udcaa</p>"},{"location":"ut2-introduccionatypescript/13recursos/","title":"Recursos y FAQ","text":""},{"location":"ut2-introduccionatypescript/13recursos/#guia-para-debuggear-typescript-en-visual-studio-code","title":"\ud83d\udee0\ufe0f Gu\u00eda para Debuggear TypeScript en Visual Studio Code","text":""},{"location":"ut2-introduccionatypescript/13recursos/#1-configura-el-proyecto-de-typescript","title":"1\ufe0f\u20e3 Configura el Proyecto de TypeScript","text":"<p>Para comenzar, necesitas configurar tu proyecto de TypeScript para que est\u00e9 listo para ser depurado. Esto se hace utilizando un archivo <code>tsconfig.json</code> que configura el compilador de TypeScript.</p> <p>Abre tu proyecto en VS Code: Si a\u00fan no tienes un proyecto, crea una carpeta nueva y \u00e1brela en VS Code.</p> <p>Abre la Terminal Integrada: Puedes abrir la terminal integrada de VS Code presionando <code>Ctrl + \\`` (Windows/Linux) o</code>Cmd + `` (Mac).</p> <p>Ejecuta <code>tsc --init</code> para crear el archivo <code>tsconfig.json</code>:</p> <pre><code>tsc --init\n</code></pre> <p>Este comando generar\u00e1 un archivo <code>tsconfig.json</code> en la ra\u00edz de tu proyecto.</p> <p>Configura el archivo <code>tsconfig.json</code>:</p> <p>Abre el archivo <code>tsconfig.json</code> generado y aseg\u00farate de que contenga las siguientes configuraciones:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es2016\",                // Versi\u00f3n de ECMAScript de destino\n    \"module\": \"commonjs\",              // M\u00f3dulo com\u00fan para Node.js\n    \"strict\": true,                    // Activa las verificaciones estrictas de TypeScript\n    \"esModuleInterop\": true,           // Interoperabilidad de m\u00f3dulos ES\n    \"forceConsistentCasingInFileNames\": true, // Consistencia de may\u00fasculas y min\u00fasculas en nombres de archivo\n    \"skipLibCheck\": true,              // Omite la verificaci\u00f3n de tipos en archivos de definici\u00f3n de bibliotecas\n    \"sourceMap\": true                  // Importante: Habilita los mapas de origen para depuraci\u00f3n\n  }\n}\n</code></pre> <ul> <li>Importante: La propiedad <code>\"sourceMap\": true</code> es crucial para el debugging. Esta propiedad permite que el depurador de VS Code mapee el c\u00f3digo JavaScript compilado de vuelta al c\u00f3digo TypeScript original, facilitando la depuraci\u00f3n.</li> </ul>"},{"location":"ut2-introduccionatypescript/13recursos/#2-escribe-un-codigo-de-ejemplo-para-debuggear","title":"2\ufe0f\u20e3 Escribe un C\u00f3digo de Ejemplo para Debuggear","text":"<p>Para verificar que todo funciona correctamente, crea un archivo TypeScript simple en la ra\u00edz de tu proyecto. Por ejemplo, crea un archivo llamado <code>extra-ejercicios-basicos-sol.ts</code> y a\u00f1ade el siguiente c\u00f3digo:</p> <pre><code>function suma(a: number, b: number): number {\n  return a + b;\n}\n\nfunction mostrarResultado(): void {\n  const resultado = suma(5, 10);\n  console.log(`El resultado de la suma es: ${resultado}`);\n}\n\nmostrarResultado();\n</code></pre> <p>Este c\u00f3digo define una funci\u00f3n <code>suma</code> y otra funci\u00f3n <code>mostrarResultado</code> que llama a <code>suma</code> y muestra el resultado.</p>"},{"location":"ut2-introduccionatypescript/13recursos/#3-compila-el-codigo-typescript","title":"3\ufe0f\u20e3 Compila el C\u00f3digo TypeScript","text":"<p>Compila el c\u00f3digo TypeScript a JavaScript usando el siguiente comando en la terminal integrada de VS Code:</p> <pre><code>tsc\n</code></pre> <p>Esto generar\u00e1 un archivo JavaScript correspondiente (<code>extra-ejercicios-basicos-sol.js</code>) en la misma carpeta, a menos que hayas configurado una carpeta de salida (<code>outDir</code>) en <code>tsconfig.json</code>.</p>"},{"location":"ut2-introduccionatypescript/13recursos/#4-configura-el-archivo-launchjson-para-la-depuracion","title":"4\ufe0f\u20e3 Configura el Archivo <code>launch.json</code> para la Depuraci\u00f3n","text":"<ol> <li> <p>Crea la Carpeta <code>.vscode</code>: Si no existe ya, crea una carpeta llamada <code>.vscode</code> en la ra\u00edz de tu proyecto.</p> </li> <li> <p>Crea el Archivo <code>launch.json</code>: Dentro de la carpeta <code>.vscode</code>, crea un archivo llamado <code>launch.json</code>.</p> </li> <li> <p>Configura el Archivo <code>launch.json</code>: A\u00f1ade la siguiente configuraci\u00f3n al archivo <code>launch.json</code>:</p> </li> </ol> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",                         // Tipo de depuraci\u00f3n\n      \"request\": \"launch\",                    // Tipo de solicitud de depuraci\u00f3n\n      \"name\": \"Launch Program\",               // Nombre de la configuraci\u00f3n\n      \"program\": \"${workspaceFolder}/extra-ejercicios-basicos-sol.ts\",  // Ruta al archivo TypeScript\n      \"preLaunchTask\": \"tsc: build - tsconfig.json\", // Tarea de compilaci\u00f3n antes de lanzar la depuraci\u00f3n\n      \"outFiles\": [\n        \"${workspaceFolder}/**/*.js\"          // Coincide con los archivos JavaScript generados\n      ]\n    }\n  ]\n}\n</code></pre> <ul> <li><code>type</code>: Especifica que el depurador es para Node.js.</li> <li><code>request</code>: <code>launch</code> indica que se iniciar\u00e1 un programa.</li> <li><code>program</code>: Ruta al archivo TypeScript que deseas depurar.</li> <li><code>preLaunchTask</code>: Compila el c\u00f3digo TypeScript antes de iniciar la depuraci\u00f3n.</li> <li><code>outFiles</code>: Permite al depurador encontrar los archivos <code>.js</code> generados por TypeScript.</li> </ul>"},{"location":"ut2-introduccionatypescript/13recursos/#5-ejecuta-la-depuracion-en-visual-studio-code","title":"5\ufe0f\u20e3 Ejecuta la Depuraci\u00f3n en Visual Studio Code","text":"<ol> <li> <p>Agrega Puntos de Interrupci\u00f3n (Breakpoints): Abre el archivo <code>extra-ejercicios-basicos-sol.ts</code> y haz clic en la barra de la izquierda junto a los n\u00fameros de l\u00ednea para agregar un punto de interrupci\u00f3n. Por ejemplo, puedes agregar un breakpoint en la l\u00ednea donde se llama a <code>console.log</code>.</p> </li> <li> <p>Inicia la Depuraci\u00f3n: Ve a la vista de depuraci\u00f3n (presiona <code>Ctrl + Shift + D</code> o <code>Cmd + Shift + D</code> en Mac), selecciona \"Launch Program\" en el men\u00fa desplegable y haz clic en el bot\u00f3n de inicio (<code>\u25b6\ufe0f</code>) o presiona <code>F5</code>.</p> </li> <li> <p>Inspecciona el C\u00f3digo durante la Depuraci\u00f3n: Cuando la ejecuci\u00f3n se detenga en el punto de interrupci\u00f3n, podr\u00e1s inspeccionar variables, evaluar expresiones en la Consola de Depuraci\u00f3n, y navegar por el stack de llamadas.</p> </li> </ol>"},{"location":"ut2-introduccionatypescript/13recursos/#6-aprovecha-los-mapas-de-origen-source-maps","title":"6\ufe0f\u20e3 Aprovecha los Mapas de Origen (Source Maps)","text":"<p>Gracias a la opci\u00f3n <code>\"sourceMap\": true</code> en <code>tsconfig.json</code>, VS Code podr\u00e1 mapear el c\u00f3digo JavaScript compilado al TypeScript original, lo que facilita la depuraci\u00f3n.</p> <ul> <li>Ver el C\u00f3digo Original: Durante la depuraci\u00f3n, VS Code mostrar\u00e1 el archivo <code>.ts</code> original en lugar del archivo <code>.js</code> compilado, lo que permite que los breakpoints, la navegaci\u00f3n y las inspecciones se realicen directamente en el c\u00f3digo TypeScript.</li> </ul>"},{"location":"ut2-introduccionatypescript/13recursos/#7-consejos-para-un-debugging-efectivo","title":"7\ufe0f\u20e3 Consejos para un Debugging Efectivo","text":"<ul> <li>Usa \"Step Over\" (F10) y \"Step Into\" (F11) para navegar por el c\u00f3digo l\u00ednea a l\u00ednea o entrar en funciones.</li> <li>Explora el Call Stack: Te ayuda a ver la ruta que sigui\u00f3 la ejecuci\u00f3n del c\u00f3digo.</li> <li>Utiliza la Consola de Depuraci\u00f3n para evaluar expresiones y cambiar variables en tiempo real.</li> </ul>"},{"location":"ut2-introduccionatypescript/13recursos/#guia-para-leer-variables-por-consola-en-typescript","title":"\ud83d\udce5 Gu\u00eda para Leer Variables por Consola en TypeScript","text":"<p>Cuando trabajamos con TypeScript en entornos de l\u00ednea de comandos, es com\u00fan necesitar capturar entradas del usuario. Para esto, podemos usar la librer\u00eda <code>readline-sync</code>, que permite interactuar f\u00e1cilmente con el usuario desde la consola.</p>"},{"location":"ut2-introduccionatypescript/13recursos/#instalacion-de-readline-sync","title":"\ud83d\udee0\ufe0f Instalaci\u00f3n de <code>readline-sync</code>","text":"<p>Antes de comenzar, es necesario instalar la librer\u00eda usando npm:</p> <pre><code>npm install readline-sync\n</code></pre>"},{"location":"ut2-introduccionatypescript/13recursos/#ejemplo-de-uso-de-readline-sync","title":"\ud83d\ude80 Ejemplo de Uso de <code>readline-sync</code>","text":"<p>A continuaci\u00f3n, te muestro un ejemplo b\u00e1sico de c\u00f3mo usar <code>readline-sync</code> para capturar la entrada del usuario en TypeScript:</p> <pre><code>// Importamos la librer\u00eda readline-sync\nimport * as readlineSync from 'readline-sync';\n\n// Esperamos la respuesta del usuario.\nconst userName: string = readlineSync.question('\u00bfPuedo conocer tu nombre? ');\nconsole.log('\u00a1Hola ' + userName + '!');\n\n// Manejo de texto secreto (por ejemplo, contrase\u00f1as).\nconst favFood: string = readlineSync.question('\u00bfCu\u00e1l es tu comida favorita? ', {\n    hideEchoBack: true // El texto introducido se oculta en pantalla.\n});\nconsole.log('\u00a1A ' + userName + ' le gusta ' + favFood + '!');\n</code></pre>"},{"location":"ut2-introduccionatypescript/13recursos/#explicacion-del-codigo","title":"\ud83d\udcd6 Explicaci\u00f3n del C\u00f3digo","text":"<ol> <li>Instalaci\u00f3n: <code>readline-sync</code> se instala ejecutando el comando <code>npm install readline-sync</code>.</li> <li>Importaci\u00f3n de la Librer\u00eda: Utilizamos <code>import * as readlineSync from 'readline-sync';</code> para importar la librer\u00eda y poder usar sus funcionalidades.</li> <li>Captura de Datos: </li> <li><code>question()</code> se usa para mostrar un mensaje y capturar la respuesta del usuario.</li> <li>En el ejemplo, pedimos el nombre del usuario y lo saludamos.</li> <li>Entrada Oculta:</li> <li>La opci\u00f3n <code>{ hideEchoBack: true }</code> se usa para ocultar lo que escribe el usuario, \u00fatil para contrase\u00f1as o informaci\u00f3n sensible.</li> </ol>"},{"location":"ut2-introduccionatypescript/13recursos/#aplicaciones-comunes","title":"\ud83d\udd27 Aplicaciones Comunes","text":"<ul> <li>Captura de Datos en Aplicaciones CLI: Ideal para aplicaciones de l\u00ednea de comandos que requieren interacci\u00f3n del usuario.</li> <li>Formularios y Encuestas Simples: Se puede usar para crear formularios simples y recopilar datos sin una interfaz gr\u00e1fica.</li> <li>Prototipos y Pruebas R\u00e1pidas: \u00datil para prototipar r\u00e1pidamente funciones que requieren entrada del usuario.</li> </ul>"},{"location":"ut2-introduccionatypescript/1queestypescript/","title":"\ud83c\udf1f \u00bfQu\u00e9 es TypeScript?","text":""},{"location":"ut2-introduccionatypescript/1queestypescript/#definicion-y-comparacion-con-javascript","title":"\ud83d\udd0d Definici\u00f3n y Comparaci\u00f3n con JavaScript","text":"<p>TypeScript es un superconjunto tipado de JavaScript que se compila a JavaScript puro. \u00bfQu\u00e9 significa esto? \ud83c\udf10 Imagina que est\u00e1s escribiendo c\u00f3digo JavaScript, pero con superpoderes adicionales que te permiten detectar errores antes de que aparezcan. \ud83d\ude80 TypeScript a\u00f1ade una capa de tipado est\u00e1tico que permite a los desarrolladores definir tipos para las variables, funciones y objetos. Esto ayuda a evitar errores comunes que podr\u00edan ocurrir al no conocer el tipo de datos con los que se est\u00e1 trabajando.</p> <p>\ud83d\udd38 JavaScript: Un lenguaje de programaci\u00f3n din\u00e1mico, flexible y sin tipado. \ud83d\udd38 TypeScript: El mismo JavaScript que conoces y amas, pero con tipos, clases, interfaces y muchas m\u00e1s herramientas que hacen que tu c\u00f3digo sea m\u00e1s robusto y escalable.</p> <p>\ud83d\udcca Visualizaci\u00f3n Comparativa:</p> Caracter\u00edstica JavaScript TypeScript Tipado Din\u00e1mico Est\u00e1tico (opcional) Errores en tiempo de ejecuci\u00f3n M\u00e1s propenso Detecci\u00f3n temprana de errores Soporte para IDE Limitado \ud83d\ude80 Potenciado con autocompletado y m\u00e1s Comunidad Muy grande En crecimiento continuo"},{"location":"ut2-introduccionatypescript/1queestypescript/#historia-y-evolucion-de-typescript","title":"\ud83d\udd70\ufe0f Historia y Evoluci\u00f3n de TypeScript","text":"<p>TypeScript fue creado por Microsoft en 2012 con un prop\u00f3sito claro: mejorar la experiencia de desarrollo en aplicaciones JavaScript de gran escala. Desde entonces, ha crecido hasta convertirse en uno de los lenguajes m\u00e1s populares en el mundo del desarrollo web. \ud83c\udf10</p> <p>\ud83d\udcc8 Evoluci\u00f3n Clave de TypeScript:</p> <ol> <li>2012: Lanzamiento inicial de TypeScript 0.8. \ud83c\udf89</li> <li>2014: TypeScript 1.0 se presenta con soporte completo para compilaci\u00f3n y an\u00e1lisis de tipos. \u2728</li> <li>2015: Integraci\u00f3n con Angular 2, lo que ayud\u00f3 a popularizar TypeScript en la comunidad de desarrolladores frontend.</li> <li>2018: TypeScript 3.0 trae mejoras significativas, como tipos condicionales y soporte de proyectos monorepo.</li> <li>Actualidad: TypeScript sigue evolucionando con nuevas versiones regulares que introducen caracter\u00edsticas avanzadas como la inferencia de tipos mejorada, soporte para bibliotecas de JavaScript modernas y herramientas de desarrollo m\u00e1s robustas. \ud83d\ude80</li> </ol>"},{"location":"ut2-introduccionatypescript/1queestypescript/#por-que-deberias-considerar-aprender-typescript","title":"\ud83d\udcdd \u00bfPor qu\u00e9 Deber\u00edas Considerar Aprender TypeScript?","text":"<ul> <li>Menos Errores, M\u00e1s Productividad: El tipado est\u00e1tico y la detecci\u00f3n temprana de errores te ayudan a escribir c\u00f3digo m\u00e1s limpio y seguro. \ud83d\udd27</li> <li>Mejor Experiencia de Desarrollo: Las herramientas avanzadas como el autocompletado, la navegaci\u00f3n del c\u00f3digo, y la refactorizaci\u00f3n segura hacen que el desarrollo sea m\u00e1s eficiente. \ud83d\udcbb</li> <li>Comunidad Activa y en Crecimiento: Con una comunidad vibrante, hay muchos recursos y soporte disponibles para aprender y crecer con TypeScript. \ud83c\udf31</li> </ul>"},{"location":"ut2-introduccionatypescript/2ventajasdeusartypescript/","title":"\ud83c\udf1f Ventajas de Usar TypeScript","text":""},{"location":"ut2-introduccionatypescript/2ventajasdeusartypescript/#tipado-estatico","title":"\ud83d\udee1\ufe0f Tipado Est\u00e1tico","text":"<p>TypeScript proporciona un sistema de tipado est\u00e1tico, lo que significa que se verifican los tipos de datos durante el tiempo de desarrollo, no en tiempo de ejecuci\u00f3n. Esto permite a los desarrolladores detectar errores antes de ejecutar el c\u00f3digo, haciendo que el desarrollo sea mucho m\u00e1s seguro y robusto. </p> <p>Ejemplo:</p> <pre><code>let nombre: string = \"Juan\";\nnombre = 42; // \u274c Error: Type 'number' is not assignable to type 'string'.\n</code></pre> <p>En JavaScript, este tipo de error solo se detectar\u00eda al ejecutar el c\u00f3digo, lo cual puede causar errores inesperados en producci\u00f3n. \u00a1Con TypeScript, puedes prevenir estos errores antes de que ocurran! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/2ventajasdeusartypescript/#mejora-en-la-mantenibilidad-del-codigo","title":"\ud83d\udee0\ufe0f Mejora en la Mantenibilidad del C\u00f3digo","text":"<p>Cuando los proyectos crecen y se vuelven m\u00e1s complejos, es fundamental que el c\u00f3digo sea f\u00e1cil de mantener. TypeScript ayuda a que el c\u00f3digo sea m\u00e1s legible y comprensible al permitirte definir claramente qu\u00e9 tipos de datos espera una funci\u00f3n o un m\u00e9todo, y qu\u00e9 debe devolver. </p> <p>Ejemplo:</p> <pre><code>interface Usuario {\n  nombre: string;\n  edad: number;\n}\n\nfunction mostrarUsuario(usuario: Usuario): void {\n  console.log(`Nombre: ${usuario.nombre}, Edad: ${usuario.edad}`);\n}\n</code></pre> <p>El uso de interfaces y tipos personalizados hace que el c\u00f3digo sea m\u00e1s f\u00e1cil de leer, entender y modificar, reduciendo el riesgo de introducir errores cuando se realizan cambios.</p>"},{"location":"ut2-introduccionatypescript/2ventajasdeusartypescript/#herramientas-de-desarrollo-avanzadas","title":"\u2699\ufe0f Herramientas de Desarrollo Avanzadas","text":"<p>TypeScript mejora la experiencia de desarrollo con herramientas avanzadas como autocompletado, navegaci\u00f3n del c\u00f3digo y refactorizaci\u00f3n segura. Esto no solo acelera el proceso de codificaci\u00f3n, sino que tambi\u00e9n ayuda a evitar errores comunes.</p> <p>Ventajas Clave:</p> <ul> <li>Autocompletado: Sugiere propiedades y m\u00e9todos disponibles mientras escribes. \u270d\ufe0f</li> <li>Refactorizaci\u00f3n segura: Cambia el nombre de una variable, funci\u00f3n, o clase y ve c\u00f3mo se actualizan todas las referencias autom\u00e1ticamente. \ud83d\udd04</li> <li>Navegaci\u00f3n: Navega a definiciones y referencias de funciones y variables con un solo clic. \ud83d\uddb1\ufe0f</li> </ul> <p>Ejemplo Visual:</p> <p>Cuando est\u00e1s usando Visual Studio Code o cualquier otro editor compatible, al escribir <code>usuario.</code> se te sugerir\u00e1n todas las propiedades y m\u00e9todos disponibles, basados en el tipo de <code>usuario</code> definido anteriormente:</p> <pre><code>usuario. // \ud83d\udc48 \u00a1Aparecen sugerencias \u00fatiles!\n</code></pre>"},{"location":"ut2-introduccionatypescript/2ventajasdeusartypescript/#deteccion-temprana-de-errores","title":"\ud83d\udea8 Detecci\u00f3n Temprana de Errores","text":"<p>TypeScript act\u00faa como un compilador con superpoderes que detecta errores de l\u00f3gica y tipo incluso antes de que ejecutes el c\u00f3digo. Esto es especialmente \u00fatil en equipos grandes donde diferentes desarrolladores est\u00e1n trabajando en diferentes partes del c\u00f3digo.</p> <p>Ejemplo:</p> <pre><code>function calcularArea(cuadrado: { lado: number }): number {\n  return cuadrado.lado * cuadrado.lado;\n}\n\ncalcularArea({ lado: \"10\" }); // \u274c Error: Type 'string' is not assignable to type 'number'.\n</code></pre> <p>En JavaScript, este error solo se detectar\u00eda cuando el c\u00f3digo se ejecuta, pero con TypeScript, puedes corregirlo de inmediato. \ud83d\udee0\ufe0f</p>"},{"location":"ut2-introduccionatypescript/2ventajasdeusartypescript/#resumen","title":"\ud83c\udf1f Resumen","text":"<p>TypeScript es una poderosa herramienta que no solo mejora la calidad del c\u00f3digo, sino que tambi\u00e9n optimiza la experiencia de desarrollo. Con caracter\u00edsticas como el tipado est\u00e1tico, la mantenibilidad del c\u00f3digo, herramientas de desarrollo avanzadas, y la detecci\u00f3n temprana de errores, \u00a1no es de extra\u00f1ar que cada vez m\u00e1s desarrolladores lo elijan para sus proyectos! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/3instalacionyconfiguraciondetypescript/","title":"\ud83d\ude80 Instalaci\u00f3n y Configuraci\u00f3n de TypeScript","text":"<p>\u00a1Vamos a poner manos a la obra! \ud83d\udcaa Para comenzar a utilizar TypeScript en tus proyectos, necesitamos instalar algunas herramientas y realizar algunas configuraciones b\u00e1sicas. Sigue estos sencillos pasos para comenzar.</p>"},{"location":"ut2-introduccionatypescript/3instalacionyconfiguraciondetypescript/#1-instalacion-de-nodejs-y-npm","title":"1\ufe0f\u20e3 Instalaci\u00f3n de Node.js y npm","text":"<p>Node.js es un entorno de ejecuci\u00f3n de JavaScript que nos permite ejecutar c\u00f3digo fuera del navegador. npm (Node Package Manager) es el gestor de paquetes de Node.js, y lo utilizaremos para instalar TypeScript.</p> <ol> <li>Descargar Node.js: Ve al sitio oficial de Node.js y descarga la \u00faltima versi\u00f3n estable para tu sistema operativo. \ud83c\udf10 (Generalmente, incluye npm autom\u00e1ticamente).</li> <li>Verificar la Instalaci\u00f3n: Despu\u00e9s de instalar Node.js, abre tu terminal o consola de comandos y ejecuta los siguientes comandos para verificar que tanto Node.js como npm est\u00e9n instalados correctamente:</li> </ol> <pre><code>node -v\nnpm -v\n</code></pre> <p>Deber\u00edas ver algo como esto:</p> <pre><code>v18.17.1\n9.6.7\n</code></pre> <p>\u00a1Felicidades! \ud83c\udf89 Ahora est\u00e1s listo para instalar TypeScript.</p>"},{"location":"ut2-introduccionatypescript/3instalacionyconfiguraciondetypescript/#2-instalacion-de-typescript-a-traves-de-npm","title":"2\ufe0f\u20e3 Instalaci\u00f3n de TypeScript a trav\u00e9s de npm","text":"<p>Para instalar TypeScript, utilizaremos npm. Solo necesitas ejecutar el siguiente comando en tu terminal o consola:</p> <pre><code>npm install -g typescript\n</code></pre> <p>El flag <code>-g</code> significa que estamos instalando TypeScript de forma global, lo que lo hace accesible desde cualquier proyecto o directorio en tu sistema.</p> <p>Verifica la instalaci\u00f3n de TypeScript ejecutando:</p> <pre><code>tsc -v\n</code></pre> <p>Deber\u00edas ver la versi\u00f3n de TypeScript instalada, como <code>Version 5.2.2</code>. \u00a1Genial, ya tienes TypeScript listo para usar! \ud83c\udf1f</p>"},{"location":"ut2-introduccionatypescript/3instalacionyconfiguraciondetypescript/#3-configuracion-del-archivo-tsconfigjson","title":"3\ufe0f\u20e3 Configuraci\u00f3n del archivo <code>tsconfig.json</code>","text":"<p>Una vez que TypeScript est\u00e9 instalado, es hora de configurar nuestro proyecto. Para ello, vamos a crear un archivo de configuraci\u00f3n llamado <code>tsconfig.json</code> en la ra\u00edz de tu proyecto. Este archivo le dice al compilador de TypeScript c\u00f3mo debe comportarse.</p> <p>Crea el archivo <code>tsconfig.json</code>:</p> <p>En tu terminal, ejecuta:</p> <pre><code>tsc --init\n</code></pre> <p>Este comando generar\u00e1 autom\u00e1ticamente un archivo <code>tsconfig.json</code> con configuraciones predeterminadas.</p> <p>Configuraci\u00f3n B\u00e1sica del <code>tsconfig.json</code>:</p> <p>Aqu\u00ed tienes una configuraci\u00f3n b\u00e1sica que puedes usar como punto de partida:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es6\", // \ud83c\udfaf Define a qu\u00e9 versi\u00f3n de JavaScript se compilar\u00e1\n    \"module\": \"commonjs\", // \ud83e\udde9 M\u00f3dulo utilizado para la importaci\u00f3n/exportaci\u00f3n\n    \"strict\": true, // \u26a0\ufe0f Activa todas las verificaciones de tipo estrictas\n    \"esModuleInterop\": true, // \u2705 Mejora la interoperabilidad con los m\u00f3dulos ES\n    \"outDir\": \"./dist\", // \ud83d\udcc2 Directorio de salida para los archivos compilados\n    \"rootDir\": \"./src\" // \ud83d\udcc2 Directorio ra\u00edz de los archivos fuente\n  },\n  \"include\": [\"src\"], // \ud83d\udcda Carpeta que contiene los archivos TypeScript\n  \"exclude\": [\"node_modules\"] // \ud83d\udeab Excluye archivos innecesarios\n}\n</code></pre> <p>Esta configuraci\u00f3n es bastante est\u00e1ndar y cubre los aspectos b\u00e1sicos. Dependiendo de tu proyecto, puedes personalizarla a\u00fan m\u00e1s.</p> <p>Organizaci\u00f3n del Proyecto:</p> <p>Se recomienda tener una estructura de proyecto clara, por ejemplo:</p> <pre><code>/mi-proyecto\n\u251c\u2500\u2500 /src        # Aqu\u00ed van todos tus archivos .ts\n\u251c\u2500\u2500 /dist       # Salida de compilaci\u00f3n de TypeScript\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 package.json\n</code></pre> <p>Compilaci\u00f3n de tu Proyecto TypeScript:</p> <p>Para compilar tu proyecto, ejecuta el siguiente comando:</p> <pre><code>tsc\n</code></pre> <p>Esto generar\u00e1 los archivos <code>.js</code> correspondientes en la carpeta <code>dist</code> seg\u00fan la configuraci\u00f3n del <code>tsconfig.json</code>. \ud83c\udfaf</p>"},{"location":"ut2-introduccionatypescript/3instalacionyconfiguraciondetypescript/#y-listo","title":"\ud83c\udfc1 \u00a1Y listo!","text":"<p>Ahora tienes TypeScript instalado, configurado, y listo para empezar a desarrollar. Con TypeScript, disfrutar\u00e1s de un desarrollo m\u00e1s seguro y eficiente. \u00a1Es hora de escribir c\u00f3digo de calidad! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/4primerproyecto/","title":"\ud83c\udf1f Primer Proyecto con TypeScript","text":"<p>\u00a1Es hora de poner manos a la obra y crear nuestro primer proyecto con TypeScript! \ud83d\ude80 Sigamos un camino paso a paso para escribir, compilar y ejecutar tu primer archivo TypeScript.</p>"},{"location":"ut2-introduccionatypescript/4primerproyecto/#1-creacion-de-un-archivo-typescript-simple","title":"1\ufe0f\u20e3 Creaci\u00f3n de un Archivo TypeScript Simple","text":"<p>Primero, vamos a crear un archivo TypeScript b\u00e1sico que muestre un mensaje en la consola. Para ello, sigue estos pasos:</p> <ol> <li>Crea una carpeta para tu proyecto:</li> </ol> <p>Abre tu terminal o consola de comandos y crea una nueva carpeta llamada <code>mi-primer-proyecto-ts</code>:</p> <p><pre><code>mkdir mi-primer-proyecto-ts\ncd mi-primer-proyecto-ts\n</code></pre> 2.  Inicia un proyecto de Node.js (opcional pero recomendado):</p> <p>Esto crear\u00e1 un archivo <code>package.json</code> que puede ser \u00fatil m\u00e1s adelante si necesitas instalar dependencias.</p> <p><pre><code>npm init -y\n</code></pre> 3. Crea tu primer archivo TypeScript:</p> <p>Dentro de la carpeta del proyecto, crea un archivo llamado <code>index.ts</code> y abrelo en tu editor de c\u00f3digo favorito. \ud83d\udcdd</p> <p>En el archivo <code>index.ts</code>, a\u00f1ade el siguiente c\u00f3digo:</p> <pre><code>function saludar(nombre: string): string {\n  return `\u00a1Hola, ${nombre}! Bienvenido a tu primer proyecto de TypeScript. \ud83c\udf89`;\n}\n\nconst mensaje = saludar(\"Desarrollador\");\nconsole.log(mensaje);\n</code></pre> <p>Este simple c\u00f3digo define una funci\u00f3n <code>saludar</code> que toma un <code>nombre</code> como argumento y devuelve un mensaje de bienvenida. Luego, se llama a la funci\u00f3n y se imprime el mensaje en la consola. \u00a1Sencillo y poderoso! \ud83d\udcaa</p>"},{"location":"ut2-introduccionatypescript/4primerproyecto/#2-compilacion-de-typescript-a-javascript","title":"2\ufe0f\u20e3 Compilaci\u00f3n de TypeScript a JavaScript","text":"<p>Una vez que hayas creado tu archivo TypeScript (<code>index.ts</code>), el siguiente paso es compilar ese archivo a JavaScript. La compilaci\u00f3n convierte el c\u00f3digo TypeScript en JavaScript, que puede ser entendido por cualquier navegador o entorno de ejecuci\u00f3n como Node.js.</p> <p>Compila el archivo TypeScript:</p> <p>En tu terminal, aseg\u00farate de estar en la carpeta de tu proyecto (<code>mi-primer-proyecto-ts</code>) y ejecuta el siguiente comando:</p> <pre><code>tsc index.ts\n</code></pre> <p>Este comando generar\u00e1 un archivo <code>index.js</code> en la misma carpeta. \u00a1Acabas de compilar tu primer archivo TypeScript! \ud83c\udf89</p> <p>Echa un vistazo al archivo compilado:</p> <p>Abre el archivo <code>index.js</code> y ver\u00e1s el c\u00f3digo convertido a JavaScript. Deber\u00eda verse algo as\u00ed:</p> <pre><code>function saludar(nombre) {\n    return \"\u00a1Hola, \" + nombre + \"! Bienvenido a tu primer proyecto de TypeScript. \ud83c\udf89\";\n}\nvar mensaje = saludar(\"Desarrollador\");\nconsole.log(mensaje);\n</code></pre> <p>Como puedes notar, TypeScript ha sido compilado a JavaScript simple y compatible.</p>"},{"location":"ut2-introduccionatypescript/4primerproyecto/#3-ejecucion-del-archivo-compilado","title":"3\ufe0f\u20e3 Ejecuci\u00f3n del Archivo Compilado","text":"<p>Ahora que has compilado tu archivo TypeScript a JavaScript, es hora de ejecutarlo para ver el resultado.</p> <p>Ejecuta el archivo JavaScript:</p> <p>Si tienes Node.js instalado, puedes ejecutar el archivo <code>index.js</code> directamente desde la terminal:</p> <pre><code>node index.js\n</code></pre> <p>Deber\u00edas ver el siguiente mensaje en tu consola:</p> <pre><code>\u00a1Hola, Desarrollador! Bienvenido a tu primer proyecto de TypeScript. \ud83c\udf89\n</code></pre> <p>\u00a1Y ah\u00ed lo tienes! \ud83d\ude80 Has creado, compilado y ejecutado tu primer proyecto con TypeScript.</p>"},{"location":"ut2-introduccionatypescript/4primerproyecto/#resumen-rapido","title":"\ud83c\udfc1 \u00a1Resumen R\u00e1pido!","text":"<p>En este primer proyecto con TypeScript, has aprendido a:</p> <ul> <li>\ud83d\udcc4 Crear un archivo TypeScript simple (<code>index.ts</code>).</li> <li>\u2699\ufe0f Compilar TypeScript a JavaScript usando <code>tsc</code>.</li> <li>\ud83c\udfc3 Ejecutar el archivo JavaScript compilado usando Node.js.</li> </ul> <p>Ahora est\u00e1s listo para explorar m\u00e1s funciones avanzadas de TypeScript y empezar a construir aplicaciones m\u00e1s complejas y robustas. \u00a1Sigue adelante, desarrollador! \ud83d\udcaa</p>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/","title":"\ud83c\udfa8 Tipos B\u00e1sicos en TypeScript","text":"<p>TypeScript ofrece un sistema de tipos est\u00e1ticos que mejora la seguridad y claridad del c\u00f3digo, ayud\u00e1ndote a detectar errores antes de que lleguen a tiempo de ejecuci\u00f3n. \u00a1Vamos a explorar los tipos m\u00e1s b\u00e1sicos y fundamentales que TypeScript tiene para ofrecer! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#1-tipos-primitivos","title":"1\ufe0f\u20e3 Tipos Primitivos","text":"<p>Los tipos primitivos en TypeScript son los mismos que en JavaScript, pero con un toque de tipado est\u00e1tico. Los m\u00e1s comunes son:</p> <ul> <li><code>string</code>: Para cadenas de texto.</li> <li><code>number</code>: Para n\u00fameros, ya sean enteros o decimales.</li> <li><code>boolean</code>: Para valores de verdadero (<code>true</code>) o falso (<code>false</code>).</li> </ul> <p>Ejemplos de C\u00f3digo:</p> <pre><code>let nombre: string = \"Juan\"; // \ud83d\udcdd Tipo de dato string\nlet edad: number = 30;       // \ud83d\udd22 Tipo de dato number\nlet esDesarrollador: boolean = true; // \u2705 Tipo de dato boolean\n\nconsole.log(`Hola, mi nombre es ${nombre} y tengo ${edad} a\u00f1os. \u00bfSoy desarrollador? ${esDesarrollador}`);\n</code></pre> <p>En este ejemplo, hemos definido tres variables (<code>nombre</code>, <code>edad</code>, y <code>esDesarrollador</code>) con tipos espec\u00edficos, lo que ayuda a evitar errores como asignar un n\u00famero a una variable que espera una cadena. \ud83c\udfaf</p>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#2-tipos-compuestos","title":"2\ufe0f\u20e3 Tipos Compuestos","text":"<p>Los tipos compuestos permiten combinar m\u00faltiples valores bajo un solo tipo. Estos incluyen <code>array</code>, <code>tuple</code> y <code>enum</code>.</p>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#arrays","title":"\ud83d\udd39 Arrays","text":"<p>Los arrays son listas ordenadas de valores del mismo tipo. Puedes definir un array de n\u00fameros, strings, booleanos, etc.</p> <p>Ejemplo de Array:</p> <pre><code>let listaNumeros: number[] = [1, 2, 3, 4, 5]; // \ud83d\udcda Array de n\u00fameros\nlet listaNombres: string[] = [\"Ana\", \"Pedro\", \"Luis\"]; // \ud83d\udcda Array de strings\n\nconsole.log(listaNumeros); // [1, 2, 3, 4, 5]\nconsole.log(listaNombres); // [\"Ana\", \"Pedro\", \"Luis\"]\n</code></pre>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#tuplas-tuples","title":"\ud83d\udd39 Tuplas (Tuples)","text":"<p>Las tuplas permiten definir un array con un n\u00famero fijo de elementos con tipos espec\u00edficos. Son \u00fatiles cuando necesitas representar un conjunto fijo de datos.</p> <p>Ejemplo de Tuple:</p> <pre><code>let persona: [string, number] = [\"Maria\", 25]; // \ud83d\udc65 Una tuple con nombre y edad\n\nconsole.log(`Nombre: ${persona[0]}, Edad: ${persona[1]}`); // Nombre: Maria, Edad: 25\n</code></pre> <p>Aqu\u00ed, <code>persona</code> es una tupla que siempre debe tener un <code>string</code> como primer valor y un <code>number</code> como segundo valor.</p>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#enumeraciones-enums","title":"\ud83d\udd39 Enumeraciones (Enums)","text":"<p>Los enums son una forma de dar nombres m\u00e1s legibles a conjuntos de valores num\u00e9ricos o de strings. Son especialmente \u00fatiles cuando se trabaja con valores que representan estados, roles, etc.</p> <p>Ejemplo de Enum:</p> <pre><code>enum Color { Rojo, Verde, Azul } // \ud83c\udf08 Definimos un enum para colores\n\nlet colorFavorito: Color = Color.Verde; // Usamos el enum\n\nconsole.log(`Mi color favorito es: ${Color[colorFavorito]}`); // Mi color favorito es: Verde\n</code></pre>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#3-tipos-especiales","title":"3\ufe0f\u20e3 Tipos Especiales","text":"<p>TypeScript tambi\u00e9n ofrece tipos especiales para casos m\u00e1s avanzados y espec\u00edficos:</p>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#any","title":"\ud83d\udd38 <code>any</code>","text":"<p>El tipo <code>any</code> se utiliza cuando no est\u00e1s seguro del tipo de una variable. Es flexible, pero debe usarse con cuidado porque anula los beneficios del tipado est\u00e1tico.</p> <p>Ejemplo de <code>any</code>:</p> <pre><code>let variable: any = \"Hola\"; // Puede ser cualquier cosa\nvariable = 42; // \ud83d\udd04 Se puede cambiar a un n\u00famero sin problemas\n</code></pre>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#unknown","title":"\ud83d\udd38 <code>unknown</code>","text":"<p>El tipo <code>unknown</code> es similar a <code>any</code>, pero m\u00e1s seguro, ya que fuerza una comprobaci\u00f3n de tipo antes de realizar ciertas operaciones.</p> <p>Ejemplo de <code>unknown</code>:</p> <pre><code>let valorDesconocido: unknown = 4;\nif (typeof valorDesconocido === \"number\") {\n  console.log(valorDesconocido + 2); // Solo permite la operaci\u00f3n si es un n\u00famero\n}\n</code></pre>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#never","title":"\ud83d\udd38 <code>never</code>","text":"<p>El tipo <code>never</code> representa un valor que nunca ocurre. Se usa generalmente en funciones que lanzan excepciones o que nunca terminan.</p> <p>Ejemplo de <code>never</code>:</p> <pre><code>function error(mensaje: string): never {\n  throw new Error(mensaje); // \ud83d\udca5 Lanza un error y no devuelve nada\n}\n</code></pre>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#void","title":"\ud83d\udd38 <code>void</code>","text":"<p>El tipo <code>void</code> se utiliza para funciones que no devuelven un valor.</p> <p>Ejemplo de <code>void</code>:</p> <pre><code>function saludar(): void {\n  console.log(\"\u00a1Hola a todos!\"); // No devuelve nada\n}\n</code></pre>"},{"location":"ut2-introduccionatypescript/5tiposbasicos/#resumen-rapido","title":"\ud83c\udf1f \u00a1Resumen R\u00e1pido!","text":"<p>TypeScript ofrece una amplia gama de tipos que ayudan a crear un c\u00f3digo m\u00e1s seguro, legible y f\u00e1cil de mantener. Con tipos primitivos como <code>string</code>, <code>number</code>, y <code>boolean</code>, tipos compuestos como <code>array</code>, <code>tuple</code>, y <code>enum</code>, y tipos especiales como <code>any</code>, <code>unknown</code>, <code>never</code>, y <code>void</code>, tienes todo lo que necesitas para desarrollar aplicaciones robustas y de alta calidad. \u00a1Empieza a usar estos tipos hoy mismo y experimenta la diferencia! \ud83d\udcaa</p>"},{"location":"ut2-introduccionatypescript/6condicionales/","title":"\ud83e\udde9 Condicionales en TypeScript","text":"<p>Las condicionales son estructuras fundamentales en cualquier lenguaje de programaci\u00f3n. En TypeScript, podemos utilizar <code>if</code>, <code>else if</code>, <code>else</code>, operadores ternarios y estructuras <code>switch</code> para tomar decisiones en funci\u00f3n de ciertas condiciones. \u00a1Vamos a explorarlas con ejemplos pr\u00e1cticos! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/6condicionales/#1-uso-de-if-else-if-else","title":"1\ufe0f\u20e3 Uso de <code>if</code>, <code>else if</code>, <code>else</code>","text":"<p>Los condicionales <code>if</code>, <code>else if</code>, y <code>else</code> son b\u00e1sicos pero poderosos. Se utilizan para ejecutar un bloque de c\u00f3digo solo si se cumple una condici\u00f3n espec\u00edfica.</p> <p>Sintaxis B\u00e1sica:</p> <pre><code>if (condicion) {\n  // C\u00f3digo que se ejecuta si la condici\u00f3n es verdadera\n} else if (otraCondicion) {\n  // C\u00f3digo que se ejecuta si la primera condici\u00f3n es falsa y esta es verdadera\n} else {\n  // C\u00f3digo que se ejecuta si ninguna de las condiciones anteriores es verdadera\n}\n</code></pre> <p>Ejemplo de Uso:</p> <pre><code>let edad: number = 20;\n\nif (edad &lt; 13) {\n  console.log(\"Eres un ni\u00f1o \ud83d\udc76\");\n} else if (edad &lt; 20) {\n  console.log(\"Eres un adolescente \ud83e\uddd1\");\n} else if (edad &lt; 65) {\n  console.log(\"Eres un adulto \ud83e\uddd4\");\n} else {\n  console.log(\"Eres un adulto mayor \ud83d\udc75\");\n}\n</code></pre> <p>En este ejemplo, se eval\u00faa la edad de una persona y se imprime un mensaje en la consola basado en la categor\u00eda de edad. \u00a1Simple pero eficaz! \u2728</p>"},{"location":"ut2-introduccionatypescript/6condicionales/#2-operador-ternario","title":"2\ufe0f\u20e3 Operador Ternario","text":"<p>El operador ternario es una forma m\u00e1s concisa de escribir condicionales <code>if-else</code>. Es especialmente \u00fatil cuando necesitas asignar un valor basado en una condici\u00f3n.</p> <p>Sintaxis:</p> <pre><code>condicion ? expresionSiVerdadera : expresionSiFalsa;\n</code></pre> <p>Ejemplo de Uso:</p> <pre><code>let esProgramador: boolean = true;\nlet mensaje: string = esProgramador ? \"\u00a1Bienvenido, desarrollador! \ud83d\udc68\u200d\ud83d\udcbb\" : \"\u00a1Hola! \ud83d\udc4b\";\n\nconsole.log(mensaje); // \u00a1Bienvenido, desarrollador! \ud83d\udc68\u200d\ud83d\udcbb\n</code></pre> <p>En este caso, el operador ternario eval\u00faa la condici\u00f3n <code>esProgramador</code> y asigna el valor correspondiente a la variable <code>mensaje</code>. \u00a1Todo en una sola l\u00ednea! \ud83d\udd25</p>"},{"location":"ut2-introduccionatypescript/6condicionales/#3-estructuras-de-control-switch","title":"3\ufe0f\u20e3 Estructuras de Control <code>switch</code>","text":"<p>La estructura <code>switch</code> es \u00fatil cuando tienes m\u00faltiples condiciones que deseas verificar contra una misma variable. En lugar de escribir m\u00faltiples <code>if-else</code>, <code>switch</code> permite organizar el c\u00f3digo de manera m\u00e1s limpia y legible.</p> <p>Sintaxis B\u00e1sica:</p> <pre><code>switch (expresion) {\n  case valor1:\n    // C\u00f3digo que se ejecuta si la expresi\u00f3n es igual a valor1\n    break;\n  case valor2:\n    // C\u00f3digo que se ejecuta si la expresi\u00f3n es igual a valor2\n    break;\n  default:\n    // C\u00f3digo que se ejecuta si ninguno de los casos anteriores coincide\n    break;\n}\n</code></pre> <p>Ejemplo de Uso:</p> <pre><code>let diaSemana: number = 3; // 1 para Lunes, 2 para Martes, etc.\n\nswitch (diaSemana) {\n  case 1:\n    console.log(\"Hoy es Lunes \ud83c\udf1e\");\n    break;\n  case 2:\n    console.log(\"Hoy es Martes \ud83c\udf2e\");\n    break;\n  case 3:\n    console.log(\"Hoy es Mi\u00e9rcoles \ud83d\udc2b\");\n    break;\n  case 4:\n    console.log(\"Hoy es Jueves \ud83c\udf55\");\n    break;\n  case 5:\n    console.log(\"Hoy es Viernes \ud83c\udf89\");\n    break;\n  case 6:\n    console.log(\"Hoy es S\u00e1bado \ud83c\udfd6\ufe0f\");\n    break;\n  case 7:\n    console.log(\"Hoy es Domingo \ud83c\udf73\");\n    break;\n  default:\n    console.log(\"D\u00eda no v\u00e1lido \u274c\");\n}\n</code></pre> <p>En este ejemplo, el <code>switch</code> eval\u00faa el valor de <code>diaSemana</code> y ejecuta el bloque de c\u00f3digo correspondiente. Si el valor no coincide con ninguno de los casos, se ejecuta el bloque <code>default</code>. \u00a1Muy pr\u00e1ctico para trabajar con m\u00faltiples opciones! \ud83d\udcbc</p>"},{"location":"ut2-introduccionatypescript/6condicionales/#resumen-rapido","title":"\ud83c\udf1f \u00a1Resumen R\u00e1pido!","text":"<p>TypeScript ofrece una variedad de estructuras condicionales que te permiten manejar la l\u00f3gica de control en tu c\u00f3digo de manera eficiente:</p> <ul> <li><code>if</code>, <code>else if</code>, <code>else</code>: Perfecto para condicionales b\u00e1sicas y m\u00faltiples ramas.</li> <li>Operador Ternario: Ideal para condicionales concisas y asignaciones r\u00e1pidas.</li> <li><code>switch</code>: Excelente para manejar m\u00faltiples condiciones que dependen de una misma variable.</li> </ul> <p>Con estas herramientas, puedes tomar decisiones complejas de manera limpia y eficaz en tus proyectos TypeScript. \u00a1Ahora es tu turno de implementarlas y mejorar tu c\u00f3digo! \ud83d\udcaa</p>"},{"location":"ut2-introduccionatypescript/7bucles/","title":"\ud83d\udd04 Bucles en TypeScript","text":"<p>Los bucles son fundamentales en la programaci\u00f3n, ya que te permiten ejecutar un bloque de c\u00f3digo repetidamente hasta que se cumpla una condici\u00f3n. En TypeScript, contamos con varios tipos de bucles para cubrir diferentes necesidades: <code>for</code>, <code>while</code>, <code>do-while</code>, y las estructuras de iteraci\u00f3n <code>for...of</code> y <code>for...in</code>. \u00a1Vamos a explorarlos! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/7bucles/#1-bucle-for","title":"1\ufe0f\u20e3 Bucle <code>for</code>","text":"<p>El bucle <code>for</code> es el m\u00e1s com\u00fan y se utiliza cuando sabes cu\u00e1ntas veces necesitas iterar sobre un bloque de c\u00f3digo. Es ideal para iterar sobre arrays, ejecutar l\u00f3gica repetitiva o contar en un rango espec\u00edfico.</p> <p>Sintaxis:</p> <pre><code>for (inicializacion; condicion; actualizacion) {\n  // C\u00f3digo que se ejecuta en cada iteraci\u00f3n\n}\n</code></pre> <p>Ejemplo de Uso:</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(`Iteraci\u00f3n n\u00famero: ${i} \ud83d\ude80`);\n}\n</code></pre> <p>Este bucle <code>for</code> imprimir\u00e1 \"Iteraci\u00f3n n\u00famero: 0\", \"Iteraci\u00f3n n\u00famero: 1\", y as\u00ed sucesivamente hasta 4. \u00a1Perfecto para contar y ejecutar algo repetidamente! \ud83d\udd22</p>"},{"location":"ut2-introduccionatypescript/7bucles/#2-bucle-while","title":"2\ufe0f\u20e3 Bucle <code>while</code>","text":"<p>El bucle <code>while</code> ejecuta un bloque de c\u00f3digo siempre que la condici\u00f3n sea <code>true</code>. Es \u00fatil cuando no est\u00e1s seguro del n\u00famero exacto de iteraciones que necesitas, pero sabes la condici\u00f3n que debe cumplirse.</p> <p>Sintaxis:</p> <pre><code>while (condicion) {\n  // C\u00f3digo que se ejecuta mientras la condici\u00f3n sea verdadera\n}\n</code></pre> <p>Ejemplo de Uso:</p> <pre><code>let contador: number = 0;\n\nwhile (contador &lt; 3) {\n  console.log(`El contador es: ${contador} \u23f3`);\n  contador++;\n}\n</code></pre> <p>Este bucle continuar\u00e1 ejecut\u00e1ndose mientras el valor de <code>contador</code> sea menor que 3. En cada iteraci\u00f3n, <code>contador</code> se incrementa en 1.</p>"},{"location":"ut2-introduccionatypescript/7bucles/#3-bucle-do-while","title":"3\ufe0f\u20e3 Bucle <code>do-while</code>","text":"<p>El bucle <code>do-while</code> es similar al <code>while</code>, pero con una diferencia importante: siempre ejecuta el bloque de c\u00f3digo al menos una vez antes de comprobar la condici\u00f3n. Es \u00fatil cuando quieres ejecutar algo primero y luego verificar la condici\u00f3n.</p> <p>Sintaxis:</p> <pre><code>do {\n  // C\u00f3digo que se ejecuta al menos una vez\n} while (condicion);\n</code></pre> <p>Ejemplo de Uso:</p> <pre><code>let numero: number = 5;\n\ndo {\n  console.log(`N\u00famero actual: ${numero} \ud83d\udd01`);\n  numero--;\n} while (numero &gt; 0);\n</code></pre> <p>En este ejemplo, el c\u00f3digo dentro del <code>do</code> se ejecutar\u00e1 primero y luego verificar\u00e1 la condici\u00f3n <code>numero &gt; 0</code>. \u00a1Ideal para cuando necesitas ejecutar algo al menos una vez! \ud83d\udeb4\u200d\u2642\ufe0f</p>"},{"location":"ut2-introduccionatypescript/7bucles/#4-iteracion-sobre-arrays-y-objetos","title":"4\ufe0f\u20e3 Iteraci\u00f3n sobre Arrays y Objetos","text":"<p>TypeScript ofrece estructuras como <code>for...of</code> y <code>for...in</code> para iterar de manera m\u00e1s eficiente sobre arrays y objetos. Veamos c\u00f3mo funcionan:</p>"},{"location":"ut2-introduccionatypescript/7bucles/#forof","title":"\ud83d\udd39 <code>for...of</code>","text":"<p><code>for...of</code> se utiliza para iterar sobre los valores de un iterable (como arrays, strings, etc.). Es especialmente \u00fatil para trabajar con los elementos de un array directamente.</p> <p>Ejemplo de Uso:</p> <pre><code>let frutas: string[] = [\"\ud83c\udf4e Manzana\", \"\ud83c\udf4c Banana\", \"\ud83c\udf53 Fresa\"];\n\nfor (let fruta of frutas) {\n  console.log(`Me gusta la ${fruta}`);\n}\n</code></pre> <p>Este bucle imprimir\u00e1 \"Me gusta la \ud83c\udf4e Manzana\", \"Me gusta la \ud83c\udf4c Banana\", etc. Es muy intuitivo y f\u00e1cil de leer. \ud83c\udf4f</p>"},{"location":"ut2-introduccionatypescript/7bucles/#forin","title":"\ud83d\udd39 <code>for...in</code>","text":"<p><code>for...in</code> se utiliza para iterar sobre las propiedades de un objeto. Es ideal cuando necesitas trabajar con las claves de un objeto, en lugar de los valores.</p> <p>Ejemplo de Uso:</p> <pre><code>let persona = { nombre: \"Ana\", edad: 28, ocupacion: \"Ingeniera\" };\n\nfor (let propiedad in persona) {\n  console.log(`${propiedad}: ${persona[propiedad as keyof typeof persona]}`);\n}\n</code></pre> <p>Este bucle imprimir\u00e1:</p> <pre><code>nombre: Ana\nedad: 28\nocupacion: Ingeniera\n</code></pre> <p>Como ves, <code>for...in</code> es perfecto para recorrer todas las propiedades de un objeto. \ud83e\udde9</p>"},{"location":"ut2-introduccionatypescript/7bucles/#resumen-rapido","title":"\ud83c\udf1f \u00a1Resumen R\u00e1pido!","text":"<p>TypeScript proporciona una variedad de bucles para satisfacer diferentes necesidades de programaci\u00f3n:</p> <ul> <li><code>for</code>: Ideal para iteraciones con un n\u00famero conocido de veces.</li> <li><code>while</code>: \u00datil cuando la condici\u00f3n es din\u00e1mica y desconocida.</li> <li><code>do-while</code>: Perfecto para cuando necesitas ejecutar un bloque al menos una vez.</li> <li><code>for...of</code>: Excelente para iterar sobre los valores de arrays u otros iterables.</li> <li><code>for...in</code>: Ideal para recorrer propiedades de objetos.</li> </ul> <p>\u00a1Con estas herramientas, puedes manejar bucles e iteraciones de manera eficiente y elegante en TypeScript! \ud83c\udf10</p>"},{"location":"ut2-introduccionatypescript/8objetos/","title":"\ud83c\udfd7\ufe0f Objetos en TypeScript","text":"<p>Los objetos son fundamentales en JavaScript y TypeScript para representar entidades del mundo real o estructuras complejas de datos. En TypeScript, podemos definir objetos, darles un tipado espec\u00edfico usando interfaces o tipos, y crear m\u00e9todos y propiedades para manipularlos de manera segura y eficiente. \u00a1Vamos a ver c\u00f3mo hacerlo! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/8objetos/#1-definicion-y-uso-de-objetos","title":"1\ufe0f\u20e3 Definici\u00f3n y Uso de Objetos","text":"<p>En TypeScript, los objetos se definen de la misma manera que en JavaScript, utilizando pares clave-valor. Sin embargo, TypeScript te permite ser m\u00e1s expl\u00edcito y seguro con el tipado.</p> <p>Ejemplo de Definici\u00f3n de Objeto:</p> <pre><code>const persona = {\n  nombre: \"Juan\",\n  edad: 30,\n  esDesarrollador: true\n};\n\nconsole.log(`Nombre: ${persona.nombre}, Edad: ${persona.edad}, \u00bfEs desarrollador? ${persona.esDesarrollador ? 'S\u00ed' : 'No'} \ud83d\udc68\u200d\ud83d\udcbb`);\n</code></pre> <p>En este ejemplo, <code>persona</code> es un objeto con tres propiedades: <code>nombre</code>, <code>edad</code>, y <code>esDesarrollador</code>. Podemos acceder a cada propiedad usando la notaci\u00f3n de punto (<code>.</code>).</p>"},{"location":"ut2-introduccionatypescript/8objetos/#2-tipado-de-objetos-con-interfaces-y-tipos","title":"2\ufe0f\u20e3 Tipado de Objetos con Interfaces y Tipos","text":"<p>Una de las grandes ventajas de TypeScript es la capacidad de definir tipos espec\u00edficos para los objetos. Esto se puede hacer utilizando interfaces o tipos (<code>type</code>).</p>"},{"location":"ut2-introduccionatypescript/8objetos/#uso-de-interfaces","title":"\ud83d\udd39 Uso de Interfaces","text":"<p>Las interfaces son una forma poderosa de definir la forma de un objeto. Nos permiten definir qu\u00e9 propiedades y m\u00e9todos debe tener un objeto.</p> <p>Ejemplo de Interface:</p> <pre><code>interface Persona {\n  nombre: string;\n  edad: number;\n  esDesarrollador: boolean;\n}\n\nconst usuario: Persona = {\n  nombre: \"Ana\",\n  edad: 28,\n  esDesarrollador: false\n};\n\nconsole.log(`Usuario: ${usuario.nombre}, Edad: ${usuario.edad}, \u00bfEs desarrollador? ${usuario.esDesarrollador ? 'S\u00ed' : 'No'} \ud83d\udc69\u200d\ud83d\udcbb`);\n</code></pre> <p>En este ejemplo, la interface <code>Persona</code> define la estructura de un objeto que debe tener <code>nombre</code>, <code>edad</code>, y <code>esDesarrollador</code> con sus respectivos tipos. Al usar esta interface para tipar el objeto <code>usuario</code>, TypeScript te avisar\u00e1 si intentas a\u00f1adir una propiedad que no est\u00e9 definida en la interface.</p>"},{"location":"ut2-introduccionatypescript/8objetos/#uso-de-tipos-type","title":"\ud83d\udd39 Uso de Tipos (<code>type</code>)","text":"<p>El tipo (<code>type</code>) es otra forma de definir la forma de un objeto en TypeScript, y puede ser usado de manera muy similar a las interfaces.</p> <p>Ejemplo de <code>type</code>:</p> <pre><code>type Producto = {\n  nombre: string;\n  precio: number;\n  enStock: boolean;\n};\n\nconst articulo: Producto = {\n  nombre: \"Laptop\",\n  precio: 1500,\n  enStock: true\n};\n\nconsole.log(`Producto: ${articulo.nombre}, Precio: $${articulo.precio}, \u00bfEn stock? ${articulo.enStock ? 'S\u00ed' : 'No'} \ud83d\udcbb`);\n</code></pre> <p>El uso de <code>type</code> es muy similar al de <code>interface</code>, pero es m\u00e1s flexible y puede combinarse con otros tipos (uni\u00f3n, intersecci\u00f3n).</p>"},{"location":"ut2-introduccionatypescript/8objetos/#3-metodos-y-propiedades-en-objetos","title":"3\ufe0f\u20e3 M\u00e9todos y Propiedades en Objetos","text":"<p>En TypeScript, un m\u00e9todo es simplemente una funci\u00f3n dentro de un objeto. Puedes definir m\u00e9todos dentro de objetos para realizar operaciones o calcular valores basados en las propiedades del objeto.</p> <p>Ejemplo de Objeto con M\u00e9todos:</p> <pre><code>interface Circulo {\n  radio: number;\n  calcularArea: () =&gt; number; // M\u00e9todo que retorna un n\u00famero\n}\n\nconst miCirculo: Circulo = {\n  radio: 5,\n  calcularArea: function (): number {\n    return Math.PI * this.radio ** 2;\n  }\n};\n\nconsole.log(`El \u00e1rea del c\u00edrculo es: ${miCirculo.calcularArea().toFixed(2)} \ud83d\udfe0`);\n</code></pre> <p>En este ejemplo, <code>miCirculo</code> es un objeto que implementa la interface <code>Circulo</code> y tiene un m\u00e9todo <code>calcularArea</code> que devuelve el \u00e1rea del c\u00edrculo basado en su radio. La notaci\u00f3n de m\u00e9todo <code>function()</code> o <code>() =&gt;</code> puede ser utilizada dependiendo de tu preferencia y del uso de <code>this</code>.</p>"},{"location":"ut2-introduccionatypescript/8objetos/#propiedades-opcionales-y-metodos-con-parametros","title":"\ud83d\udccc Propiedades Opcionales y M\u00e9todos con Par\u00e1metros","text":"<p>Puedes definir propiedades opcionales en tus interfaces utilizando el s\u00edmbolo <code>?</code>. Tambi\u00e9n puedes definir m\u00e9todos que aceptan par\u00e1metros para ser m\u00e1s flexibles.</p> <p>Ejemplo de Propiedad Opcional y M\u00e9todo con Par\u00e1metro:</p> <pre><code>interface Vehiculo {\n  marca: string;\n  modelo: string;\n  anio?: number; // Propiedad opcional\n  obtenerDetalles: (esCompleto: boolean) =&gt; string; // M\u00e9todo con par\u00e1metro\n}\n\nconst miAuto: Vehiculo = {\n  marca: \"Toyota\",\n  modelo: \"Corolla\",\n  obtenerDetalles: (esCompleto) =&gt; esCompleto ? `Marca: ${miAuto.marca}, Modelo: ${miAuto.modelo} \ud83d\ude97` : `${miAuto.marca} \ud83d\ude99`\n};\n\nconsole.log(miAuto.obtenerDetalles(true));  // Marca: Toyota, Modelo: Corolla \ud83d\ude97\n</code></pre> <p>En este ejemplo, <code>anio</code> es opcional, y el m\u00e9todo <code>obtenerDetalles</code> puede aceptar un par\u00e1metro <code>esCompleto</code> para decidir qu\u00e9 informaci\u00f3n mostrar.</p>"},{"location":"ut2-introduccionatypescript/8objetos/#resumen-rapido","title":"\ud83c\udf1f \u00a1Resumen R\u00e1pido!","text":"<p>TypeScript proporciona herramientas poderosas para trabajar con objetos:</p> <ul> <li>Definici\u00f3n y Uso de Objetos: F\u00e1cil creaci\u00f3n y acceso a las propiedades del objeto.</li> <li>Tipado de Objetos con Interfaces y Tipos: Mejora la seguridad y claridad del c\u00f3digo.</li> <li>M\u00e9todos y Propiedades en Objetos: Agrega funcionalidad y manipula datos con m\u00e9todos.</li> </ul> <p>\u00a1Utiliza estas caracter\u00edsticas de TypeScript para escribir c\u00f3digo m\u00e1s robusto, claro y mantenible! \ud83d\udcaa</p>"},{"location":"ut2-introduccionatypescript/9funcionesyparametros/","title":"\ud83d\udd27 Funciones y Tipado de Par\u00e1metros en TypeScript","text":"<p>Las funciones son bloques de c\u00f3digo que permiten reutilizar l\u00f3gica en diferentes partes de un programa. En TypeScript, podemos declarar funciones, definir tipos para sus par\u00e1metros y valores de retorno, y manejar par\u00e1metros opcionales y predeterminados. \u00a1Vamos a explorar estos conceptos para hacer tu c\u00f3digo m\u00e1s seguro y eficiente! \ud83d\ude80</p>"},{"location":"ut2-introduccionatypescript/9funcionesyparametros/#1-declaracion-de-funciones-en-typescript","title":"1\ufe0f\u20e3 Declaraci\u00f3n de Funciones en TypeScript","text":"<p>Al igual que en JavaScript, las funciones en TypeScript se pueden declarar de varias maneras, como funciones nombradas, funciones an\u00f3nimas, y funciones flecha. Sin embargo, TypeScript te permite definir tipos espec\u00edficos para los par\u00e1metros y el valor de retorno, lo que a\u00f1ade un nivel extra de seguridad.</p> <p>Funci\u00f3n Nombrada:</p> <pre><code>function saludar(nombre: string): void {\n  console.log(`\u00a1Hola, ${nombre}! \ud83d\udc4b`);\n}\n\nsaludar(\"Ana\"); // \u00a1Hola, Ana! \ud83d\udc4b\n</code></pre> <p>En este ejemplo, <code>nombre</code> es un par\u00e1metro de tipo <code>string</code> y el valor de retorno es <code>void</code>, lo que significa que la funci\u00f3n no devuelve ning\u00fan valor.</p> <p>Funci\u00f3n Flecha:</p> <pre><code>const multiplicar = (a: number, b: number): number =&gt; {\n  return a * b;\n};\n\nconsole.log(multiplicar(3, 4)); // 12\n</code></pre> <p>Las funciones flecha son una forma concisa y moderna de definir funciones. Aqu\u00ed, <code>a</code> y <code>b</code> son par\u00e1metros de tipo <code>number</code>, y la funci\u00f3n devuelve un <code>number</code>.</p>"},{"location":"ut2-introduccionatypescript/9funcionesyparametros/#2-tipado-de-parametros-y-retorno","title":"2\ufe0f\u20e3 Tipado de Par\u00e1metros y Retorno","text":"<p>El tipado en TypeScript no solo se aplica a las variables, sino tambi\u00e9n a los par\u00e1metros y valores de retorno de las funciones. Esto permite evitar errores comunes y hacer que el c\u00f3digo sea m\u00e1s legible.</p> <p>Ejemplo con Tipado de Par\u00e1metros y Retorno:</p> <pre><code>function sumar(a: number, b: number): number {\n  return a + b;\n}\n\nlet resultado: number = sumar(5, 10);\nconsole.log(`La suma es: ${resultado} \u2795`); // La suma es: 15 \u2795\n</code></pre> <p>En este ejemplo, hemos definido los tipos de <code>a</code> y <code>b</code> como <code>number</code>, y tambi\u00e9n especificamos que la funci\u00f3n <code>sumar</code> devuelve un <code>number</code>. Si intentamos devolver cualquier otro tipo de dato, TypeScript mostrar\u00e1 un error. \ud83d\uded1</p>"},{"location":"ut2-introduccionatypescript/9funcionesyparametros/#3-funciones-opcionales-y-con-parametros-predeterminados","title":"3\ufe0f\u20e3 Funciones Opcionales y con Par\u00e1metros Predeterminados","text":"<p>TypeScript permite definir par\u00e1metros opcionales y valores predeterminados para funciones, proporcionando flexibilidad adicional al escribir c\u00f3digo.</p>"},{"location":"ut2-introduccionatypescript/9funcionesyparametros/#parametros-opcionales","title":"\ud83d\udd39 Par\u00e1metros Opcionales","text":"<p>Un par\u00e1metro opcional es un par\u00e1metro que no es necesario pasar cuando se llama a la funci\u00f3n. Se declara utilizando el signo de interrogaci\u00f3n (<code>?</code>) despu\u00e9s del nombre del par\u00e1metro.</p> <p>Ejemplo de Funci\u00f3n con Par\u00e1metro Opcional:</p> <pre><code>function mostrarInfo(nombre: string, edad?: number): string {\n  return edad ? `${nombre} tiene ${edad} a\u00f1os.` : `${nombre} no especific\u00f3 su edad.`;\n}\n\nconsole.log(mostrarInfo(\"Carlos\")); // Carlos no especific\u00f3 su edad.\nconsole.log(mostrarInfo(\"Carlos\", 25)); // Carlos tiene 25 a\u00f1os.\n</code></pre> <p>En este ejemplo, <code>edad</code> es un par\u00e1metro opcional. Si se proporciona, se muestra la edad; de lo contrario, se muestra un mensaje predeterminado. \u2728</p>"},{"location":"ut2-introduccionatypescript/9funcionesyparametros/#parametros-con-valores-predeterminados","title":"\ud83d\udd39 Par\u00e1metros con Valores Predeterminados","text":"<p>Los par\u00e1metros con valores predeterminados permiten definir un valor por defecto que se utilizar\u00e1 si no se proporciona ning\u00fan valor al llamar a la funci\u00f3n.</p> <p>Ejemplo de Funci\u00f3n con Par\u00e1metros Predeterminados:</p> <pre><code>function calcularDescuento(precio: number, descuento: number = 0.10): number {\n  return precio - (precio * descuento);\n}\n\nconsole.log(`Precio con descuento: $${calcularDescuento(100)} \ud83d\uded2`); // Precio con descuento: $90\nconsole.log(`Precio con descuento: $${calcularDescuento(100, 0.20)} \ud83d\udecd\ufe0f`); // Precio con descuento: $80\n</code></pre> <p>En este ejemplo, el par\u00e1metro <code>descuento</code> tiene un valor predeterminado de <code>0.10</code> (10%). Si no se proporciona un descuento al llamar a la funci\u00f3n, se aplicar\u00e1 el valor predeterminado.</p>"},{"location":"ut2-introduccionatypescript/9funcionesyparametros/#resumen-rapido","title":"\ud83c\udf1f \u00a1Resumen R\u00e1pido!","text":"<p>TypeScript ofrece una sintaxis poderosa para trabajar con funciones:</p> <ul> <li>Declaraci\u00f3n de Funciones: Definir funciones con sintaxis moderna y a\u00f1adir tipos espec\u00edficos.</li> <li>Tipado de Par\u00e1metros y Retorno: Aumenta la seguridad y legibilidad del c\u00f3digo.</li> <li>Funciones Opcionales y con Par\u00e1metros Predeterminados: A\u00f1ade flexibilidad y robustez al manejo de funciones.</li> </ul> <p>Con estas caracter\u00edsticas, puedes escribir c\u00f3digo m\u00e1s claro, seguro y eficiente en TypeScript. \u00a1Explora todas estas opciones y mejora tus habilidades de programaci\u00f3n hoy mismo! \ud83d\udcaa</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo-sol/","title":"Extra ejercicios basicos poo sol","text":"<p>Aqu\u00ed tienes los ejercicios junto con sus soluciones en TypeScript, organizados seg\u00fan cada enunciado y su respectiva respuesta:</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo-sol/#ejercicios","title":"Ejercicios","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo-sol/#programacion-orientada-a-objetos","title":"Programaci\u00f3n Orientada a Objetos","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo-sol/#1-clase-persona-y-metodo-para-saludar","title":"1. Clase <code>Persona</code> y M\u00e9todo para Saludar","text":"<p>Enunciado: Crea una clase llamada <code>Persona</code> que tenga las propiedades <code>nombre</code> (string) y <code>edad</code> (number). Incluye un m\u00e9todo <code>saludar()</code> que muestre en la consola un mensaje como \"Hola, mi nombre es [nombre] y tengo [edad] a\u00f1os\". Instancia un objeto de la clase y llama al m\u00e9todo <code>saludar()</code>.</p> <p>Soluci\u00f3n:</p> <pre><code>class Persona {\n  nombre: string;\n  edad: number;\n\n  constructor(nombre: string, edad: number) {\n    this.nombre = nombre;\n    this.edad = edad;\n  }\n\n  saludar(): void {\n    console.log(`Hola, mi nombre es ${this.nombre} y tengo ${this.edad} a\u00f1os.`);\n  }\n}\n\n// Crear una instancia de Persona y llamar al m\u00e9todo saludar\nconst persona1 = new Persona('Juan', 30);\npersona1.saludar();\n</code></pre>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo-sol/#2-sistema-de-gestion-de-productos","title":"2. Sistema de Gesti\u00f3n de Productos","text":"<p>Enunciado: Crea una clase <code>Producto</code> con las propiedades <code>nombre</code>, <code>precio</code> y <code>cantidad</code>. Luego, crea una clase <code>CarritoDeCompras</code> que tenga una lista de productos y m\u00e9todos para agregar un producto, eliminar un producto y calcular el total del carrito. Muestra en la consola el contenido del carrito y el total despu\u00e9s de agregar y eliminar productos.</p> <p>Soluci\u00f3n:</p> <pre><code>class Producto {\n  nombre: string;\n  precio: number;\n  cantidad: number;\n\n  constructor(nombre: string, precio: number, cantidad: number) {\n    this.nombre = nombre;\n    this.precio = precio;\n    this.cantidad = cantidad;\n  }\n}\n\nclass CarritoDeCompras {\n  productos: Producto[];\n\n  constructor() {\n    this.productos = [];\n  }\n\n  agregarProducto(producto: Producto): void {\n    this.productos.push(producto);\n  }\n\n  eliminarProducto(nombre: string): void {\n    this.productos = this.productos.filter(prod =&gt; prod.nombre !== nombre);\n  }\n\n  calcularTotal(): number {\n    return this.productos.reduce((total, prod) =&gt; total + prod.precio * prod.cantidad, 0);\n  }\n\n  mostrarCarrito(): void {\n    console.log(\"Contenido del carrito:\");\n    this.productos.forEach(prod =&gt; {\n      console.log(`Producto: ${prod.nombre}, Precio: ${prod.precio}, Cantidad: ${prod.cantidad}`);\n    });\n    console.log(`Total: ${this.calcularTotal()}`);\n  }\n}\n\n// Ejemplo de uso del CarritoDeCompras\nconst carrito = new CarritoDeCompras();\nconst producto1 = new Producto('Laptop', 1000, 1);\nconst producto2 = new Producto('Mouse', 20, 2);\n\ncarrito.agregarProducto(producto1);\ncarrito.agregarProducto(producto2);\ncarrito.mostrarCarrito();\n\ncarrito.eliminarProducto('Mouse');\ncarrito.mostrarCarrito();\n</code></pre>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo-sol/#3-herencia-y-polimorfismo-con-vehiculos","title":"3. Herencia y Polimorfismo con Veh\u00edculos","text":"<p>Enunciado: Crea una clase base <code>Vehiculo</code> con propiedades como <code>marca</code>, <code>modelo</code> y <code>velocidadMaxima</code>, y un m\u00e9todo <code>acelerar()</code> que muestra la aceleraci\u00f3n del veh\u00edculo en la consola. Luego, crea dos clases derivadas <code>Coche</code> y <code>Moto</code>, cada una con un m\u00e9todo adicional \u00fanico (<code>abrirMaletero()</code> para <code>Coche</code> y <code>hacerCaballito()</code> para <code>Moto</code>). Instancia objetos de ambas clases y demuestra el uso de la herencia y polimorfismo llamando a sus m\u00e9todos.</p> <p>Soluci\u00f3n:</p> <pre><code>class Vehiculo {\n  marca: string;\n  modelo: string;\n  velocidadMaxima: number;\n\n  constructor(marca: string, modelo: string, velocidadMaxima: number) {\n    this.marca = marca;\n    this.modelo = modelo;\n    this.velocidadMaxima = velocidadMaxima;\n  }\n\n  acelerar(): void {\n    console.log(`${this.marca} ${this.modelo} est\u00e1 acelerando hasta ${this.velocidadMaxima} km/h.`);\n  }\n}\n\nclass Coche extends Vehiculo {\n  abrirMaletero(): void {\n    console.log(`El maletero del ${this.marca} ${this.modelo} est\u00e1 abierto.`);\n  }\n}\n\nclass Moto extends Vehiculo {\n  hacerCaballito(): void {\n    console.log(`${this.marca} ${this.modelo} est\u00e1 haciendo un caballito.`);\n  }\n}\n\n// Ejemplo de uso de Coche y Moto\nconst coche = new Coche('Toyota', 'Corolla', 180);\ncoche.acelerar();\ncoche.abrirMaletero();\n\nconst moto = new Moto('Yamaha', 'R1', 299);\nmoto.acelerar();\nmoto.hacerCaballito();\n</code></pre>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo-sol/#4-sistema-de-gestion-de-estudiantes","title":"4. Sistema de Gesti\u00f3n de Estudiantes","text":"<p>Enunciado: Crea una clase <code>Estudiante</code> con las propiedades <code>nombre</code>, <code>edad</code>, y <code>notas</code> (array de n\u00fameros). Incluye m\u00e9todos para agregar una nota y calcular el promedio de las notas del estudiante. Luego, crea una clase <code>Curso</code> que gestione un grupo de estudiantes con m\u00e9todos para agregar estudiantes y calcular el promedio general del curso.</p> <p>Soluci\u00f3n:</p> <pre><code>class Estudiante {\n  nombre: string;\n  edad: number;\n  notas: number[];\n\n  constructor(nombre: string, edad: number) {\n    this.nombre = nombre;\n    this.edad = edad;\n    this.notas = [];\n  }\n\n  agregarNota(nota: number): void {\n    this.notas.push(nota);\n  }\n\n  calcularPromedio(): number {\n    const total = this.notas.reduce((acc, nota) =&gt; acc + nota, 0);\n    return this.notas.length ? total / this.notas.length : 0;\n  }\n}\n\nclass Curso {\n  estudiantes: Estudiante[];\n\n  constructor() {\n    this.estudiantes = [];\n  }\n\n  agregarEstudiante(estudiante: Estudiante): void {\n    this.estudiantes.push(estudiante);\n  }\n\n  calcularPromedioGeneral(): number {\n    const totalPromedios = this.estudiantes.reduce((acc, estudiante) =&gt; acc + estudiante.calcularPromedio(), 0);\n    return this.estudiantes.length ? totalPromedios / this.estudiantes.length : 0;\n  }\n}\n\n// Ejemplo de uso de la clase Curso\nconst estudiante1 = new Estudiante('Ana', 20);\nestudiante1.agregarNota(85);\nestudiante1.agregarNota(90);\n\nconst estudiante2 = new Estudiante('Luis', 22);\nestudiante2.agregarNota(70);\nestudiante2.agregarNota(75);\n\nconst curso = new Curso();\ncurso.agregarEstudiante(estudiante1);\ncurso.agregarEstudiante(estudiante2);\n\nconsole.log(`Promedio de ${estudiante1.nombre}: ${estudiante1.calcularPromedio()}`);\nconsole.log(`Promedio de ${estudiante2.nombre}: ${estudiante2.calcularPromedio()}`);\nconsole.log(`Promedio general del curso: ${curso.calcularPromedioGeneral()}`);\n</code></pre>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo/","title":"Ejercicios","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo/#programacion-orientada-a-objetos","title":"Programaci\u00f3n Orientada a Objetos","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo/#1-clase-persona-y-metodo-para-saludar","title":"1. Clase <code>Persona</code> y M\u00e9todo para Saludar","text":"<p>Crea una clase llamada <code>Persona</code> que tenga las propiedades <code>nombre</code> (string) y <code>edad</code> (number). Incluye un m\u00e9todo <code>saludar()</code> que muestre en la consola un mensaje como \"Hola, mi nombre es [nombre] y tengo [edad] a\u00f1os\". Instancia un objeto de la clase y llama al m\u00e9todo <code>saludar()</code>.</p> <p>Pista: Define las propiedades en el constructor de la clase y utiliza <code>this</code> para acceder a ellas dentro de los m\u00e9todos.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo/#2-sistema-de-gestion-de-productos","title":"2. Sistema de Gesti\u00f3n de Productos","text":"<p>Crea una clase <code>Producto</code> con las propiedades <code>nombre</code>, <code>precio</code> y <code>cantidad</code>. Luego, crea una clase <code>CarritoDeCompras</code> que tenga una lista de productos y m\u00e9todos para agregar un producto, eliminar un producto y calcular el total del carrito. Muestra en la consola el contenido del carrito y el total despu\u00e9s de agregar y eliminar productos.</p> <p>Pista: Utiliza m\u00e9todos como <code>agregarProducto(producto: Producto)</code>, <code>eliminarProducto(nombre: string)</code>, y <code>calcularTotal()</code>. Considera el uso de <code>Array.prototype.filter</code> y <code>Array.prototype.reduce</code> para manipular la lista de productos.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo/#3-herencia-y-polimorfismo-con-vehiculos","title":"3. Herencia y Polimorfismo con Veh\u00edculos","text":"<p>Crea una clase base <code>Vehiculo</code> con propiedades como <code>marca</code>, <code>modelo</code> y <code>velocidadMaxima</code>, y un m\u00e9todo <code>acelerar()</code> que muestra la aceleraci\u00f3n del veh\u00edculo en la consola. Luego, crea dos clases derivadas <code>Coche</code> y <code>Moto</code>, cada una con un m\u00e9todo adicional \u00fanico (<code>abrirMaletero()</code> para <code>Coche</code> y <code>hacerCaballito()</code> para <code>Moto</code>). Instancia objetos de ambas clases y demuestra el uso de la herencia y polimorfismo llamando a sus m\u00e9todos.</p> <p>Pista: Usa la palabra clave <code>extends</code> para la herencia y <code>super</code> para llamar al constructor de la clase base.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-poo/#4-sistema-de-gestion-de-estudiantes","title":"4. Sistema de Gesti\u00f3n de Estudiantes","text":"<p>Crea una clase <code>Estudiante</code> con las propiedades <code>nombre</code>, <code>edad</code>, y <code>notas</code> (array de n\u00fameros). Incluye m\u00e9todos para agregar una nota y calcular el promedio de las notas del estudiante. Luego, crea una clase <code>Curso</code> que gestione un grupo de estudiantes con m\u00e9todos para agregar estudiantes y calcular el promedio general del curso.</p> <p>Pista: Usa m\u00e9todos como <code>agregarNota(nota: number)</code> para <code>Estudiante</code> y <code>calcularPromedio()</code> tanto para la clase <code>Estudiante</code> como <code>Curso</code>. Implementa un array para manejar la lista de estudiantes en la clase <code>Curso</code>.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-sol/","title":"Extra ejercicios basicos sol","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-sol/#ejercicios-soluciones","title":"Ejercicios (Soluciones)","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-sol/#condicionales","title":"Condicionales","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-sol/#1-comprobacion-de-numero-positivo-negativo-o-cero","title":"1. Comprobaci\u00f3n de N\u00famero Positivo, Negativo o Cero","text":"<p>Escribe una funci\u00f3n que tome un n\u00famero como argumento y determine si es positivo, negativo o cero. Muestra el resultado en la consola.</p> <pre><code>function comprobarNumero(numero: number): void {\n    if (numero &gt; 0) {\n        console.log('El n\u00famero es positivo.');\n    } else if (numero &lt; 0) {\n        console.log('El n\u00famero es negativo.');\n    } else {\n        console.log('El n\u00famero es cero.');\n    }\n}\n\n// Ejemplos de uso\ncomprobarNumero(5);   // El n\u00famero es positivo.\ncomprobarNumero(-3);  // El n\u00famero es negativo.\ncomprobarNumero(0);   // El n\u00famero es cero.\n</code></pre> <p>Salida esperada: <pre><code>El n\u00famero es positivo.\nEl n\u00famero es negativo.\nEl n\u00famero es cero.\n</code></pre></p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-sol/#2-verificacion-de-contenido-de-texto","title":"2. Verificaci\u00f3n de Contenido de Texto","text":"<p>Crea una funci\u00f3n que tome una cadena como argumento y verifique si contiene una palabra espec\u00edfica (por ejemplo, \"typescript\"). Muestra \"Contiene la palabra 'typescript'\" o \"No contiene la palabra 'typescript'\" en la consola seg\u00fan corresponda.</p> <pre><code>function contienePalabra(texto: string, palabra: string): void {\n    if (texto.toLowerCase().includes(palabra.toLowerCase())) {\n        console.log(`Contiene la palabra '${palabra}'.`);\n    } else {\n        console.log(`No contiene la palabra '${palabra}'.`);\n    }\n}\n\n// Ejemplos de uso\ncontienePalabra('Estoy aprendiendo TypeScript', 'typescript'); // Contiene la palabra 'typescript'.\ncontienePalabra('Me gusta programar', 'typescript');          // No contiene la palabra 'typescript'.\n</code></pre> <p>Salida esperada: <pre><code>Contiene la palabra 'typescript'.\nNo contiene la palabra 'typescript'.\n</code></pre></p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-sol/#3-verificacion-de-ano-bisiesto","title":"3. Verificaci\u00f3n de A\u00f1o Bisiesto","text":"<p>Escribe una funci\u00f3n que tome un a\u00f1o como argumento y determine si es un a\u00f1o bisiesto. Muestra el resultado en la consola.</p> <pre><code>function esAnioBisiesto(anio: number): void {\n    if ((anio % 4 === 0 &amp;&amp; anio % 100 !== 0) || (anio % 400 === 0)) {\n        console.log(`${anio} es un a\u00f1o bisiesto.`);\n    } else {\n        console.log(`${anio} no es un a\u00f1o bisiesto.`);\n    }\n}\n\n// Ejemplos de uso\nesAnioBisiesto(2024); // 2024 es un a\u00f1o bisiesto.\nesAnioBisiesto(2023); // 2023 no es un a\u00f1o bisiesto.\n</code></pre> <p>Salida esperada: <pre><code>2024 es un a\u00f1o bisiesto.\n2023 no es un a\u00f1o bisiesto.\n</code></pre></p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-sol/#4-clasificacion-de-calificaciones","title":"4. Clasificaci\u00f3n de Calificaciones","text":"<p>Crea una funci\u00f3n que tome una calificaci\u00f3n num\u00e9rica (entre 0 y 100) como argumento y clasifique la calificaci\u00f3n como \"Sobresaliente\", \"Notable\", \"Aprobado\" o \"Reprobado\". Muestra el resultado en la consola.</p> <pre><code>function clasificarCalificacion(calificacion: number): void {\n    if (calificacion &gt;= 90) {\n        console.log('Sobresaliente');\n    } else if (calificacion &gt;= 75) {\n        console.log('Notable');\n    } else if (calificacion &gt;= 50) {\n        console.log('Aprobado');\n    } else {\n        console.log('Reprobado');\n    }\n}\n\n// Ejemplos de uso\nclasificarCalificacion(95); // Sobresaliente\nclasificarCalificacion(80); // Notable\nclasificarCalificacion(60); // Aprobado\nclasificarCalificacion(40); // Reprobado\n</code></pre> <p>Salida esperada: <pre><code>Sobresaliente\nNotable\nAprobado\nReprobado\n</code></pre></p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-sol/#5-conversion-de-temperatura","title":"5. Conversi\u00f3n de Temperatura","text":"<p>Escribe una funci\u00f3n que tome una temperatura en grados Celsius como argumento y la convierta a grados Fahrenheit. Si la temperatura es mayor a 30 \u00b0C, muestra \"Hace calor\", si es menor o igual a 10 \u00b0C, muestra \"Hace fr\u00edo\", de lo contrario, muestra \"Temperatura moderada\".</p> <pre><code>function convertirTemperatura(celsius: number): void {\n    const fahrenheit = (celsius * 9/5) + 32;\n    console.log(`${celsius} \u00b0C son ${fahrenheit.toFixed(2)} \u00b0F.`);\n\n    if (celsius &gt; 30) {\n        console.log('Hace calor.');\n    } else if (celsius &lt;= 10) {\n        console.log('Hace fr\u00edo.');\n    } else {\n        console.log('Temperatura moderada.');\n    }\n}\n\n// Ejemplos de uso\nconvertirTemperatura(35); // Hace calor.\nconvertirTemperatura(5);  // Hace fr\u00edo.\nconvertirTemperatura(20); // Temperatura moderada.\n</code></pre> <p>Salida esperada: <pre><code>35 \u00b0C son 95.00 \u00b0F.\nHace calor.\n5 \u00b0C son 41.00 \u00b0F.\nHace fr\u00edo.\n20 \u00b0C son 68.00 \u00b0F.\nTemperatura moderada.\n</code></pre></p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos-sol/#6-juego-automatico-de-piedra-papel-o-tijera","title":"6. Juego Autom\u00e1tico de Piedra, Papel o Tijera","text":"<p>Crea una funci\u00f3n que simule un juego de \"Piedra, Papel o Tijera\" entre dos participantes, donde ambos seleccionan su opci\u00f3n de forma aleatoria. Genera un n\u00famero aleatorio entre 0 y 2 para cada jugador y determina el ganador. Muestra el resultado del juego en la consola.</p> <pre><code>function generarOpcion(): string {\n    const opciones = ['Piedra', 'Papel', 'Tijera'];\n    const indiceAleatorio = Math.floor(Math.random() * 3);\n    return opciones[indiceAleatorio];\n}\n\nfunction jugarPiedraPapelTijera(): void {\n    const jugador1 = generarOpcion();\n    const jugador2 = generarOpcion();\n\n    console.log(`Jugador 1 elige: ${jugador1}`);\n    console.log(`Jugador 2 elige: ${jugador2}`);\n\n    if (jugador1 === jugador2) {\n        console.log('Es un empate.');\n    } else if (\n        (jugador1 === 'Piedra' &amp;&amp; jugador2 === 'Tijera') ||\n        (jugador1 === 'Papel' &amp;&amp; jugador2 === 'Piedra') ||\n        (jugador1 === 'Tijera' &amp;&amp; jugador2 === 'Papel')\n    ) {\n        console.log('Jugador 1 gana.');\n    } else {\n        console.log('Jugador 2 gana.');\n    }\n}\n\n// Ejemplo de uso\njugarPiedraPapelTijera();\n</code></pre> <p>Salida esperada: (var\u00eda debido a la aleatoriedad) <pre><code>Jugador 1 elige: Piedra\nJugador 2 elige: Tijera\nJugador 1 gana.\n\nJugador 1 elige: Papel\nJugador 2 elige: Papel\nEs un empate.\n</code></pre></p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/","title":"Extra ejercicios basicos","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#ejercicios","title":"Ejercicios","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#condicionales","title":"Condicionales","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#1-comprobacion-de-numero-positivo-negativo-o-cero","title":"1. Comprobaci\u00f3n de N\u00famero Positivo, Negativo o Cero","text":"<p>Escribe una funci\u00f3n que tome un n\u00famero como argumento y determine si es positivo, negativo o cero. Muestra el resultado en la consola.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#2-verificacion-de-contenido-de-texto","title":"2. Verificaci\u00f3n de Contenido de Texto","text":"<p>Crea una funci\u00f3n que tome una cadena como argumento y verifique si contiene una palabra espec\u00edfica (por ejemplo, \"typescript\"). Muestra \"Contiene la palabra 'typescript'\" o \"No contiene la palabra 'typescript'\" en la consola seg\u00fan corresponda.</p> <p>Pista: Utiliza el m\u00e9todo <code>includes()</code> de las cadenas de texto para verificar si la palabra deseada est\u00e1 presente. Recuerda que <code>includes()</code> es sensible a may\u00fasculas y min\u00fasculas, as\u00ed que podr\u00edas usar <code>toLowerCase()</code> para manejar ambos casos.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#3-verificacion-de-ano-bisiesto","title":"3. Verificaci\u00f3n de A\u00f1o Bisiesto","text":"<p>Escribe una funci\u00f3n que tome un a\u00f1o como argumento y determine si es un a\u00f1o bisiesto. Muestra el resultado en la consola.</p> <p>Pista: La l\u00f3gica para determinar un a\u00f1o bisiesto implica el uso de operadores l\u00f3gicos (<code>&amp;&amp;</code>, <code>||</code>). Considera encapsular la verificaci\u00f3n en una funci\u00f3n separada para mejorar la legibilidad y reutilizaci\u00f3n del c\u00f3digo.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#4-clasificacion-de-calificaciones","title":"4. Clasificaci\u00f3n de Calificaciones","text":"<p>Crea una funci\u00f3n que tome una calificaci\u00f3n num\u00e9rica (entre 0 y 100) como argumento y clasifique la calificaci\u00f3n como \"Sobresaliente\", \"Notable\", \"Aprobado\" o \"Reprobado\". Muestra el resultado en la consola.</p> <p>Pista: Puedes usar una combinaci\u00f3n de <code>if</code> y <code>else if</code> para manejar diferentes rangos de calificaciones. Considera el uso de una funci\u00f3n de mapeo o de un objeto para simplificar la l\u00f3gica de clasificaci\u00f3n.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#5-conversion-de-temperatura","title":"5. Conversi\u00f3n de Temperatura","text":"<p>Escribe una funci\u00f3n que tome una temperatura en grados Celsius como argumento y la convierta a grados Fahrenheit. Si la temperatura es mayor a 30 \u00b0C, muestra \"Hace calor\", si es menor o igual a 10 \u00b0C, muestra \"Hace fr\u00edo\", de lo contrario, muestra \"Temperatura moderada\".</p> <p>Pista: Usa la f\u00f3rmula de conversi\u00f3n de Celsius a Fahrenheit y <code>toFixed()</code> para limitar el n\u00famero de decimales en la salida. Para clasificar la temperatura, utiliza condicionales y considera funciones auxiliares que manejen diferentes mensajes de salida seg\u00fan los rangos de temperatura.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#6-juego-automatico-de-piedra-papel-o-tijera","title":"6. Juego Autom\u00e1tico de Piedra, Papel o Tijera","text":"<p>Crea una funci\u00f3n que simule un juego de \"Piedra, Papel o Tijera\" entre dos participantes, donde ambos seleccionan su opci\u00f3n de forma aleatoria. Genera un n\u00famero aleatorio entre 0 y 2 para cada jugador y determina el ganador. Muestra el resultado del juego en la consola.</p> <p>Pista: Utiliza <code>Math.random()</code> para generar dos n\u00fameros aleatorios entre 0 y 2, donde cada n\u00famero corresponde a una opci\u00f3n: <code>0</code> para \"Piedra\", <code>1</code> para \"Papel\", <code>2</code> para \"Tijera\". Usa una funci\u00f3n para convertir estos n\u00fameros en sus equivalentes de \"Piedra\", \"Papel\" o \"Tijera\" para facilitar la legibilidad del c\u00f3digo. Luego, implementa una estructura condicional <code>if-else</code> o <code>switch</code> para comparar las opciones de ambos jugadores y determinar el resultado del juego.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#bucles","title":"Bucles","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#1-bucle-for-con-condicion-de-salto","title":"1. Bucle <code>for</code> con Condici\u00f3n de Salto","text":"<p>Crea un bucle <code>for</code> que imprima los n\u00fameros del 1 al 20, pero que salte los m\u00faltiplos de 3.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#2-bucle-while-para-factorial","title":"2. Bucle <code>while</code> para Factorial","text":"<p>Usa un bucle <code>while</code> para imprimir el factorial de un n\u00famero entero dado. El factorial de 5 (5!) es 5\u00d74\u00d73\u00d72\u00d71=120.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#3-bucle-dowhile-para-entrada-de-usuario","title":"3. Bucle <code>do...while</code> para Entrada de Usuario","text":"<p>Escribe un programa que use un bucle <code>do...while</code> para pedir al usuario un n\u00famero entre 1 y 10. Contin\u00faa solicitando hasta que el usuario introduzca un n\u00famero v\u00e1lido.</p> <p>Pista: Utiliza la instrucci\u00f3n prompt() para solicitar datos al usuario en TypeScript. Esta funci\u00f3n abre un cuadro de di\u00e1logo que permite al usuario introducir una cadena de texto. Para obtener datos num\u00e9ricos, convierte la entrada del usuario usando parseInt() o parseFloat() seg\u00fan sea necesario. Aseg\u00farate de manejar posibles entradas no v\u00e1lidas mediante condicionales if o un bucle while para solicitar repetidamente la entrada hasta que sea correcta.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#4-bucle-forof-para-iterar-sobre-arreglo","title":"4. Bucle <code>for...of</code> para Iterar sobre Arreglo","text":"<p>Dado un array de nombres, usa un bucle <code>for...of</code> para imprimir cada nombre en may\u00fasculas.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#5-bucle-forin-para-contar-propiedades-de-un-objeto","title":"5. Bucle <code>for...in</code> para Contar Propiedades de un Objeto","text":"<p>Crea un objeto que contenga algunas propiedades simples, como <code>a</code>, <code>b</code> y <code>c</code>. Usa un bucle <code>for...in</code> para contar el n\u00famero total de propiedades en el objeto e imprimir el resultado.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#6-metodo-foreach-para-sumar-elementos-de-un-arreglo","title":"6. M\u00e9todo <code>forEach</code> para Sumar Elementos de un Arreglo","text":"<p>Dado un array de n\u00fameros, usa el m\u00e9todo <code>forEach</code> para calcular y mostrar la suma de todos los n\u00fameros.</p> <p>Pista: Usa el m\u00e9todo <code>forEach()</code> en TypeScript para iterar sobre los elementos de un array y ejecutar una funci\u00f3n para cada elemento.</p>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#otros-ejercicios","title":"Otros ejercicios","text":""},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#1-triangulo-rectangulo","title":"1. Tri\u00e1ngulo Rect\u00e1ngulo","text":"<p>Dibuja un tri\u00e1ngulo rect\u00e1ngulo con <code>*</code> de <code>n</code> filas. Cada fila debe contener un n\u00famero creciente de asteriscos, comenzando con 1 en la primera fila y aumentando en 1 en cada fila subsiguiente.</p> <p>Ejemplo para <code>n = 5</code>:</p> <pre><code>*\n**\n***\n****\n*****\n</code></pre>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#2-cuadrado-de-asteriscos","title":"2. Cuadrado de Asteriscos","text":"<p>Dibuja un cuadrado de <code>n x n</code> asteriscos. Cada fila debe tener exactamente <code>n</code> asteriscos.</p> <p>Ejemplo para <code>n = 4</code>:</p> <pre><code>****\n****\n****\n****\n</code></pre>"},{"location":"ut2-introduccionatypescript/extra-ejercicios-basicos/#3-piramide-de-asteriscos","title":"3. Pir\u00e1mide de Asteriscos","text":"<p>Dibuja una pir\u00e1mide de <code>n</code> filas. La primera fila tiene un asterisco centrado, y cada fila subsiguiente tiene dos asteriscos m\u00e1s, formando una pir\u00e1mide.</p> <p>Ejemplo para <code>n = 5</code>:</p> <pre><code>    *\n   ***\n  *****\n *******\n*********\n</code></pre>"},{"location":"ut2-introduccionatypescript/proyecto/enunciado/","title":"Enunciado","text":""},{"location":"ut2-introduccionatypescript/proyecto/enunciado/#proyecto-simulador-de-batallas-pokemon-en-typescript","title":"Proyecto: Simulador de Batallas Pok\u00e9mon en TypeScript","text":""},{"location":"ut2-introduccionatypescript/proyecto/enunciado/#descripcion-del-proyecto","title":"Descripci\u00f3n del Proyecto","text":"<p>Este proyecto consiste en desarrollar un simulador de batallas Pok\u00e9mon utilizando TypeScript, recreando una experiencia de combate por turnos entre un jugador y un oponente controlado por la m\u00e1quina. Los Pok\u00e9mon tienen caracter\u00edsticas como nombre, tipo, puntos de vida (HP), ataque, defensa y una lista de movimientos \u00fanicos. Cada turno, el jugador puede optar por atacar o curarse, mientras que las acciones de la m\u00e1quina son completamente aleatorias.</p>"},{"location":"ut2-introduccionatypescript/proyecto/enunciado/#objetivos-especificos","title":"Objetivos Espec\u00edficos","text":"<ol> <li>Dise\u00f1o de Clases y Estructura del C\u00f3digo:</li> <li>Clase <code>Pokemon</code>: Define los atributos esenciales de un Pok\u00e9mon:<ul> <li>Atributos: Nombre, tipo, HP actual, HP m\u00e1ximo (<code>hpMax</code>), ataque, defensa, y una lista de movimientos (<code>Move</code>).</li> <li>M\u00e9todo <code>attack()</code>: Permite al Pok\u00e9mon atacar seleccionando un movimiento de su lista y calculando el da\u00f1o infligido.</li> <li>M\u00e9todo <code>heal()</code>: Cura al Pok\u00e9mon un 50% de su HP m\u00e1ximo, y solo puede usarse una vez por combate.</li> </ul> </li> <li>Clase <code>Move</code>: Representa los movimientos de ataque con atributos como nombre y da\u00f1o base.</li> <li> <p>Enumeraci\u00f3n <code>Type</code>: Enumera los diferentes tipos de Pok\u00e9mon, como Agua, Fuego, Planta, entre otros, para implementar afinidades y debilidades futuras.</p> </li> <li> <p>Mec\u00e1nica de Batalla:</p> </li> <li>Implementar un sistema de turnos donde el jugador puede elegir entre atacar o curarse, y las acciones de la m\u00e1quina sean completamente aleatorias.</li> <li>Calcular el da\u00f1o basado en una f\u00f3rmula que considere las estad\u00edsticas de ataque y defensa de los Pok\u00e9mon involucrados.</li> <li> <p>Incluir la posibilidad de curaci\u00f3n para ambos Pok\u00e9mon, restringi\u00e9ndola a una vez por combate.</p> </li> <li> <p>Interacci\u00f3n del Usuario y Flujo de Combate:</p> </li> <li>Utilizar la librer\u00eda <code>readline-sync</code> para recibir las entradas del jugador y mostrar los resultados de cada acci\u00f3n.</li> <li>Estructurar el flujo del combate para mantener la claridad en la presentaci\u00f3n de cada turno y las acciones realizadas.</li> </ol>"},{"location":"ut2-introduccionatypescript/proyecto/enunciado/#formula-para-calcular-el-dano","title":"F\u00f3rmula para Calcular el Da\u00f1o","text":"<p>El da\u00f1o infligido por un ataque se calcula usando una f\u00f3rmula que considera las estad\u00edsticas de ataque del atacante, la defensa del defensor y el da\u00f1o base del movimiento seleccionado. La f\u00f3rmula es la siguiente:</p> <p>[ \\text{Damage} = \\left( \\frac{\\text{Attack}}{\\text{Defense}} \\right) \\times \\text{Move Damage} \\times \\text{Random Factor} ]</p> <ul> <li>Attack: El valor de la estad\u00edstica de ataque del Pok\u00e9mon atacante.</li> <li>Defense: El valor de la estad\u00edstica de defensa del Pok\u00e9mon defensor.</li> <li>Move Damage: El valor base de da\u00f1o del movimiento utilizado.</li> <li>Random Factor: Un factor aleatorio entre 0.85 y 1.0 que introduce variabilidad en los ataques, simulando la inexactitud y el elemento de suerte presente en los juegos originales.</li> </ul> <p>La f\u00f3rmula asegura que el da\u00f1o nunca sea negativo y siempre al menos 1 punto para que cada ataque tenga un impacto m\u00ednimo.</p>"},{"location":"ut2-introduccionatypescript/proyecto/enunciado/#mecanica-de-las-acciones-de-la-maquina","title":"Mec\u00e1nica de las Acciones de la M\u00e1quina","text":"<ul> <li>Acciones Aleatorias: La IA selecciona sus acciones de manera completamente aleatoria en cada turno, eligiendo entre atacar o curarse si no lo ha hecho anteriormente.</li> <li>Ataque Aleatorio: Selecciona un movimiento al azar de su lista de ataques y lo utiliza contra el Pok\u00e9mon del jugador.</li> <li>Curaci\u00f3n Aleatoria: Si la IA decide curarse, esta acci\u00f3n solo puede realizarse una vez por combate, recuperando un 50% de su HP m\u00e1ximo.</li> </ul>"},{"location":"ut2-introduccionatypescript/proyecto/enunciado/#interaccion-del-jugador","title":"Interacci\u00f3n del Jugador","text":"<ul> <li>El jugador puede elegir entre dos opciones en cada turno:</li> <li>Atacar: Selecciona uno de los movimientos disponibles de su Pok\u00e9mon y ataca al oponente.</li> <li>Curarse: El jugador puede curar a su Pok\u00e9mon una vez durante el combate, recuperando la mitad de su HP m\u00e1ximo.</li> </ul>"},{"location":"ut2-introduccionatypescript/proyecto/enunciado/#diagrama-de-flujo-del-combate","title":"Diagrama de Flujo del Combate","text":"<p>A continuaci\u00f3n, se presenta un diagrama de flujo utilizando Mermaid que ilustra el proceso de toma de decisiones en cada turno del combate.</p> <pre><code>graph TD\n    A[Inicio del Combate] --&gt; B[Turno del Jugador]\n    B --&gt; C{\u00bfQu\u00e9 acci\u00f3n desea realizar?}\n    C --&gt;|Atacar| D[Selecciona Movimiento]\n    D --&gt; E[Calcula Da\u00f1o y Reduce HP del Oponente]\n    E --&gt; F[Revisa si el Oponente ha Sido Derrotado]\n    C --&gt;|Curarse| G[Recupera 50% del HP M\u00e1ximo]\n    G --&gt; H[Fin del Turno del Jugador]\n    F --&gt;|Oponente Derrotado| I[Fin del Combate - Jugador Gana]\n    F --&gt;|Oponente No Derrotado| H\n    H --&gt; J[Turno de la M\u00e1quina]\n    J --&gt; K{\u00bfAcci\u00f3n Aleatoria de la M\u00e1quina?}\n    K --&gt;|Atacar| L[Selecciona Movimiento Aleatorio]\n    L --&gt; M[Calcula Da\u00f1o y Reduce HP del Jugador]\n    M --&gt; N[Revisa si el Jugador ha Sido Derrotado]\n    K --&gt;|Curarse| O[Recupera 50% del HP M\u00e1ximo]\n    O --&gt; P[Fin del Turno de la M\u00e1quina]\n    N --&gt;|Jugador Derrotado| Q[Fin del Combate - M\u00e1quina Gana]\n    N --&gt;|Jugador No Derrotado| B</code></pre>"},{"location":"ut2-introduccionatypescript/proyecto/enunciado/#expansiones-posibles-descripcion","title":"Expansiones Posibles: Descripci\u00f3n","text":"<ol> <li> <p>Aplicar Afinidades de Tipos en el C\u00e1lculo del Da\u00f1o:     Incorporar las ventajas y desventajas de los tipos de Pok\u00e9mon en el c\u00e1lculo del da\u00f1o, haciendo que algunos ataques sean m\u00e1s o menos efectivos seg\u00fan el tipo del oponente, lo cual a\u00f1ade una capa estrat\u00e9gica a los combates.</p> </li> <li> <p>Realizar Combate Completo de Pok\u00e9mon 3vs3, 6vs6, etc.:     Permitir batallas por equipos donde varios Pok\u00e9mon se enfrentan en secuencia, gestionando los recursos de varios miembros del equipo, lo que aumenta la complejidad y estrategia del juego.</p> </li> <li> <p>Introducir Niveles Aleatorios en Pok\u00e9mon y Modificar el C\u00e1lculo del Da\u00f1o de Acuerdo a Estos:     Asignar niveles a los Pok\u00e9mon, ajustando sus estad\u00edsticas y modificando el da\u00f1o basado en la diferencia de niveles entre los combatientes, lo que a\u00f1ade un componente de progresi\u00f3n y desaf\u00edo.</p> </li> <li> <p>Posibilidad de Fallar un Movimiento:     A\u00f1adir una probabilidad de fallo en los movimientos, incorporando un elemento de riesgo y variabilidad en cada ataque, lo que incrementa la estrategia y tensi\u00f3n en los combates.</p> </li> </ol>"},{"location":"ut2-introduccionatypescript/src/guia%20debug/","title":"Guia debug","text":"<p>Ejecutar tsc --init para que se cree el archivo tsconfig.json</p> <p>Algo parecido a esto  {     \"compilerOptions\": {       \"target\": \"es2016\",       \"module\": \"commonjs\",       \"strict\": true,       \"esModuleInterop\": true,       \"forceConsistentCasingInFileNames\": true,       \"skipLibCheck\": true,       \"sourceMap\": true     }   } Importante la propiedad sourcemap a true</p> <p>Crear archivo lauch.json dentro de .vscode con por ejemplo esto</p> <p>{     \"version\": \"0.2.0\",     \"configurations\": [         {             \"type\": \"node\",             \"request\": \"launch\",             \"name\": \"Launch Program\",             \"program\": \"${workspaceFolder}/extra-ejercicios-basicos-sol.ts\",             \"preLaunchTask\": \"tsc: build - tsconfig.json\",             \"outFiles\": [                 \"${workspaceFolder}/*/.js\"             ]         }     ] }</p>"},{"location":"ut2-introduccionatypescript/src/node_modules/%40types/node/","title":"Installation","text":"<p><code>npm install --save @types/node</code></p>"},{"location":"ut2-introduccionatypescript/src/node_modules/%40types/node/#summary","title":"Summary","text":"<p>This package contains type definitions for node (https://nodejs.org/).</p>"},{"location":"ut2-introduccionatypescript/src/node_modules/%40types/node/#details","title":"Details","text":"<p>Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/node.</p>"},{"location":"ut2-introduccionatypescript/src/node_modules/%40types/node/#additional-details","title":"Additional Details","text":"<ul> <li>Last updated: Sat, 14 Sep 2024 00:53:13 GMT</li> <li>Dependencies: undici-types</li> </ul>"},{"location":"ut2-introduccionatypescript/src/node_modules/%40types/node/#credits","title":"Credits","text":"<p>These definitions were written by Microsoft TypeScript, Alberto Schiabel, Alvis HT Tang, Andrew Makarov, Benjamin Toueg, Chigozirim C., David Junger, Deividas Bakanas, Eugene Y. Q. Shen, Hannes Magnusson, Huw, Kelvin Jin, Klaus Meinhardt, Lishude, Mariusz Wiktorczyk, Mohsen Azimi, Nikita Galkin, Parambir Singh, Sebastian Silbermann, Thomas den Hollander, Wilco Bakker, wwwy3y3, Samuel Ainsworth, Kyle Uehlein, Thanik Bhongbhibhat, Marcin Kopacz, Trivikram Kamat, Junxiao Shi, Ilia Baryshnikov, ExE Boss, Piotr B\u0142a\u017cejewicz, Anna Henningsen, Victor Perin, Yongsheng Zhang, NodeJS Contributors, Linus Unneb\u00e4ck, wafuwafu13, Matteo Collina, and Dmitry Semigradsky.</p>"},{"location":"ut2-introduccionatypescript/src/node_modules/readline/","title":"Index","text":""},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#readline","title":"readline","text":"<p>Read a file line by line.</p>"},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#install","title":"Install","text":""},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#important-in-node-10-there-is-a-core-module-named-readline-please-use-linebyline-instead-it-is-the-same-module-just-renamed","title":"Important. In node 10 there is a core module named readline. Please use linebyline instead, it is the same module just renamed:","text":"<p>Npm linebyline</p> <pre><code>npm install linebyline\n</code></pre>"},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#test","title":"Test","text":"<pre><code>npm install .\nnpm test\n</code></pre>"},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#whats-this","title":"What's this?","text":"<p>Simple streaming readline module for NodeJS. Reads a file and buffers new lines emitting a line event for each line.</p>"},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#usage","title":"Usage","text":""},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#simple","title":"Simple","text":"<pre><code>  var readline = require('linebyline'),\n      rl = readline('./somefile.txt');\n  rl.on('line', function(line, lineCount, byteCount) {\n    // do something with the line of text\n  })\n  .on('error', function(e) {\n    // something went wrong\n  });\n</code></pre>"},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#ascii-file-decoding","title":"ASCII file decoding","text":"<p>As the underlying <code>fs.createReadStream</code> doesn't care about the specific ASCII encoding of the file, an alternative way to decode the file is by telling the <code>readline</code> library to retain buffer and then decoding it using a converter (e.g. <code>iconv-lite</code>). <pre><code>  var readline = require('linebyline'),\n      rl = readline('./file-in-win1251.txt', {\n    retainBuffer: true //tell readline to retain buffer \n  });\n  rl.on(\"line\", function (data,linecount){\n    var line = iconv.decode(data, 'win1251');\n    // do something with the line of converted text\n  });\n</code></pre></p>"},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#api","title":"API","text":""},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#readlinereadingobject-options","title":"readLine(readingObject[, options])","text":""},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#params","title":"Params:","text":"<ul> <li><code>readingObject</code> - file path or stream object</li> <li><code>options</code> can include:</li> <li><code>maxLineLength</code> - override the default 4K buffer size (lines longer than this will not be read)</li> <li><code>retainBuffer</code> - avoid converting to String prior to emitting 'line' event; will pass raw buffer with encoded data to the callback</li> </ul>"},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#return","title":"Return:","text":"<ul> <li>EventEmitter </li> </ul>"},{"location":"ut2-introduccionatypescript/src/node_modules/readline/#license","title":"License","text":"<p>BSD \u00a9 Craig Brookes</p>"},{"location":"ut2-introduccionatypescript/src/node_modules/undici-types/","title":"undici-types","text":"<p>This package is a dual-publish of the undici library types. The <code>undici</code> package still contains types. This package is for users who only need undici types (such as for <code>@types/node</code>). It is published alongside every release of <code>undici</code>, so you can always use the same version.</p> <ul> <li>GitHub nodejs/undici</li> <li>Undici Documentation</li> </ul>"},{"location":"ut3-introduccionaangular/1introduccion/","title":"Introducci\u00f3n a Angular 18: La Revoluci\u00f3n en el Desarrollo Web \ud83d\ude80","text":"<p>Angular 18 ha llegado, y con \u00e9l, una nueva ola de posibilidades para desarrolladores que buscan crear aplicaciones web robustas, escalables y modernas. Si est\u00e1s listo para sumergirte en esta versi\u00f3n mejorada de uno de los frameworks m\u00e1s populares del mundo, \u00a1este es el lugar para comenzar! Vamos a explorar desde los conceptos b\u00e1sicos hasta la estructura de un proyecto en Angular 18. </p>"},{"location":"ut3-introduccionaangular/1introduccion/#que-es-angular","title":"\u00bfQu\u00e9 es Angular? \ud83e\udd14","text":"<p>Angular es un framework de c\u00f3digo abierto desarrollado por Google, dise\u00f1ado espec\u00edficamente para construir aplicaciones web de una sola p\u00e1gina (SPA). Utiliza TypeScript, lo que permite a los desarrolladores aprovechar caracter\u00edsticas modernas como tipado est\u00e1tico y herramientas avanzadas.</p> <p>En palabras simples, Angular te ayuda a estructurar tu c\u00f3digo de una manera eficiente, modular y escalable.</p>"},{"location":"ut3-introduccionaangular/1introduccion/#historia-y-evolucion-del-framework","title":"Historia y Evoluci\u00f3n del Framework \ud83d\udcdc","text":"<p>Angular ha recorrido un largo camino desde su lanzamiento inicial en 2010. AngularJS fue la primera versi\u00f3n, que marc\u00f3 el comienzo de una nueva era para los desarrolladores web. Sin embargo, con la evoluci\u00f3n de las necesidades del mercado, Google reescribi\u00f3 completamente el framework, lanzando lo que hoy conocemos como Angular 2+. Desde entonces, cada nueva versi\u00f3n ha tra\u00eddo mejoras significativas en t\u00e9rminos de rendimiento, caracter\u00edsticas y herramientas de desarrollo.</p>"},{"location":"ut3-introduccionaangular/1introduccion/#linea-de-tiempo-angular","title":"L\u00ednea de Tiempo Angular:","text":"<p><pre><code>graph LR;\n    AngularJS --&gt; Angular2;\n    Angular2 --&gt; Angular4;\n    Angular4 --&gt; Angular5;\n    Angular5 --&gt; Angular6;\n    Angular6 --&gt; Angular7;\n    Angular7 --&gt; Angular8;\n    Angular8 --&gt; Angular9;\n    Angular9 --&gt; Angular10;\n    Angular10 --&gt; Angular11;\n    Angular11 --&gt; Angular12;\n    Angular12 --&gt; Angular13;\n    Angular13 --&gt; Angular14;\n    Angular14 --&gt; Angular15;\n    Angular15 --&gt; Angular16;\n    Angular16 --&gt; Angular17;\n    Angular17 --&gt; Angular18;</code></pre> \u00a1Angular no deja de mejorar! \ud83d\ude80</p>"},{"location":"ut3-introduccionaangular/1introduccion/#angular-vs-otros-frameworks-react-vue","title":"Angular vs. Otros Frameworks: React, Vue \ud83e\udd4a","text":"<p>Si bien Angular tiene una competencia fuerte en React (creado por Facebook) y Vue.js (creado por Evan You), Angular se destaca por ser una soluci\u00f3n completa para el desarrollo web. Mientras que frameworks como React se centran solo en la vista, Angular ofrece un enfoque integral que incluye el manejo de servicios, rutas, formularios y mucho m\u00e1s.</p>"},{"location":"ut3-introduccionaangular/1introduccion/#comparacion","title":"Comparaci\u00f3n:","text":"Caracter\u00edstica Angular 18 React Vue.js Lenguaje principal TypeScript JavaScript JavaScript Complejidad inicial Alta Media Baja Comunidad y soporte Muy amplio Muy amplio Amplio Curva de aprendizaje Pronunciada Moderada Suave Enfoque Completo Solo UI Flexible"},{"location":"ut3-introduccionaangular/1introduccion/#caracteristicas-y-ventajas-de-usar-angular","title":"Caracter\u00edsticas y Ventajas de Usar Angular \ud83c\udfc6","text":"<ul> <li>Modularidad: Angular permite dividir tu aplicaci\u00f3n en m\u00f3dulos, facilitando el mantenimiento y escalabilidad.</li> <li>TypeScript: Mejora el desarrollo con tipado est\u00e1tico, mejor autocompletado y detecci\u00f3n de errores antes de ejecutar el c\u00f3digo.</li> <li>Inyecci\u00f3n de Dependencias: Facilita la gesti\u00f3n de dependencias y promueve la reutilizaci\u00f3n del c\u00f3digo.</li> <li>Componentes Reutilizables: La arquitectura basada en componentes permite crear elementos de UI reutilizables en toda la aplicaci\u00f3n.</li> <li>Rendimiento Optimizado: Angular utiliza t\u00e9cnicas de optimizaci\u00f3n como tree-shaking y lazy loading para mejorar la carga de las aplicaciones.</li> </ul>"},{"location":"ut3-introduccionaangular/1introduccion/#casos-de-uso-cuando-usar-angular","title":"Casos de Uso: \u00bfCu\u00e1ndo Usar Angular? \ud83d\udee0\ufe0f","text":"<p>Angular es ideal para aplicaciones web a gran escala que requieren una estructura s\u00f3lida y escalable. Algunos ejemplos de proyectos donde Angular brilla incluyen:</p> <ul> <li>Dashboards empresariales</li> <li>Aplicaciones SaaS (Software as a Service)</li> <li>Aplicaciones de comercio electr\u00f3nico</li> <li>Plataformas de educaci\u00f3n en l\u00ednea</li> <li>Aplicaciones m\u00f3viles (a trav\u00e9s de Ionic o NativeScript)</li> </ul>"},{"location":"ut3-introduccionaangular/1introduccion/#instalacion-y-configuracion-de-angular","title":"Instalaci\u00f3n y Configuraci\u00f3n de Angular \u2699\ufe0f","text":"<p>Instalar Angular es pan comido. Sigue estos sencillos pasos para tener tu entorno de desarrollo listo:</p> <ol> <li>Aseg\u00farate de tener instalado Node.js.</li> <li>Instala Angular CLI globalmente en tu m\u00e1quina:     <pre><code>npm install -g @angular/cli\n</code></pre></li> <li>Verifica que la instalaci\u00f3n haya sido exitosa:     <pre><code>ng --version\n</code></pre></li> </ol> <p>Ahora est\u00e1s listo para crear tu primer proyecto en Angular 18.</p>"},{"location":"ut3-introduccionaangular/1introduccion/#primer-proyecto-con-angular","title":"Primer Proyecto con Angular \ud83c\udfaf","text":"<p>\u00a1Manos a la obra! Sigamos con la creaci\u00f3n de nuestro primer proyecto Angular:</p> <ol> <li>Crea un nuevo proyecto:     <pre><code>ng new mi-primer-proyecto\n</code></pre></li> <li>Navega al directorio del proyecto:     <pre><code>cd mi-primer-proyecto\n</code></pre></li> <li>Arranca el servidor de desarrollo:     <pre><code>ng serve\n</code></pre></li> </ol> <p>\u00a1Y listo! Ahora puedes acceder a tu aplicaci\u00f3n en <code>http://localhost:4200/</code>.</p>"},{"location":"ut3-introduccionaangular/1introduccion/#estructura-de-un-proyecto-angular","title":"Estructura de un Proyecto Angular \ud83d\udcc2","text":"<p>Un proyecto en Angular est\u00e1 bien organizado en diferentes carpetas y archivos, lo que facilita la escalabilidad a medida que crece tu aplicaci\u00f3n. Esta es la estructura b\u00e1sica de un proyecto:</p> <pre><code>mi-proyecto/\n\u2502\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app/\n\u2502   \u2502   \u251c\u2500\u2500 app.component.ts   # Componente principal\n\u2502   \u2502   \u251c\u2500\u2500 app.module.ts      # M\u00f3dulo principal\n\u2502   \u2502   \u2514\u2500\u2500 ...                # Otros componentes, servicios, etc.\n\u2502   \u251c\u2500\u2500 assets/                # Recursos est\u00e1ticos (im\u00e1genes, fuentes, etc.)\n\u2502   \u251c\u2500\u2500 environments/          # Configuraciones de entorno\n\u2502   \u251c\u2500\u2500 main.ts                # Punto de entrada de la aplicaci\u00f3n\n\u2502   \u2514\u2500\u2500 ...                    # Otros archivos de configuraci\u00f3n\n\u2502\n\u251c\u2500\u2500 angular.json               # Configuraci\u00f3n del proyecto Angular\n\u251c\u2500\u2500 package.json               # Dependencias del proyecto\n\u2514\u2500\u2500 ...\n</code></pre> <p>Con estos primeros pasos ya tienes una base s\u00f3lida para empezar a trabajar con Angular 18. Desde su instalaci\u00f3n hasta la creaci\u00f3n de un proyecto, est\u00e1s listo para aprovechar las ventajas de este framework incre\u00edblemente poderoso. \ud83c\udf89</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/","title":"Conceptos B\u00e1sicos de Angular 18: \u00a1Domina el Framework! \ud83e\uddd1\u200d\ud83d\udcbb","text":"<p>Con Angular 18, desarrollar aplicaciones web modernas es m\u00e1s f\u00e1cil y potente que nunca. A lo largo de este recorrido, veremos los conceptos fundamentales que te permitir\u00e1n manejar Angular como un profesional. \u00a1Vamos all\u00e1! \ud83d\ude80</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#componentes-definicion-y-uso","title":"Componentes: Definici\u00f3n y Uso \ud83c\udfa8","text":"<p>Los componentes son la piedra angular de cualquier aplicaci\u00f3n Angular. Cada componente est\u00e1 compuesto por tres partes principales: un archivo TypeScript (la l\u00f3gica), un archivo HTML (la plantilla) y un archivo CSS (el estilo).</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#ejemplo-basico-de-un-componente","title":"Ejemplo b\u00e1sico de un componente:","text":"<pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-mi-componente',\n  templateUrl: './mi-componente.component.html',\n  styleUrls: ['./mi-componente.component.css']\n})\nexport class MiComponente {\n  titulo: string = '\u00a1Hola Angular 18!';\n}\n</code></pre> <ul> <li>selector: Define la etiqueta HTML donde el componente se renderiza.</li> <li>templateUrl: Especifica la plantilla HTML del componente.</li> <li>styleUrls: Define los estilos asociados.</li> </ul> <p>\ud83d\udca1 Los componentes son reutilizables, lo que te permite construir una interfaz de usuario modular y f\u00e1cil de mantener.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#modulos-organizacion-de-la-aplicacion","title":"M\u00f3dulos: Organizaci\u00f3n de la Aplicaci\u00f3n \ud83d\udcc2","text":"<p>En Angular, los m\u00f3dulos son un conjunto de componentes, servicios y directivas organizados de manera l\u00f3gica. Cada aplicaci\u00f3n Angular tiene al menos un m\u00f3dulo ra\u00edz llamado <code>AppModule</code>.</p> <pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { MiComponente } from './mi-componente/mi-componente.component';\n\n@NgModule({\n  declarations: [AppComponent, MiComponente],\n  imports: [BrowserModule],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> <p>\ud83d\udd0d Tip: Los m\u00f3dulos facilitan la organizaci\u00f3n de grandes aplicaciones. Cada m\u00f3dulo puede agrupar funcionalidades similares o relacionadas.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#plantillas-html-en-angular","title":"Plantillas: HTML en Angular \ud83d\uddbc\ufe0f","text":"<p>Las plantillas en Angular son el c\u00f3digo HTML que define la estructura visual de un componente. Lo especial de las plantillas es que pueden contener expresiones Angular que permiten el uso din\u00e1mico de datos en el HTML.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#ejemplo-de-plantilla","title":"Ejemplo de plantilla:","text":"<pre><code>&lt;h1&gt;{{ titulo }}&lt;/h1&gt;\n&lt;p&gt;Bienvenido a Angular 18, {{ nombre }}!&lt;/p&gt;\n</code></pre> <p>En este ejemplo, las doble llaves (<code>{{ }}</code>) se utilizan para la interpolaci\u00f3n de datos.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#directivas-ngif-ngfor-ngswitch","title":"Directivas: ngIf, ngFor, ngSwitch \u2699\ufe0f","text":"<p>En Angular 18, las directivas siguen siendo una parte fundamental para controlar la visualizaci\u00f3n y la interacci\u00f3n de los componentes con el DOM. Las directivas estructurales como <code>ngIf</code> y <code>ngFor</code> permiten modificar la estructura del DOM din\u00e1micamente en funci\u00f3n de las condiciones y las listas de elementos. Angular 18 introduce nuevas formas de trabajar con estas directivas, haciendo el c\u00f3digo m\u00e1s legible y f\u00e1cil de escribir.</p> <p>Las directivas en Angular se dividen en tres tipos:</p> <ul> <li>Directivas de atributos: Modifican la apariencia o comportamiento de un elemento (por ejemplo, <code>ngClass</code>, <code>ngStyle</code>).</li> <li>Directivas estructurales: Modifican la estructura del DOM (por ejemplo, <code>ngIf</code>, <code>ngFor</code>, <code>ngSwitch</code>).</li> <li>Directivas de componentes: Extienden o reutilizan la l\u00f3gica de componentes.</li> </ul>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#directiva-ngif","title":"Directiva <code>ngIf</code>","text":"<p><code>ngIf</code> es una directiva estructural que se utiliza para renderizar o eliminar un elemento del DOM en funci\u00f3n de una condici\u00f3n booleana.</p> <pre><code>&lt;p *ngIf=\"isLoggedIn\"&gt;\u00a1Bienvenido, usuario!&lt;/p&gt;\n&lt;p *ngIf=\"!isLoggedIn\"&gt;Por favor, inicia sesi\u00f3n.&lt;/p&gt;\n</code></pre> <p>En este ejemplo, si la variable <code>isLoggedIn</code> es <code>true</code>, se muestra el mensaje de bienvenida. Si es <code>false</code>, se muestra un mensaje para que el usuario inicie sesi\u00f3n.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#nueva-sintaxis-if-en-angular-18","title":"Nueva sintaxis @if en Angular 18","text":"<p>En Angular 18, se ha introducido una nueva forma de manejar condicionales en las plantillas: la sintaxis <code>@if</code>. Aunque sigue siendo una funcionalidad interna que se traduce a <code>ngIf</code>, permite escribir condicionales de forma m\u00e1s concisa y clara, especialmente cuando tienes varios bloques condicionales en la misma plantilla.</p> <pre><code>@if (isLoggedIn) {\n  &lt;p&gt;\u00a1Bienvenido, usuario!&lt;/p&gt;\n} @else {\n  &lt;p&gt;Por favor, inicia sesi\u00f3n.&lt;/p&gt;\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#directiva-ngfor","title":"Directiva <code>ngFor</code>","text":"<p><code>ngFor</code> es otra directiva estructural que se utiliza para iterar sobre una lista de elementos y generar un elemento DOM para cada \u00edtem de la lista.</p> <pre><code>&lt;ul&gt;\n  &lt;li *ngFor=\"let item of items\"&gt;\n    {{ item }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Este c\u00f3digo genera una lista din\u00e1mica de elementos basados en el array <code>items</code>. Cada elemento del array se muestra dentro de un <code>&lt;li&gt;</code>.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#nueva-sintaxis-for-en-angular-18","title":"Nueva sintaxis @for en Angular 18","text":"<p>Al igual que <code>@if</code>, Angular 18 introduce la sintaxis <code>@for</code> como una alternativa m\u00e1s moderna para <code>ngFor</code>. Esta nueva sintaxis es \u00fatil cuando deseas un c\u00f3digo m\u00e1s legible y estructurado, especialmente en plantillas largas o complejas.</p> <pre><code>&lt;ul&gt;\n  @for (let item of items) {\n    &lt;li&gt;{{ item }}&lt;/li&gt;\n  }\n&lt;/ul&gt;\n</code></pre> <p>En este caso, Angular convierte autom\u00e1ticamente la sintaxis <code>@for</code> en la directiva <code>ngFor</code>, haciendo que el c\u00f3digo sea m\u00e1s limpio y f\u00e1cil de leer.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#directiva-ngswitch","title":"Directiva <code>ngSwitch</code>","text":"<p>La directiva <code>ngSwitch</code> es \u00fatil cuando necesitas mostrar uno de varios elementos posibles, dependiendo de una condici\u00f3n. Es similar a un <code>switch</code> en programaci\u00f3n, pero aplicado al DOM.</p> <pre><code>&lt;div [ngSwitch]=\"color\"&gt;\n  &lt;p *ngSwitchCase=\"'red'\"&gt;El color es rojo.&lt;/p&gt;\n  &lt;p *ngSwitchCase=\"'blue'\"&gt;El color es azul.&lt;/p&gt;\n  &lt;p *ngSwitchDefault&gt;El color es desconocido.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>En este ejemplo, dependiendo del valor de <code>color</code>, se mostrar\u00e1 uno de los p\u00e1rrafos correspondientes. Si el valor no coincide con ning\u00fan <code>ngSwitchCase</code>, se muestra el contenido de <code>ngSwitchDefault</code>.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#ejemplo-con-if-y-for-en-angular-18","title":"Ejemplo con @if y @for en Angular 18:","text":"<p>Aqu\u00ed tienes un ejemplo completo que combina las nuevas directivas <code>@if</code> y <code>@for</code>:</p> <pre><code>&lt;div&gt;\n  @if (items.length &gt; 0) {\n    &lt;ul&gt;\n      @for (let item of items) {\n        &lt;li&gt;{{ item }}&lt;/li&gt;\n      }\n    &lt;/ul&gt;\n  } @else {\n    &lt;p&gt;No hay elementos disponibles.&lt;/p&gt;\n  }\n&lt;/div&gt;\n</code></pre> <p>En este ejemplo, si el array <code>items</code> contiene elementos, se renderiza una lista con cada uno de ellos. Si no hay elementos, se muestra el mensaje \"No hay elementos disponibles\".</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#enlaces-de-datos-data-binding","title":"Enlaces de Datos (Data Binding) \ud83d\udd04","text":"<p>Angular ofrece varias formas de enlazar los datos entre el modelo y la vista. Los principales tipos de data binding son:</p> <ul> <li>Interpolaci\u00f3n: Vincula los datos de las clases a la vista.</li> <li>Property Binding: Enlaza propiedades de los elementos HTML.</li> <li>Event Binding: Responde a eventos del DOM.</li> <li>Two-way Data Binding: Sincroniza los datos entre la vista y el modelo.</li> </ul>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#ejemplo-de-two-way-data-binding","title":"Ejemplo de Two-way Data Binding:","text":"<pre><code>&lt;input [(ngModel)]=\"nombre\" placeholder=\"Escribe tu nombre\"&gt;\n&lt;p&gt;Tu nombre es: {{ nombre }}&lt;/p&gt;\n</code></pre> <p>El two-way binding permite que los cambios en el input actualicen el modelo, y viceversa. \ud83c\udf89</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#servicios-e-inyeccion-de-dependencias-di","title":"Servicios e Inyecci\u00f3n de Dependencias (DI) \ud83d\udee0\ufe0f","text":"<p>Los servicios en Angular son clases que contienen l\u00f3gica que puede ser compartida a trav\u00e9s de m\u00faltiples componentes. La Inyecci\u00f3n de Dependencias (DI) es el mecanismo que Angular utiliza para inyectar estos servicios en componentes o m\u00f3dulos.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#crear-un-servicio","title":"Crear un servicio:","text":"<pre><code>import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MiServicio {\n  obtenerDatos(): string[] {\n    return ['Dato 1', 'Dato 2', 'Dato 3'];\n  }\n}\n</code></pre> <p>Una vez que tienes el servicio, puedes inyectarlo en un componente mediante el constructor:</p> <pre><code>import { MiServicio } from './mi-servicio.service';\n\n@Component({\n  selector: 'app-mi-componente',\n  template: `&lt;ul&gt;&lt;li *ngFor=\"let dato of datos\"&gt;{{ dato }}&lt;/li&gt;&lt;/ul&gt;`\n})\nexport class MiComponente {\n  datos: string[];\n\n  constructor(private miServicio: MiServicio) {\n    this.datos = this.miServicio.obtenerDatos();\n  }\n}\n</code></pre> <p>As\u00ed, Angular inyecta el servicio autom\u00e1ticamente en el componente. \u00a1Esto hace que la l\u00f3gica de la aplicaci\u00f3n sea reutilizable y mucho m\u00e1s f\u00e1cil de mantener! \ud83d\udd27</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#analisis-del-primer-proyecto-generado-por-angular-cli","title":"An\u00e1lisis del Primer Proyecto Generado por Angular CLI \ud83d\udee0\ufe0f","text":"<p>Cuando creas un nuevo proyecto con <code>ng new</code>, Angular genera una serie de archivos esenciales para que tu aplicaci\u00f3n funcione correctamente. Aqu\u00ed vamos a analizar algunos de los m\u00e1s importantes:</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#maints","title":"<code>main.ts</code>","text":"<p>Este archivo es el punto de entrada de la aplicaci\u00f3n. Angular usa este archivo para iniciar la aplicaci\u00f3n en el navegador.</p> <p><pre><code>import { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { AppComponent } from './app/app.component';\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) =&gt; console.error(err));\n</code></pre> - bootstrapApplication: Arranca la aplicaci\u00f3n con el componente principal <code>AppComponent</code>. - appConfig: Proporciona configuraciones adicionales como rutas y optimizaciones.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#appcomponentts","title":"<code>app.component.ts</code>","text":"<p>Este archivo contiene la l\u00f3gica principal del componente ra\u00edz de la aplicaci\u00f3n, <code>AppComponent</code>. Es donde se define la estructura base de la aplicaci\u00f3n.</p> <p><pre><code>import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'mi-primer-proyecto';\n}\n</code></pre> - selector: Define la etiqueta HTML <code>&lt;app-root&gt;</code> que se utiliza en el archivo <code>index.html</code>. - RouterOutlet: Este es un lugar donde las rutas renderizar\u00e1n los componentes. - title: Una propiedad simple para mostrar un t\u00edtulo.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#appconfigts","title":"<code>app.config.ts</code>","text":"<p>Este archivo define la configuraci\u00f3n global de la aplicaci\u00f3n, como los proveedores de servicios, configuraciones de zona y las rutas.</p> <p><pre><code>import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { routes } from './app.routes';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n};\n</code></pre> - provideRouter: Configura las rutas de la aplicaci\u00f3n. - provideZoneChangeDetection: Mejora la detecci\u00f3n de cambios optimizando la forma en que Angular detecta eventos.</p>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#approutests","title":"<code>app.routes.ts</code>","text":"<p>Este archivo contiene las rutas de la aplicaci\u00f3n. Inicialmente, estar\u00e1 vac\u00edo, pero es aqu\u00ed donde agregar\u00e1s las rutas conforme crezca la aplicaci\u00f3n.</p> <pre><code>import { Routes } from '@angular/router';\n\nexport const routes: Routes = [];\n</code></pre>"},{"location":"ut3-introduccionaangular/2conceptosbasicos/#indexhtml","title":"<code>index.html</code>","text":"<p>El archivo <code>index.html</code> es la p\u00e1gina principal donde Angular insertar\u00e1 la aplicaci\u00f3n. Es muy b\u00e1sico, pero contiene la etiqueta <code>&lt;app-root&gt;</code> donde se mostrar\u00e1 el contenido del componente ra\u00edz.</p> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;MiPrimerProyecto&lt;/title&gt;\n  &lt;base href=\"/\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;app-root&gt;&lt;/app-root&gt; &lt;!-- Aqu\u00ed Angular renderiza tu aplicaci\u00f3n --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Estos archivos proporcionan la estructura y base que necesitas para comenzar a desarrollar con Angular 18. Entender c\u00f3mo interact\u00faan y cu\u00e1l es su prop\u00f3sito es esencial para crear aplicaciones robustas y escalables. \u00a1Con estos conocimientos, ya est\u00e1s listo para personalizar y expandir tu proyecto Angular! \ud83c\udf89</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/","title":"Ruteo y Navegaci\u00f3n en Angular 18: \u00a1Dominando el Flujo de Tu Aplicaci\u00f3n! \ud83e\udded","text":"<p>Una de las caracter\u00edsticas m\u00e1s poderosas de Angular 18 es su capacidad de manejar rutas y navegaci\u00f3n de manera eficiente. Esto permite crear aplicaciones Single Page Applications (SPA) donde el contenido puede cambiar din\u00e1micamente sin recargar toda la p\u00e1gina. \ud83d\ude80 Vamos a explorar c\u00f3mo configurar y dominar el ruteo en Angular para ofrecer una experiencia fluida a tus usuarios.</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#configuracion-de-rutas-en-angular","title":"Configuraci\u00f3n de Rutas en Angular \ud83d\udd27","text":"<p>Antes de empezar a crear rutas, es importante entender c\u00f3mo funciona el enrutador de Angular. El sistema de ruteo permite definir URLs espec\u00edficas para mostrar diferentes componentes en la misma p\u00e1gina. </p> <p>Para configurar el ruteo, necesitas agregar <code>RouterModule</code> en el m\u00f3dulo principal de tu aplicaci\u00f3n:</p> <pre><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { InicioComponent } from './inicio/inicio.component';\nimport { DetallesComponent } from './detalles/detalles.component';\n\nconst routes: Routes = [\n  { path: '', component: InicioComponent }, // Ruta inicial\n  { path: 'detalles', component: DetallesComponent } // Ruta a detalles\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <p>Aqu\u00ed estamos utilizando <code>RouterModule.forRoot()</code> para definir las rutas principales de nuestra aplicaci\u00f3n.</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#creacion-de-rutas-basicas","title":"Creaci\u00f3n de Rutas B\u00e1sicas \ud83d\udee3\ufe0f","text":"<p>Las rutas b\u00e1sicas son f\u00e1ciles de configurar. Simplemente especificamos la URL y el componente que se debe mostrar cuando un usuario navega a esa ruta.</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#ejemplo-de-ruta-basica","title":"Ejemplo de ruta b\u00e1sica:","text":"<pre><code>{ path: 'about', component: AboutComponent }\n</code></pre> <p>Con esta ruta, cada vez que el usuario navega a <code>/about</code>, Angular mostrar\u00e1 el <code>AboutComponent</code>.</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#enlace-a-una-ruta","title":"Enlace a una ruta:","text":"<p>Para navegar entre rutas sin recargar la p\u00e1gina, Angular ofrece el uso de <code>routerLink</code> en las plantillas HTML:</p> <pre><code>&lt;a routerLink=\"/about\"&gt;Acerca de&lt;/a&gt;\n</code></pre> <p>Esto permite al usuario cambiar de ruta sin perder el estado actual de la aplicaci\u00f3n. \ud83c\udf89</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#parametros-de-ruta-y-navegacion-dinamica","title":"Par\u00e1metros de Ruta y Navegaci\u00f3n Din\u00e1mica \ud83d\udd04","text":"<p>A veces necesitamos que nuestras rutas sean din\u00e1micas y acepten par\u00e1metros. Por ejemplo, cuando queremos mostrar los detalles de un producto en funci\u00f3n de su ID.</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#configurar-una-ruta-con-parametros","title":"Configurar una ruta con par\u00e1metros:","text":"<pre><code>{ path: 'producto/:id', component: ProductoComponent }\n</code></pre> <p>En este ejemplo, el <code>:id</code> es un par\u00e1metro que Angular capturar\u00e1 desde la URL.</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#obtener-el-parametro-en-el-componente","title":"Obtener el par\u00e1metro en el componente:","text":"<p>Para acceder a este par\u00e1metro dentro del componente, usamos <code>ActivatedRoute</code>:</p> <pre><code>import { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-producto',\n  template: `&lt;h2&gt;Detalles del producto: {{ id }}&lt;/h2&gt;`\n})\nexport class ProductoComponent {\n  id: string;\n\n  constructor(private route: ActivatedRoute) {\n    this.id = this.route.snapshot.paramMap.get('id')!;\n  }\n}\n</code></pre> <p>\u00a1Con esto, puedes crear vistas din\u00e1micas y espec\u00edficas para cada producto o recurso en tu aplicaci\u00f3n! \ud83d\udecd\ufe0f</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#lazy-loading-carga-perezosa-de-modulos","title":"Lazy Loading: Carga Perezosa de M\u00f3dulos \ud83d\udca4","text":"<p>Lazy loading es una t\u00e9cnica clave para mejorar el rendimiento de las aplicaciones. Permite cargar los m\u00f3dulos solo cuando son necesarios, en lugar de cargar todo el contenido al iniciar la aplicaci\u00f3n.</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#configurar-lazy-loading","title":"Configurar Lazy Loading:","text":"<p>Para habilitar lazy loading, necesitamos dividir nuestras rutas en m\u00f3dulos y cargarlos de manera perezosa.</p> <pre><code>{ \n  path: 'admin', \n  loadChildren: () =&gt; import('./admin/admin.module').then(m =&gt; m.AdminModule) \n}\n</code></pre> <p>Con esta configuraci\u00f3n, el m\u00f3dulo <code>AdminModule</code> se cargar\u00e1 solo cuando el usuario navegue a la ruta <code>/admin</code>.</p> <p>\ud83d\udd0d Beneficio: Lazy loading reduce el tiempo de carga inicial, mejorando la experiencia del usuario, especialmente en aplicaciones grandes.</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#proteccion-de-rutas-guards","title":"Protecci\u00f3n de Rutas: Guards \ud83d\udee1\ufe0f","text":"<p>En muchas aplicaciones, no todas las rutas deben ser accesibles por cualquier usuario. Aqu\u00ed es donde entran en juego los guards. Los guards permiten restringir el acceso a ciertas rutas bas\u00e1ndose en condiciones, como si un usuario est\u00e1 autenticado o no.</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#crear-un-guard","title":"Crear un Guard:","text":"<pre><code>import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private router: Router) {}\n\n  canActivate(): boolean {\n    const isAuthenticated = // L\u00f3gica para comprobar autenticaci\u00f3n\n    if (isAuthenticated) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#usar-el-guard-en-una-ruta","title":"Usar el Guard en una ruta:","text":"<pre><code>{ \n  path: 'perfil', \n  component: PerfilComponent, \n  canActivate: [AuthGuard] \n}\n</code></pre> <p>\ud83d\udd10 Con esta configuraci\u00f3n, solo los usuarios autenticados podr\u00e1n acceder a la ruta <code>/perfil</code>. Si no est\u00e1n autenticados, ser\u00e1n redirigidos a la p\u00e1gina de login.</p>"},{"location":"ut3-introduccionaangular/3ruteoynavegacion/#conclusion","title":"Conclusi\u00f3n \ud83d\udca1","text":"<p>Con el poder del sistema de ruteo de Angular 18, puedes crear aplicaciones din\u00e1micas, eficientes y altamente escalables. Ya sea mediante el uso de par\u00e1metros de ruta, carga perezosa o la protecci\u00f3n de rutas con guards, Angular te brinda todas las herramientas necesarias para ofrecer una experiencia de navegaci\u00f3n fluida y segura para tus usuarios. \u00a1Es hora de implementar todo lo aprendido! \ud83d\udcbb</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/","title":"Gesti\u00f3n del Estado y Comunicaci\u00f3n entre Componentes en Angular 18 \ud83d\udca1","text":"<p>Uno de los desaf\u00edos m\u00e1s importantes al construir aplicaciones web complejas es la gesti\u00f3n del estado y la comunicaci\u00f3n entre componentes. En Angular 18, existen m\u00faltiples formas de lograr una comunicaci\u00f3n efectiva entre componentes, ya sea a trav\u00e9s de inputs y outputs, servicios compartidos o utilizando RxJS para un enfoque m\u00e1s avanzado. \u00a1Sum\u00e9rgete en esta gu\u00eda para dominar la gesti\u00f3n del estado en Angular!</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#input-y-output-comunicacion-padre-hijo","title":"Input y Output: Comunicaci\u00f3n Padre-Hijo \ud83d\udc68\u200d\ud83d\udc67","text":"<p>En Angular, la forma m\u00e1s com\u00fan de pasar datos entre un componente padre y su componente hijo es a trav\u00e9s de los decoradores <code>@Input()</code> y <code>@Output()</code>. Esto facilita una comunicaci\u00f3n clara y estructurada.</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#comunicacion-padre-hijo-con-input","title":"Comunicaci\u00f3n Padre -&gt; Hijo con <code>@Input()</code>","text":"<p>Usamos el decorador <code>@Input()</code> para enviar datos del componente padre al componente hijo.</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#ejemplo-de-uso-de-input","title":"Ejemplo de uso de <code>@Input()</code>:","text":"<pre><code>// Componente hijo\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-hijo',\n  template: `&lt;p&gt;Mensaje del padre: {{ mensaje }}&lt;/p&gt;`\n})\nexport class HijoComponent {\n  @Input() mensaje: string = '';\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#comunicacion-hijo-padre-con-output","title":"Comunicaci\u00f3n Hijo -&gt; Padre con <code>@Output()</code>","text":"<p>Usamos <code>@Output()</code> junto con <code>EventEmitter</code> para enviar datos desde el hijo al padre.</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#ejemplo-de-uso-de-output","title":"Ejemplo de uso de <code>@Output()</code>:","text":"<pre><code>// Componente hijo\nimport { Component, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-hijo',\n  template: `&lt;button (click)=\"enviarMensaje()\"&gt;Enviar mensaje al padre&lt;/button&gt;`\n})\nexport class HijoComponent {\n  @Output() mensajeEvent = new EventEmitter&lt;string&gt;();\n\n  enviarMensaje() {\n    this.mensajeEvent.emit('Hola desde el hijo!');\n  }\n}\n</code></pre> <p>\ud83d\udca1 Tip: \u00a1Usa esta t\u00e9cnica cuando los componentes est\u00e9n directamente relacionados (es decir, padre-hijo)! Ideal para mantener la l\u00f3gica simple y clara.</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#servicios-para-la-comunicacion-entre-componentes-no-relacionados","title":"Servicios para la Comunicaci\u00f3n entre Componentes No Relacionados \ud83d\udef0\ufe0f","text":"<p>Cuando necesitamos comunicar componentes que no est\u00e1n relacionados directamente, la mejor opci\u00f3n es utilizar un servicio compartido. Un servicio en Angular act\u00faa como un puente entre componentes, permitiendo el intercambio de informaci\u00f3n sin necesidad de que los componentes est\u00e9n en una jerarqu\u00eda directa.</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#crear-un-servicio-compartido","title":"Crear un servicio compartido:","text":"<pre><code>import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComunicacionService {\n  private mensaje: string = '';\n\n  setMensaje(mensaje: string) {\n    this.mensaje = mensaje;\n  }\n\n  getMensaje(): string {\n    return this.mensaje;\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#uso-del-servicio-en-componentes","title":"Uso del servicio en componentes:","text":"<pre><code>// Componente 1\nimport { Component } from '@angular/core';\nimport { ComunicacionService } from './comunicacion.service';\n\n@Component({\n  selector: 'app-componente1',\n  template: `&lt;button (click)=\"enviarMensaje()\"&gt;Enviar mensaje&lt;/button&gt;`\n})\nexport class Componente1 {\n  constructor(private comunicacionService: ComunicacionService) {}\n\n  enviarMensaje() {\n    this.comunicacionService.setMensaje('Hola desde Componente 1');\n  }\n}\n</code></pre> <pre><code>// Componente 2\nimport { Component } from '@angular/core';\nimport { ComunicacionService } from './comunicacion.service';\n\n@Component({\n  selector: 'app-componente2',\n  template: `&lt;p&gt;{{ mensaje }}&lt;/p&gt;`\n})\nexport class Componente2 {\n  mensaje: string = '';\n\n  constructor(private comunicacionService: ComunicacionService) {\n    this.mensaje = this.comunicacionService.getMensaje();\n  }\n}\n</code></pre> <p>\ud83d\udd17 Ventaja: Esta t\u00e9cnica permite a los componentes compartir datos de manera eficiente, independientemente de su relaci\u00f3n en el \u00e1rbol de componentes.</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#uso-de-rxjs-para-la-gestion-del-estado","title":"Uso de RxJS para la Gesti\u00f3n del Estado \ud83c\udf00","text":"<p>RxJS (Reactive Extensions for JavaScript) es una poderosa biblioteca que Angular utiliza para manejar flujos de datos as\u00edncronos y la gesti\u00f3n del estado. RxJS proporciona herramientas como Observables, Subjects, y BehaviorSubjects, que son ideales para aplicaciones que necesitan un manejo avanzado del estado y la comunicaci\u00f3n entre componentes.</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#crear-un-servicio-con-behaviorsubject-para-compartir-el-estado","title":"Crear un servicio con <code>BehaviorSubject</code> para compartir el estado:","text":"<pre><code>import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EstadoService {\n  private estadoFuente = new BehaviorSubject&lt;string&gt;('Estado inicial');\n  estadoActual = this.estadoFuente.asObservable();\n\n  cambiarEstado(nuevoEstado: string) {\n    this.estadoFuente.next(nuevoEstado);\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#suscribirse-y-modificar-el-estado","title":"Suscribirse y modificar el estado:","text":"<pre><code>// Componente 1\nimport { Component } from '@angular/core';\nimport { EstadoService } from './estado.service';\n\n@Component({\n  selector: 'app-componente1',\n  template: `&lt;button (click)=\"actualizarEstado()\"&gt;Actualizar estado&lt;/button&gt;`\n})\nexport class Componente1 {\n  constructor(private estadoService: EstadoService) {}\n\n  actualizarEstado() {\n    this.estadoService.cambiarEstado('Nuevo estado desde Componente 1');\n  }\n}\n</code></pre> <pre><code>// Componente 2\nimport { Component, OnInit } from '@angular/core';\nimport { EstadoService } from './estado.service';\n\n@Component({\n  selector: 'app-componente2',\n  template: `&lt;p&gt;Estado actual: {{ estado }}&lt;/p&gt;`\n})\nexport class Componente2 implements OnInit {\n  estado: string = '';\n\n  constructor(private estadoService: EstadoService) {}\n\n  ngOnInit() {\n    this.estadoService.estadoActual.subscribe(estado =&gt; {\n      this.estado = estado;\n    });\n  }\n}\n</code></pre> <p>\ud83d\udd04 Benefit: Al usar RxJS, puedes gestionar el estado de manera reactiva, lo que permite que m\u00faltiples componentes escuchen y reaccionen a cambios de estado en tiempo real.</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#observables-y-promesas-cual-es-la-diferencia","title":"Observables y Promesas: \u00bfCu\u00e1l es la Diferencia? \ud83e\udd14","text":"<p>Tanto los Observables como las Promesas se utilizan para manejar operaciones as\u00edncronas en JavaScript, pero tienen diferencias importantes.</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#promesas","title":"Promesas:","text":"<ul> <li>Representan un solo valor as\u00edncrono.</li> <li>Una vez resueltas o rechazadas, no se pueden reutilizar.</li> <li>No se pueden cancelar.</li> </ul> <pre><code>const promesa = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; resolve('Promesa resuelta'), 1000);\n});\n\npromesa.then(resultado =&gt; console.log(resultado));\n</code></pre>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#observables","title":"Observables:","text":"<ul> <li>Emiten m\u00faltiples valores a lo largo del tiempo.</li> <li>Puedes suscribirte y cancelar la suscripci\u00f3n.</li> <li>Perfecto para manejar flujos de datos continuos.</li> </ul> <pre><code>import { Observable } from 'rxjs';\n\nconst observable = new Observable(subscriber =&gt; {\n  subscriber.next('Valor 1');\n  subscriber.next('Valor 2');\n  setTimeout(() =&gt; {\n    subscriber.next('Valor 3');\n    subscriber.complete();\n  }, 1000);\n});\n\nobservable.subscribe(valor =&gt; console.log(valor));\n</code></pre> <p>\ud83d\udca1 Tip: Usa promesas para operaciones simples que se resuelven una vez, y observables para flujos de datos complejos o continuos.</p>"},{"location":"ut3-introduccionaangular/4comunicacionentrecomponentes/#conclusion","title":"Conclusi\u00f3n \ud83d\udd2e","text":"<p>La gesti\u00f3n del estado y la comunicaci\u00f3n entre componentes en Angular 18 es fundamental para construir aplicaciones escalables y eficientes. Desde la comunicaci\u00f3n entre componentes relacionados mediante <code>@Input</code> y <code>@Output</code>, hasta la utilizaci\u00f3n de RxJS para un manejo reactivo del estado, Angular te ofrece todas las herramientas necesarias para mantener tu aplicaci\u00f3n bajo control. \u00a1Es hora de aplicar lo aprendido y crear aplicaciones asombrosas!</p>"},{"location":"ut3-introduccionaangular/5formularios/","title":"Formularios en Angular 18: Control Total y Flexibilidad \ud83d\udcdd","text":"<p>Los formularios son una parte fundamental de casi cualquier aplicaci\u00f3n web. Angular 18 proporciona dos enfoques poderosos para trabajar con formularios: formularios dirigidos por plantillas y formularios reactivos. Con estos enfoques, puedes crear desde simples campos de entrada hasta formularios complejos con validaciones avanzadas. \u00a1Vamos a explorar c\u00f3mo manejar formularios como un profesional en Angular! \ud83d\ude80</p>"},{"location":"ut3-introduccionaangular/5formularios/#formularios-reactivos-vs-formularios-dirigidos-por-plantillas","title":"Formularios Reactivos vs. Formularios Dirigidos por Plantillas \ud83c\udfaf","text":"<p>Angular nos ofrece dos formas principales de manejar formularios:</p> <ul> <li>Formularios Dirigidos por Plantillas (Template-driven): M\u00e1s adecuados para formularios simples. Se basa en las directivas y el HTML para gestionar los datos.</li> <li>Formularios Reactivos (Reactive Forms): M\u00e1s control y flexibilidad. Ideal para formularios complejos o cuando se necesita mayor manipulaci\u00f3n de los datos en el c\u00f3digo TypeScript.</li> </ul>"},{"location":"ut3-introduccionaangular/5formularios/#diferencias-clave","title":"Diferencias Clave:","text":"Caracter\u00edstica Formularios Dirigidos por Plantillas Formularios Reactivos Estructura Basado en HTML y directivas Basado en TypeScript Manejo de validaciones Declaradas en el HTML Declaradas en el c\u00f3digo Complejidad Ideal para formularios simples Adecuado para formularios complejos Flexibilidad Limitada Alta"},{"location":"ut3-introduccionaangular/5formularios/#creacion-de-formularios-reactivos","title":"Creaci\u00f3n de Formularios Reactivos \ud83d\udee0\ufe0f","text":"<p>Los formularios reactivos en Angular 18 son m\u00e1s robustos y te permiten un mayor control sobre los datos del formulario y las validaciones. Vamos a crear un formulario reactivo simple paso a paso.</p>"},{"location":"ut3-introduccionaangular/5formularios/#1-importar-los-modulos-necesarios","title":"1. Importar los m\u00f3dulos necesarios:","text":"<p>Para trabajar con formularios reactivos, primero debes importar <code>ReactiveFormsModule</code> en tu m\u00f3dulo:</p> <pre><code>import { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [ReactiveFormsModule],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"ut3-introduccionaangular/5formularios/#2-crear-un-formulario-reactivo","title":"2. Crear un formulario reactivo:","text":"<p>Para crear un formulario reactivo, usamos el servicio <code>FormBuilder</code> que nos permite crear grupos de controles de manera sencilla:</p> <pre><code>import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-mi-formulario',\n  template: `\n    &lt;form [formGroup]=\"formulario\" (ngSubmit)=\"enviarFormulario()\"&gt;\n      &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n      &lt;input id=\"nombre\" formControlName=\"nombre\"&gt;\n\n      &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n      &lt;input id=\"email\" formControlName=\"email\"&gt;\n\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n  `\n})\nexport class MiFormularioComponent {\n  formulario: FormGroup;\n\n  constructor(private fb: FormBuilder) {\n    this.formulario = this.fb.group({\n      nombre: [''],\n      email: ['']\n    });\n  }\n\n  enviarFormulario() {\n    console.log(this.formulario.value);\n  }\n}\n</code></pre> <p>Aqu\u00ed, <code>FormGroup</code> agrupa los controles del formulario, y cada campo del formulario es un <code>FormControl</code>. Con esta estructura, Angular puede gestionar el estado y las validaciones de cada control.</p>"},{"location":"ut3-introduccionaangular/5formularios/#validaciones-personalizadas","title":"Validaciones Personalizadas \ud83d\udd12","text":"<p>Una de las grandes ventajas de los formularios reactivos es la capacidad de a\u00f1adir validaciones personalizadas para los campos.</p>"},{"location":"ut3-introduccionaangular/5formularios/#ejemplo-de-validacion-personalizada","title":"Ejemplo de validaci\u00f3n personalizada:","text":"<p>Supongamos que queremos validar un campo de \"nombre\" para que tenga al menos 3 caracteres:</p> <pre><code>import { ValidatorFn, AbstractControl } from '@angular/forms';\n\nexport function minimoTresCaracteres(): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null =&gt; {\n    const valor = control.value;\n    return valor.length &gt;= 3 ? null : { 'minimoTresCaracteres': true };\n  };\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/5formularios/#usar-la-validacion-personalizada-en-el-formulario","title":"Usar la validaci\u00f3n personalizada en el formulario:","text":"<pre><code>this.formulario = this.fb.group({\n  nombre: ['', [minimoTresCaracteres()]],\n  email: ['', [Validators.required, Validators.email]]\n});\n</code></pre>"},{"location":"ut3-introduccionaangular/5formularios/#mostrar-errores-en-la-plantilla","title":"Mostrar errores en la plantilla:","text":"<pre><code>&lt;input id=\"nombre\" formControlName=\"nombre\"&gt;\n&lt;div *ngIf=\"formulario.get('nombre')?.hasError('minimoTresCaracteres')\"&gt;\n  El nombre debe tener al menos 3 caracteres.\n&lt;/div&gt;\n</code></pre> <p>\ud83d\udca1 Tip: Con esta t\u00e9cnica, puedes crear validaciones complejas a nivel de campo o incluso a nivel de grupo de controles.</p>"},{"location":"ut3-introduccionaangular/5formularios/#manejo-de-formularios-complejos-y-arrays-de-controles","title":"Manejo de Formularios Complejos y Arrays de Controles \ud83c\udf10","text":"<p>Los formularios reactivos tambi\u00e9n son perfectos para manejar formularios complejos que contienen arrays de controles. Esto es \u00fatil cuando necesitas manejar listas din\u00e1micas de datos, como una lista de productos o una serie de tareas.</p>"},{"location":"ut3-introduccionaangular/5formularios/#crear-un-array-de-controles","title":"Crear un array de controles:","text":"<p>Supongamos que estamos creando un formulario donde el usuario puede agregar m\u00faltiples n\u00fameros de tel\u00e9fono:</p> <pre><code>import { FormBuilder, FormArray } from '@angular/forms';\n\n@Component({\n  selector: 'app-telefonos',\n  template: `\n    &lt;form [formGroup]=\"formulario\" (ngSubmit)=\"enviarFormulario()\"&gt;\n      &lt;div formArrayName=\"telefonos\"&gt;\n        &lt;div *ngFor=\"let telefono of telefonos.controls; let i = index\"&gt;\n          &lt;label for=\"telefono{{i}}\"&gt;Tel\u00e9fono {{i + 1}}:&lt;/label&gt;\n          &lt;input id=\"telefono{{i}}\" [formControlName]=\"i\"&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;button type=\"button\" (click)=\"agregarTelefono()\"&gt;Agregar tel\u00e9fono&lt;/button&gt;\n      &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n  `\n})\nexport class TelefonosComponent {\n  formulario = this.fb.group({\n    telefonos: this.fb.array([\n      this.fb.control('')\n    ])\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  get telefonos() {\n    return this.formulario.get('telefonos') as FormArray;\n  }\n\n  agregarTelefono() {\n    this.telefonos.push(this.fb.control(''));\n  }\n\n  enviarFormulario() {\n    console.log(this.formulario.value);\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/5formularios/#que-esta-pasando-aqui","title":"\u00bfQu\u00e9 est\u00e1 pasando aqu\u00ed?","text":"<ul> <li>FormArray: Es un array din\u00e1mico de controles. Puedes agregar o eliminar controles sobre la marcha.</li> <li>formArrayName: Permite vincular un array de controles en la plantilla.</li> <li>push(): A\u00f1ade un nuevo control al array.</li> </ul> <p>Con esta t\u00e9cnica, puedes manejar f\u00e1cilmente datos repetitivos o din\u00e1micos en tu formulario. \ud83d\udcf2</p>"},{"location":"ut3-introduccionaangular/5formularios/#conclusion","title":"Conclusi\u00f3n \ud83d\udca1","text":"<p>\u00a1Con Angular 18, los formularios nunca hab\u00edan sido tan flexibles y poderosos! Ya sea que prefieras la simplicidad de los formularios dirigidos por plantillas o la potencia y control de los formularios reactivos, Angular tiene todo lo que necesitas para gestionar datos, validar entradas y manejar formularios complejos con arrays de controles. </p> <p>Ahora que tienes el control total sobre los formularios, \u00a1es hora de poner en pr\u00e1ctica lo aprendido y crear experiencias de usuario asombrosas! \ud83d\udcbb\ud83c\udf89</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/","title":"Consumo de APIs y Manejo de HTTP en Angular 18 \ud83c\udf10","text":"<p>El consumo de APIs es una parte esencial de cualquier aplicaci\u00f3n web moderna, ya que permite interactuar con servicios externos para obtener y enviar datos. Angular 18 facilita este proceso con el poderoso HttpClient, que permite hacer peticiones HTTP de manera eficiente y segura. En este art\u00edculo, aprender\u00e1s c\u00f3mo realizar peticiones HTTP, manejar errores y usar interceptores para optimizar tus aplicaciones. \u00a1Comencemos! \ud83d\ude80</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#realizar-peticiones-get-post-put-y-delete","title":"Realizar Peticiones GET, POST, PUT y DELETE \ud83d\udee0\ufe0f","text":"<p>Angular proporciona m\u00e9todos claros y sencillos para realizar peticiones HTTP utilizando el servicio HttpClient.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#1-realizar-una-peticion-get","title":"1. Realizar una petici\u00f3n GET:","text":"<pre><code>import { HttpClient } from \"@angular/common/http\";\nimport { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"app-mi-componente\",\n  template: `&lt;ul&gt;\n    &lt;li *ngFor=\"let item of items\"&gt;{{ item.name }}&lt;/li&gt;\n  &lt;/ul&gt;`,\n})\nexport class MiComponente implements OnInit {\n  items: any[] = [];\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    this.http.get&lt;any[]&gt;(\"https://api.example.com/items\").subscribe((data) =&gt; {\n      this.items = data;\n    });\n  }\n}\n</code></pre> <p>\ud83d\udd0d Explicaci\u00f3n: Usamos el m\u00e9todo <code>get()</code> para obtener una lista de elementos desde una API. Angular gestiona autom\u00e1ticamente la conversi\u00f3n de la respuesta a un array de objetos.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#2-realizar-una-peticion-post","title":"2. Realizar una petici\u00f3n POST:","text":"<pre><code>this.http\n  .post(\"https://api.example.com/items\", { name: \"Nuevo Item\" })\n  .subscribe((response) =&gt; {\n    console.log(\"Item creado:\", response);\n  });\n</code></pre> <p>\ud83d\udd0d Explicaci\u00f3n: Con el m\u00e9todo <code>post()</code>, enviamos un nuevo item a la API. Es ideal para enviar datos o crear nuevos recursos en el servidor.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#3-realizar-una-peticion-put-actualizacion","title":"3. Realizar una petici\u00f3n PUT (actualizaci\u00f3n):","text":"<pre><code>this.http\n  .put(\"https://api.example.com/items/1\", { name: \"Item Actualizado\" })\n  .subscribe((response) =&gt; {\n    console.log(\"Item actualizado:\", response);\n  });\n</code></pre> <p>\ud83d\udd0d Explicaci\u00f3n: El m\u00e9todo <code>put()</code> se utiliza para actualizar un recurso existente. Aqu\u00ed estamos actualizando el item con el ID 1.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#4-realizar-una-peticion-delete","title":"4. Realizar una petici\u00f3n DELETE:","text":"<pre><code>this.http.delete(\"https://api.example.com/items/1\").subscribe((response) =&gt; {\n  console.log(\"Item eliminado:\", response);\n});\n</code></pre> <p>\ud83d\udd0d Explicaci\u00f3n: <code>delete()</code> elimina un recurso de la API. En este caso, estamos eliminando el item con el ID 1.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#manejo-de-errores-en-peticiones-http","title":"Manejo de Errores en Peticiones HTTP \u26a0\ufe0f","text":"<p>El manejo adecuado de errores es crucial para garantizar que tu aplicaci\u00f3n se comporte correctamente, incluso cuando las peticiones fallan. Angular ofrece el operador <code>catchError()</code> de RxJS para gestionar los errores en las peticiones HTTP.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#ejemplo-de-manejo-de-errores","title":"Ejemplo de manejo de errores:","text":"<pre><code>import { catchError } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\n\nthis.http\n  .get(\"https://api.example.com/items\")\n  .pipe(\n    catchError((error) =&gt; {\n      console.error(\"Error en la petici\u00f3n:\", error);\n      return throwError(\n        () =&gt; new Error(\"Algo sali\u00f3 mal; por favor intenta m\u00e1s tarde.\")\n      );\n    })\n  )\n  .subscribe(\n    (data) =&gt; console.log(data),\n    (error) =&gt; console.error(\"Error de suscripci\u00f3n:\", error)\n  );\n</code></pre> <p>\ud83d\udd0d Explicaci\u00f3n: Usamos <code>catchError()</code> para interceptar cualquier error que ocurra en la petici\u00f3n y manejarlo adecuadamente. En este caso, simplemente estamos imprimiendo el error en la consola y lanzando un mensaje de error personalizado.</p> <p>\ud83d\udca1 Tip: Siempre es una buena pr\u00e1ctica proporcionar mensajes de error claros al usuario final cuando algo sale mal.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#interceptores-http-manipula-las-peticiones-y-respuestas","title":"Interceptores HTTP: Manipula las Peticiones y Respuestas \ud83d\udea6","text":"<p>Los interceptores HTTP en Angular te permiten interceptar cada petici\u00f3n y respuesta para modificarlas, agregar encabezados, manejar autenticaci\u00f3n, y m\u00e1s. Esto es muy \u00fatil, por ejemplo, para agregar tokens de autenticaci\u00f3n a todas las peticiones autom\u00e1ticamente.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#crear-un-interceptor","title":"Crear un interceptor:","text":"<pre><code>import { Injectable } from \"@angular/core\";\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  intercept(\n    req: HttpRequest&lt;any&gt;,\n    next: HttpHandler\n  ): Observable&lt;HttpEvent&lt;any&gt;&gt; {\n    const token = \"mi-token-de-autenticacion\";\n\n    const authReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    return next.handle(authReq);\n  }\n}\n</code></pre> <p>\ud83d\udd0d Explicaci\u00f3n: Este interceptor toma cada petici\u00f3n HTTP, clona la solicitud original, y le a\u00f1ade un encabezado de autorizaci\u00f3n con un token.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#registrar-el-interceptor","title":"Registrar el interceptor:","text":"<p>Para usar el interceptor, debes registrarlo en tu <code>AppModule</code>:</p> <pre><code>import { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { AuthInterceptor } from \"./auth.interceptor\";\n\n@NgModule({\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  ],\n})\nexport class AppModule {}\n</code></pre> <p>\ud83d\udca1 Tip: Puedes tener m\u00faltiples interceptores en tu aplicaci\u00f3n, y Angular los ejecutar\u00e1 en el orden en que est\u00e1n registrados.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#modificacion-de-angular-con-providehttpclient","title":"Modificaci\u00f3n de Angular con provideHttpClient()","text":"<p>En Angular 18, puedes modificar tu aplicaci\u00f3n usando <code>provideHttpClient()</code> en lugar de <code>HttpClientModule</code>. Debes hacer lo siguiente:</p> <ol> <li>Modificar <code>app.config.ts</code>: <pre><code>import { provideHttpClient } from \"@angular/common/http\";\nimport { ApplicationConfig } from \"@angular/core\";\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideHttpClient()],\n};\n</code></pre></li> <li>Eliminar <code>HttpClientModule</code> de <code>AppModule</code>: <pre><code>@NgModule({\n  // Elimina HttpClientModule de aqu\u00ed.\n  imports: [],\n})\nexport class AppModule {}\n</code></pre></li> </ol> <p>Para m\u00e1s detalles sobre esta nueva forma de consumir APIs en Angular, visita la p\u00e1gina oficial: Angular HTTP Setup Guide.</p> <p>Para mantener la estructura modular y reutilizable en Angular, es una buena pr\u00e1ctica crear servicios para manejar las peticiones HTTP y separar la l\u00f3gica de negocio de los componentes. Aqu\u00ed te muestro c\u00f3mo crear un servicio que maneje las peticiones HTTP de manera centralizada.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#crear-un-servicio-para-manejar-peticiones-http","title":"Crear un Servicio para Manejar Peticiones HTTP \ud83d\ude80","text":""},{"location":"ut3-introduccionaangular/6consumodeapis/#paso-1-crear-el-servicio","title":"Paso 1: Crear el Servicio","text":"<p>Para crear un servicio en Angular, utiliza el CLI de Angular con el siguiente comando:</p> <pre><code>ng generate service servicios/data\n</code></pre> <p>Esto generar\u00e1 un archivo <code>data.service.ts</code> que ser\u00e1 el encargado de realizar las peticiones HTTP.</p>"},{"location":"ut3-introduccionaangular/6consumodeapis/#paso-2-implementar-el-servicio","title":"Paso 2: Implementar el Servicio","text":"<pre><code>import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: \"root\", // Esto asegura que el servicio est\u00e9 disponible en toda la aplicaci\u00f3n\n})\nexport class DataService {\n  private apiUrl = \"https://api.example.com/items\";\n\n  constructor(private http: HttpClient) {}\n\n  // M\u00e9todo para obtener datos (GET)\n  getItems(): Observable&lt;any[]&gt; {\n    return this.http.get&lt;any[]&gt;(this.apiUrl).pipe(catchError(this.handleError));\n  }\n\n  // M\u00e9todo para crear un nuevo item (POST)\n  createItem(item: any): Observable&lt;any&gt; {\n    return this.http\n      .post&lt;any&gt;(this.apiUrl, item)\n      .pipe(catchError(this.handleError));\n  }\n\n  // M\u00e9todo para actualizar un item (PUT)\n  updateItem(id: number, item: any): Observable&lt;any&gt; {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.put&lt;any&gt;(url, item).pipe(catchError(this.handleError));\n  }\n\n  // M\u00e9todo para eliminar un item (DELETE)\n  deleteItem(id: number): Observable&lt;any&gt; {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete&lt;any&gt;(url).pipe(catchError(this.handleError));\n  }\n\n  // Manejo de errores\n  private handleError(error: any) {\n    console.error(\"Ocurri\u00f3 un error\", error);\n    return throwError(\n      () =&gt; new Error(\"Ocurri\u00f3 un problema; intenta de nuevo m\u00e1s tarde.\")\n    );\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/6consumodeapis/#explicacion","title":"Explicaci\u00f3n:","text":"<ol> <li><code>getItems()</code>: Realiza una petici\u00f3n HTTP GET para obtener una lista de items.</li> <li><code>createItem()</code>: Realiza una petici\u00f3n HTTP POST para enviar un nuevo item.</li> <li><code>updateItem()</code>: Realiza una petici\u00f3n HTTP PUT para actualizar un item existente.</li> <li><code>deleteItem()</code>: Realiza una petici\u00f3n HTTP DELETE para eliminar un item por su ID.</li> <li><code>handleError()</code>: Un m\u00e9todo privado que se encarga de gestionar los errores utilizando <code>catchError</code> y <code>throwError</code> de RxJS.</li> </ol>"},{"location":"ut3-introduccionaangular/6consumodeapis/#paso-3-usar-el-servicio-en-un-componente","title":"Paso 3: Usar el Servicio en un Componente","text":"<p>Ahora, en el componente donde quieras usar los datos, inyecta este servicio en el constructor y usa los m\u00e9todos creados. A continuaci\u00f3n te muestro c\u00f3mo hacerlo:</p> <pre><code>import { Component, OnInit } from \"@angular/core\";\nimport { DataService } from \"./servicios/data.service\";\n\n@Component({\n  selector: \"app-mi-componente\",\n  template: `\n    &lt;ul&gt;\n      &lt;li *ngFor=\"let item of items\"&gt;{{ item.name }}&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;button (click)=\"agregarItem()\"&gt;Agregar Item&lt;/button&gt;\n  `,\n})\nexport class MiComponente implements OnInit {\n  items: any[] = [];\n\n  constructor(private dataService: DataService) {}\n\n  ngOnInit() {\n    // Obtener los datos al inicializar el componente\n    this.dataService.getItems().subscribe(\n      (data) =&gt; (this.items = data),\n      (error) =&gt; console.error(\"Error al obtener items:\", error)\n    );\n  }\n\n  agregarItem() {\n    const nuevoItem = { name: \"Nuevo Item\" };\n    this.dataService.createItem(nuevoItem).subscribe(\n      (response) =&gt; {\n        console.log(\"Item creado:\", response);\n        this.items.push(response);\n      },\n      (error) =&gt; console.error(\"Error al crear item:\", error)\n    );\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/6consumodeapis/#explicacion_1","title":"Explicaci\u00f3n:","text":"<ol> <li><code>ngOnInit()</code>: Cuando se inicializa el componente, se llama al m\u00e9todo <code>getItems()</code> del servicio para obtener la lista de items desde la API.</li> <li><code>agregarItem()</code>: Este m\u00e9todo llama al servicio para crear un nuevo item y lo agrega a la lista actual de items al recibir la respuesta exitosa.</li> </ol>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/","title":"Pipes y Filtros en Angular 18: Transformaci\u00f3n de Datos en Tiempo Real \ud83d\udee0\ufe0f","text":"<p>Los pipes en Angular son una poderosa herramienta que te permite transformar datos de manera r\u00e1pida y eficiente directamente en las plantillas HTML. En lugar de modificar los datos en el componente, los pipes act\u00faan como filtros que puedes aplicar din\u00e1micamente. Ya sea formatear fechas, mostrar monedas o crear tus propios pipes personalizados, Angular 18 tiene todo lo que necesitas para manipular datos de forma sencilla. \u00a1Vamos a explorar c\u00f3mo usar y crear pipes como un profesional! \ud83d\ude80</p>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#uso-de-pipes-comunes-date-currency-json","title":"Uso de Pipes Comunes: <code>date</code>, <code>currency</code>, <code>json</code> \ud83d\udcc5\ud83d\udcb0","text":"<p>Angular viene con una serie de pipes integrados que te ayudan a formatear y transformar datos de uso com\u00fan. Aqu\u00ed te mostramos algunos de los m\u00e1s utilizados:</p>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#1-pipe-date-formateo-de-fechas","title":"1. Pipe <code>date</code>: Formateo de Fechas \ud83d\udcc6","text":"<p>El pipe <code>date</code> se utiliza para dar formato a las fechas en diferentes estilos.</p> <pre><code>&lt;p&gt;Fecha actual: {{ fecha | date:'fullDate' }}&lt;/p&gt;\n</code></pre> <p>Si <code>fecha</code> contiene el valor <code>2024-09-29</code>, el resultado ser\u00eda algo como:</p> <pre><code>Fecha actual: domingo, 29 de septiembre de 2024\n</code></pre> <p>Puedes personalizar el formato de la fecha usando diferentes patrones como <code>'shortDate'</code>, <code>'longDate'</code>, etc.</p>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#2-pipe-currency-mostrar-moneda","title":"2. Pipe <code>currency</code>: Mostrar Moneda \ud83d\udcb5","text":"<p>El pipe <code>currency</code> formatea un n\u00famero como una moneda, a\u00f1adiendo s\u00edmbolos y decimales autom\u00e1ticamente.</p> <pre><code>&lt;p&gt;Precio: {{ precio | currency:'USD':'symbol':'1.2-2' }}&lt;/p&gt;\n</code></pre> <p>Si <code>precio = 1234.5</code>, el resultado ser\u00eda:</p> <pre><code>Precio: $1,234.50\n</code></pre> <p>Este pipe es extremadamente \u00fatil para aplicaciones de comercio electr\u00f3nico o sistemas financieros.</p>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#3-pipe-json-mostrar-datos-en-formato-json","title":"3. Pipe <code>json</code>: Mostrar Datos en Formato JSON \ud83d\udd0d","text":"<p>Cuando necesitas mostrar objetos JSON en tus plantillas de forma legible, el pipe <code>json</code> es tu mejor aliado.</p> <pre><code>&lt;pre&gt;{{ datos | json }}&lt;/pre&gt;\n</code></pre> <p>Si <code>datos</code> contiene un objeto como <code>{ nombre: 'Angular', version: 18 }</code>, el resultado ser\u00e1:</p> <pre><code>{\n  \"nombre\": \"Angular\",\n  \"version\": 18\n}\n</code></pre> <p>\ud83d\udca1 Tip: Este pipe es excelente para depuraci\u00f3n r\u00e1pida mientras desarrollas.</p>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#creacion-de-pipes-personalizados","title":"Creaci\u00f3n de Pipes Personalizados \ud83d\udee0\ufe0f","text":"<p>Aunque los pipes integrados son \u00fatiles, a veces necesitas transformar los datos de una manera espec\u00edfica para tu aplicaci\u00f3n. Aqu\u00ed es donde entran los pipes personalizados.</p>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#ejemplo-crear-un-pipe-que-capitalice-las-palabras","title":"Ejemplo: Crear un Pipe que Capitalice las Palabras \ud83d\udd24","text":"<p>Vamos a crear un pipe llamado <code>capitalize</code> que convierta la primera letra de cada palabra en may\u00fascula.</p> <pre><code>import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'capitalize'\n})\nexport class CapitalizePipe implements PipeTransform {\n  transform(value: string): string {\n    return value.replace(/\\b\\w/g, char =&gt; char.toUpperCase());\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#uso-del-pipe-en-la-plantilla","title":"Uso del Pipe en la Plantilla:","text":"<pre><code>&lt;p&gt;{{ 'angular es genial' | capitalize }}&lt;/p&gt;\n</code></pre> <p>Resultado:</p> <pre><code>Angular Es Genial\n</code></pre> <p>\ud83d\udca1 Tip: Los pipes personalizados te permiten crear transformaciones a medida seg\u00fan las necesidades espec\u00edficas de tu aplicaci\u00f3n.</p>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#optimizacion-de-rendimiento-con-pipes-puros-e-impuros","title":"Optimizaci\u00f3n de Rendimiento con Pipes Puros e Impuros \u26a1","text":"<p>Angular clasifica los pipes en puros e impuros:</p> <ul> <li>Pipes Puros: Angular los recalcula solo si el valor de entrada cambia. Son ideales para transformaciones que no requieren ser recalculadas frecuentemente. De manera predeterminada, los pipes en Angular son puros.</li> <li>Pipes Impuros: Angular los recalcula en cada ciclo de detecci\u00f3n de cambios, lo que puede afectar el rendimiento si no se usa con cuidado.</li> </ul>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#declarar-un-pipe-impuro","title":"Declarar un Pipe Impuro:","text":"<p>Para crear un pipe impuro, simplemente establece su propiedad <code>pure: false</code> en el decorador <code>@Pipe</code>:</p> <pre><code>import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'impuro',\n  pure: false\n})\nexport class ImpuroPipe implements PipeTransform {\n  transform(value: any[]): any[] {\n    // L\u00f3gica compleja que necesita actualizarse frecuentemente\n    return value.filter(item =&gt; item.activo);\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#uso-de-pipes-impuros","title":"Uso de Pipes Impuros:","text":"<pre><code>&lt;ul&gt;\n  &lt;li *ngFor=\"let item of lista | impuro\"&gt;{{ item.nombre }}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>\ud83d\udd0d Nota: Los pipes impuros pueden ser \u00fatiles en escenarios donde los datos cambian constantemente, pero es importante usarlos con moderaci\u00f3n para evitar problemas de rendimiento.</p>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#cuando-usar-un-pipe-puro-vs-impuro","title":"\u00bfCu\u00e1ndo Usar un Pipe Puro vs. Impuro?","text":"<ul> <li>Pipes Puros: \u00dasalos en la mayor\u00eda de los casos, ya que son m\u00e1s eficientes.</li> <li>Pipes Impuros: Son necesarios cuando el contenido del valor no cambia pero quieres que el pipe vuelva a ejecutarse, como en un arreglo cuyos elementos cambian internamente.</li> </ul>"},{"location":"ut3-introduccionaangular/7pipesyfiltros/#conclusion","title":"Conclusi\u00f3n \ud83d\ude80","text":"<p>Los pipes en Angular 18 te proporcionan una forma flexible y poderosa de transformar y manipular los datos en tus plantillas. Ya sea que est\u00e9s utilizando pipes integrados como <code>date</code> y <code>currency</code>, o creando pipes personalizados, dominar esta funcionalidad te permitir\u00e1 crear interfaces din\u00e1micas y responsivas de manera eficiente. Adem\u00e1s, saber cu\u00e1ndo usar pipes puros e impuros puede marcar una gran diferencia en el rendimiento de tu aplicaci\u00f3n. \u00a1Es hora de poner a prueba estos conocimientos y empezar a transformar datos como un experto en Angular! \ud83c\udf89</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/","title":"Recursos y FAQ sobre Introducci\u00f3n a Angular 18 \ud83d\ude80","text":"<p>\u00a1Bienvenido a la p\u00e1gina de recursos y preguntas frecuentes (FAQ) sobre Angular 18! Aqu\u00ed encontrar\u00e1s respuestas a las preguntas m\u00e1s comunes sobre Angular, recursos esenciales para empezar y explicaciones claras de conceptos clave como Modules, que son fundamentales para cualquier desarrollador que quiera dominar este framework.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#que-es-angular-y-por-que-deberia-usarlo","title":"\u00bfQu\u00e9 es Angular y por qu\u00e9 deber\u00eda usarlo? \ud83e\udd14","text":"<p>Angular es un framework de desarrollo web creado por Google que te permite construir aplicaciones Single Page Applications (SPA) de manera eficiente. Con Angular 18, tienes acceso a un conjunto robusto de herramientas que incluyen TypeScript, HTML optimizado, y muchas funcionalidades listas para usar, como la inyecci\u00f3n de dependencias y el manejo avanzado del enrutamiento.</p> <p>Si buscas una soluci\u00f3n completa y escalable para proyectos grandes o de crecimiento r\u00e1pido, \u00a1Angular es la opci\u00f3n ideal! \ud83c\udfaf</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#que-son-los-modules-en-angular","title":"\u00bfQu\u00e9 son los Modules en Angular? \ud83d\udce6","text":"<p>En Angular, los m\u00f3dulos (Modules) son una pieza central de la arquitectura. Ayudan a organizar y agrupar partes relacionadas de tu aplicaci\u00f3n como componentes, servicios, y directivas. Cada aplicaci\u00f3n de Angular tiene al menos un m\u00f3dulo principal llamado <code>AppModule</code>, pero para proyectos grandes es com\u00fan dividir la aplicaci\u00f3n en varios m\u00f3dulos m\u00e1s peque\u00f1os y organizados.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#estructura-basica-de-un-modulo-en-angular","title":"Estructura B\u00e1sica de un M\u00f3dulo en Angular:","text":"<pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { MiComponente } from './mi-componente/mi-componente.component';\n\n@NgModule({\n  declarations: [AppComponent, MiComponente],  // Declaramos los componentes\n  imports: [BrowserModule],  // Importamos otros m\u00f3dulos\n  bootstrap: [AppComponent]  // Componente principal\n})\nexport class AppModule {}\n</code></pre>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#por-que-son-importantes-los-modulos","title":"\u00bfPor qu\u00e9 son importantes los m\u00f3dulos?","text":"<p>Los m\u00f3dulos facilitan la organizaci\u00f3n y escalabilidad de tu aplicaci\u00f3n. Permiten que el c\u00f3digo sea modular, lo que significa que puedes reutilizar secciones de tu aplicaci\u00f3n en diferentes partes, mantener tu proyecto limpio y bien estructurado, y cargar din\u00e1micamente ciertos m\u00f3dulos solo cuando son necesarios (Lazy Loading).</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#recursos-adicionales","title":"Recursos Adicionales \ud83d\udcda","text":""},{"location":"ut3-introduccionaangular/8recursosyfaq/#1-tutorial-basico-de-introduccion-a-angular","title":"1. Tutorial B\u00e1sico de Introducci\u00f3n a Angular \ud83c\udf10","text":"<p>Si eres nuevo en Angular y quieres aprender los conceptos fundamentales, este tutorial oficial te guiar\u00e1 a trav\u00e9s de los primeros pasos para construir tu primera aplicaci\u00f3n con Angular:</p> <p>Tutorial: Aprende Angular desde Cero</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#2-video-explicacion-completa-de-angular-18","title":"2. V\u00eddeo: Explicaci\u00f3n Completa de Angular 18 \ud83c\udfa5","text":"<p>Si prefieres aprender viendo un v\u00eddeo, el popular youtuber MoureDev ha creado una gu\u00eda visual sobre c\u00f3mo empezar con Angular 18:</p> <p>Ver V\u00eddeo: Angular 18 explicado por MoureDev</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#preguntas-frecuentes-faq","title":"Preguntas Frecuentes (FAQ) \u2753","text":""},{"location":"ut3-introduccionaangular/8recursosyfaq/#1-cual-es-la-diferencia-entre-angular-y-angularjs","title":"1. \u00bfCu\u00e1l es la diferencia entre Angular y AngularJS?","text":"<ul> <li>AngularJS (lanzado en 2010) fue la primera versi\u00f3n del framework, basado en JavaScript. Angular (lanzado en 2016) es una reescritura completa basada en TypeScript, con un enfoque en modularidad, rendimiento y facilidad de mantenimiento.</li> </ul>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#2-que-es-el-cli-de-angular","title":"2. \u00bfQu\u00e9 es el CLI de Angular?","text":"<p>El CLI (Command Line Interface) de Angular es una herramienta poderosa que te permite generar y administrar proyectos Angular f\u00e1cilmente desde la terminal. Con comandos como <code>ng new</code> para crear un proyecto o <code>ng generate</code> para generar componentes, el CLI te ayuda a acelerar tu flujo de trabajo.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#3-como-gestiono-las-rutas-en-angular","title":"3. \u00bfC\u00f3mo gestiono las rutas en Angular?","text":"<p>Angular utiliza un sistema de enrutamiento que permite cargar diferentes componentes en funci\u00f3n de la URL. Puedes definir las rutas dentro de tu aplicaci\u00f3n usando <code>RouterModule</code> y crear rutas para cada p\u00e1gina o secci\u00f3n de tu aplicaci\u00f3n.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#4-como-creo-un-componente-en-angular","title":"4. \u00bfC\u00f3mo creo un componente en Angular?","text":"<p>Puedes crear un componente utilizando el CLI con el siguiente comando: <pre><code>ng generate component nombre-del-componente\n</code></pre> Esto crear\u00e1 autom\u00e1ticamente los archivos necesarios para el nuevo componente y lo registrar\u00e1 en tu m\u00f3dulo principal.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#5-que-ventajas-tiene-el-uso-de-typescript-en-angular","title":"5. \u00bfQu\u00e9 ventajas tiene el uso de TypeScript en Angular?","text":"<p>TypeScript es un superconjunto de JavaScript que a\u00f1ade tipado est\u00e1tico, lo que significa que puedes identificar errores antes de ejecutar tu c\u00f3digo. Tambi\u00e9n proporciona mejores herramientas de autocompletado, refactorizaci\u00f3n y mantenimiento de c\u00f3digo, lo que hace que trabajar con Angular sea m\u00e1s eficiente y menos propenso a errores.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#comandos-utiles-en-angular-18","title":"Comandos \u00datiles en Angular 18 \ud83d\udee0\ufe0f","text":"<p>Angular CLI (Command Line Interface) ofrece una amplia gama de comandos que hacen que el desarrollo en Angular sea mucho m\u00e1s sencillo y r\u00e1pido. Aqu\u00ed est\u00e1n algunos de los m\u00e1s \u00fatiles:</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#1-crear-un-nuevo-proyecto-angular","title":"1. Crear un nuevo proyecto Angular:","text":"<p><pre><code>ng new nombre-del-proyecto\n</code></pre> Este comando genera un nuevo proyecto Angular, incluyendo todas las configuraciones y archivos necesarios.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#2-servir-la-aplicacion-localmente-modo-desarrollo","title":"2. Servir la aplicaci\u00f3n localmente (modo desarrollo):","text":"<p><pre><code>ng serve\n</code></pre> Este comando arranca un servidor de desarrollo y hace que tu aplicaci\u00f3n est\u00e9 disponible en <code>http://localhost:4200/</code>. El servidor detecta autom\u00e1ticamente los cambios y recarga la p\u00e1gina.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#3-generar-un-nuevo-componente","title":"3. Generar un nuevo componente:","text":"<p><pre><code>ng generate component nombre-del-componente\n</code></pre> Este comando genera un componente con todos los archivos necesarios (<code>.ts</code>, <code>.html</code>, <code>.css</code> y <code>.spec.ts</code>), y lo agrega autom\u00e1ticamente a tu m\u00f3dulo principal.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#4-generar-un-nuevo-servicio","title":"4. Generar un nuevo servicio:","text":"<p><pre><code>ng generate service nombre-del-servicio\n</code></pre> Este comando crea un servicio Angular, que puedes usar para manejar la l\u00f3gica de negocio o hacer peticiones HTTP.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#5-crear-una-nueva-ruta-con-enrutador","title":"5. Crear una nueva ruta (con enrutador):","text":"<p><pre><code>ng generate module nombre-del-modulo --route nombre-ruta --module app.module\n</code></pre> Este comando genera un nuevo m\u00f3dulo y una nueva ruta en el sistema de enrutamiento principal.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#6-construir-la-aplicacion-para-produccion","title":"6. Construir la aplicaci\u00f3n para producci\u00f3n:","text":"<p><pre><code>ng build --prod\n</code></pre> Este comando genera una versi\u00f3n optimizada de tu aplicaci\u00f3n para producci\u00f3n, minificando el c\u00f3digo y mejorando el rendimiento.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#7-ejecutar-pruebas-unitarias","title":"7. Ejecutar pruebas unitarias:","text":"<p><pre><code>ng test\n</code></pre> Este comando ejecuta las pruebas unitarias en la aplicaci\u00f3n usando Karma.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#8-ejecutar-pruebas-de-extremo-a-extremo","title":"8. Ejecutar pruebas de extremo a extremo:","text":"<p><pre><code>ng e2e\n</code></pre> Este comando ejecuta pruebas e2e (end-to-end) utilizando Protractor.</p> <p>\ud83d\udca1 Tip: Usa <code>ng help</code> para obtener una lista completa de comandos y sus opciones disponibles.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#mas-temas-avanzados","title":"M\u00e1s Temas Avanzados \ud83d\udcc8","text":""},{"location":"ut3-introduccionaangular/8recursosyfaq/#pipes-y-filtros-en-angular","title":"Pipes y Filtros en Angular","text":"<p>Ya que Angular te permite manipular y transformar datos en tiempo real en las plantillas, puedes aprender m\u00e1s sobre pipes y filtros en esta secci\u00f3n dedicada.</p>"},{"location":"ut3-introduccionaangular/8recursosyfaq/#gracias-por-visitar-nuestra-pagina-de-recursos","title":"\u00a1Gracias por Visitar Nuestra P\u00e1gina de Recursos! \ud83c\udf89","text":"<p>Esperamos que encuentres \u00fatil esta gu\u00eda de recursos y FAQ para empezar a dominar Angular 18. Sigue explorando y aprendiendo con estos tutoriales y v\u00eddeos, y no dudes en sumergirte en proyectos m\u00e1s avanzados. \u00a1El futuro del desarrollo web con Angular te espera! \ud83d\udc68\u200d\ud83d\udcbb\ud83d\udc69\u200d\ud83d\udcbb</p>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/","title":"Proyecto To-Do List con Angular 18 \ud83d\ude80","text":"<p>Este es un proyecto simple pero efectivo de una lista de tareas (To-Do List), desarrollado en Angular 18. El proyecto se basa en componentes modulares de Angular y hace uso de observables de RxJS para gestionar la comunicaci\u00f3n entre los servicios y los componentes. A continuaci\u00f3n, te explicar\u00e9 c\u00f3mo funciona este proyecto y qu\u00e9 hace cada parte del c\u00f3digo.</p>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<p>Este proyecto tiene las siguientes clases clave:</p> <ol> <li>TodoListComponent (<code>todo-list.component.ts</code>)</li> <li>Task (<code>task.ts</code>)</li> <li>TodoService (<code>todo-list.service.ts</code>)</li> </ol> <p>Adem\u00e1s, se utiliza RxJS para manejar los datos as\u00edncronos de las tareas.</p>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#1-todolistcomponent","title":"1. TodoListComponent","text":"<p>Esta es la clase principal que maneja la l\u00f3gica de la lista de tareas y su representaci\u00f3n en el HTML. Aqu\u00ed tienes el c\u00f3digo para que puedas visualizarlo mejor:</p> <pre><code>// todo-list.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { TodoService } from '../../services/todo-list.service';\nimport { Task } from '../../models/task';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-todo-list',\n  standalone: true,\n  imports: [FormsModule, CommonModule],\n  templateUrl: './todo-list.component.html',\n  styleUrls: ['./todo-list.component.css']\n})\nexport class TodoListComponent implements OnInit {\n  tasks: Task[] = [];\n  newTaskTitle: string = '';\n\n  constructor(private todoService: TodoService) { }\n\n  ngOnInit(): void {\n    this.todoService.getTasks().subscribe(tasks =&gt; {\n      this.tasks = tasks;\n    });\n  }\n\n  addTask(): void {\n    if (this.newTaskTitle.trim()) {\n      this.todoService.addTask(this.newTaskTitle);\n      this.newTaskTitle = '';\n    }\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#puntos-clave","title":"Puntos clave:","text":"<ul> <li>Data binding: Usamos <code>[(ngModel)]</code> para realizar el binding de los datos en los formularios de Angular.</li> <li>Observables: La funci\u00f3n <code>ngOnInit</code> se suscribe a los cambios de las tareas a trav\u00e9s del servicio <code>TodoService</code>.</li> <li>addTask: M\u00e9todo que a\u00f1ade nuevas tareas a la lista, siempre y cuando el campo de entrada no est\u00e9 vac\u00edo.</li> </ul>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#2-template-html","title":"2. Template (HTML)","text":"<p>El HTML correspondiente a este componente gestiona la interfaz gr\u00e1fica de la lista de tareas. Contiene un formulario simple para a\u00f1adir tareas y una lista que las despliega.</p> <pre><code>&lt;!-- todo-list.component.html --&gt;\n&lt;div class=\"todo-list\"&gt;\n    &lt;h1&gt;To-Do List&lt;/h1&gt;\n\n    &lt;!-- Formulario para a\u00f1adir nueva tarea --&gt;\n    &lt;input type=\"text\" [(ngModel)]=\"newTaskTitle\" placeholder=\"Nueva tarea\" /&gt;\n    &lt;button (click)=\"addTask()\"&gt;A\u00f1adir Tarea&lt;/button&gt;\n\n    &lt;!-- Lista de tareas --&gt;\n    &lt;ul&gt;\n        &lt;li *ngFor=\"let task of tasks\"&gt;\n            &lt;input type=\"checkbox\" [(ngModel)]=\"task.completed\" /&gt;\n            {{ task.title }}\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#puntos-clave_1","title":"Puntos clave:","text":"<ul> <li>Directiva <code>*ngFor</code>: Genera din\u00e1micamente la lista de tareas a partir del array <code>tasks</code>.</li> <li>Binding en el checkbox: La propiedad <code>[(ngModel)]</code> est\u00e1 vinculada al estado de la tarea, lo que permite marcar las tareas como completadas.</li> </ul>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#3-modelo-de-tarea-taskts","title":"3. Modelo de Tarea (<code>task.ts</code>)","text":"<p>La interfaz <code>Task</code> es muy simple. Define la estructura de los objetos que representan las tareas:</p> <pre><code>// task.ts\nexport interface Task {\n    id: number;\n    title: string;\n    completed: boolean;\n}\n</code></pre> <p>Cada tarea tiene un <code>id</code>, un <code>title</code> y un <code>completed</code> para gestionar si la tarea ha sido completada.</p>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#4-servicio-todoservice-todo-listservicets","title":"4. Servicio TodoService (<code>todo-list.service.ts</code>)","text":"<p>Este servicio es responsable de gestionar la lista de tareas. Aqu\u00ed es donde entran los observables de RxJS para devolver las tareas como un flujo de datos.</p> <pre><code>// todo-list.service.ts\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Task } from '../models/task';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService {\n  private tasks: Task[] = [\n    { id: 1, title: 'Task 1', completed: false },\n    { id: 2, title: 'Task 2', completed: true },\n    { id: 3, title: 'Task 3', completed: false }\n  ];\n\n  constructor() { }\n\n  getTasks(): Observable&lt;Task[]&gt; {\n    return of(this.tasks);\n  }\n\n  addTask(title: string): void {\n    const newTask: Task = {\n      id: this.tasks.length + 1,\n      title: title,\n      completed: false\n    };\n    this.tasks.push(newTask);\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#puntos-clave_2","title":"Puntos clave:","text":"<ul> <li>Observable: Utilizamos el m\u00e9todo <code>of</code> de RxJS para crear un observable a partir de un array de tareas.</li> <li>addTask: Permite a\u00f1adir una nueva tarea al array de tareas locales, incrementando el <code>id</code> y a\u00f1adiendo el t\u00edtulo proporcionado.</li> </ul>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#observables-y-of-en-rxjs","title":"Observables y <code>of</code> en RxJS \ud83d\udce1","text":"<p>En este proyecto, el Observable es clave para manejar datos de manera as\u00edncrona. RxJS es una librer\u00eda que Angular utiliza para manejar flujos de datos. En este caso, usamos el m\u00e9todo <code>of</code> para emitir un array de tareas como un flujo de datos.</p> <pre><code>getTasks(): Observable&lt;Task[]&gt; {\n  return of(this.tasks);\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#que-es-of","title":"\u00bfQu\u00e9 es <code>of</code>?","text":"<p>El operador <code>of</code> de RxJS crea un observable a partir de cualquier cosa que le pases, en este caso, un array de tareas. Este flujo de datos puede ser observado (<code>subscribe</code>) por otros componentes como <code>TodoListComponent</code>, permitiendo que se actualicen autom\u00e1ticamente cuando hay cambios en los datos.</p>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#diagrama-de-flujo-mermaid","title":"Diagrama de flujo \ud83e\udde9 (Mermaid)","text":"<p>Aqu\u00ed tienes un diagrama que resume el flujo de c\u00f3mo se maneja una nueva tarea en este proyecto:</p> <pre><code>graph TD;\n    A[Nueva Tarea] --&gt; B[Servicio addTask];\n    B --&gt; C[Observable getTasks];\n    C --&gt; D[TodoListComponent];\n    D --&gt; E[Actualizar Lista de Tareas];</code></pre>"},{"location":"ut3-introduccionaangular/9explicacionproyectotodolist/#conclusion","title":"Conclusi\u00f3n","text":"<p>Este proyecto simple pero eficaz te ofrece una lista de tareas totalmente funcional utilizando Angular 18 y RxJS. La arquitectura modular facilita la escalabilidad y el mantenimiento, permitiendo que puedas seguir a\u00f1adiendo funcionalidades como la persistencia de datos o la integraci\u00f3n con una API backend.</p> <p>\u00a1Espero que esta explicaci\u00f3n te haya servido para comprender mejor c\u00f3mo se organiza este proyecto! \ud83d\udcbb</p>"},{"location":"ut3-introduccionaangular/help/","title":"Help","text":""},{"location":"ut3-introduccionaangular/help/#indice-detallado-introduccion-a-angular-18","title":"\u00cdndice Detallado: Introducci\u00f3n a Angular 18","text":"<ol> <li>Introducci\u00f3n a Angular</li> <li>1.1. \u00bfQu\u00e9 es Angular?</li> <li>1.2. Historia y evoluci\u00f3n del framework.</li> <li>1.3. Angular vs. Otros Frameworks (React, Vue).</li> <li>1.4. Caracter\u00edsticas y ventajas de usar Angular.</li> <li>1.5. Casos de uso: \u00bfCu\u00e1ndo usar Angular?</li> <li>1.6. Instalaci\u00f3n y Configuraci\u00f3n de Angular.</li> <li>1.7. Primer Proyecto con Angular.</li> <li> <p>1.8. Estructura de un Proyecto Angular.</p> </li> <li> <p>Conceptos B\u00e1sicos de Angular</p> </li> <li>3.1. Componentes: definici\u00f3n y uso.</li> <li>3.2. M\u00f3dulos: organizaci\u00f3n de la aplicaci\u00f3n.</li> <li>3.3. Plantillas: HTML en Angular.</li> <li>3.4. Directivas: ngIf, ngFor, ngSwitch.</li> <li>3.5. Enlaces de datos (Data Binding).</li> <li> <p>3.6. Servicios e Inyecci\u00f3n de Dependencias (DI).</p> </li> <li> <p>Ruteo y Navegaci\u00f3n en Angular</p> </li> <li>4.1. Configuraci\u00f3n de rutas en Angular.</li> <li>4.2. Creaci\u00f3n de rutas b\u00e1sicas.</li> <li>4.3. Par\u00e1metros de ruta y navegaci\u00f3n din\u00e1mica.</li> <li>4.4. Lazy Loading: carga perezosa de m\u00f3dulos.</li> <li> <p>4.5. Protecci\u00f3n de rutas: Guards.</p> </li> <li> <p>Gesti\u00f3n del Estado y Comunicaci\u00f3n entre Componentes</p> </li> <li>5.1. Input y Output: comunicaci\u00f3n padre-hijo.</li> <li>5.2. Servicios para la comunicaci\u00f3n entre componentes no relacionados.</li> <li>5.3. Uso de RxJS para la gesti\u00f3n del estado.</li> <li> <p>5.4. Observables y promesas.</p> </li> <li> <p>Formularios en Angular</p> </li> <li>6.1. Formularios reactivos vs. Formularios dirigidos por plantillas.</li> <li>6.2. Creaci\u00f3n de formularios reactivos.</li> <li>6.3. Validaciones personalizadas.</li> <li> <p>6.4. Manejo de formularios complejos y arrays de controles.</p> </li> <li> <p>Consumo de APIs y Manejo de HTTP</p> </li> <li>7.1. Introducci\u00f3n a HttpClientModule.</li> <li>7.2. Realizar peticiones GET, POST, PUT y DELETE.</li> <li>7.3. Manejo de errores en peticiones HTTP.</li> <li> <p>7.4. Interceptores HTTP.</p> </li> <li> <p>Pipes y Filtros en Angular</p> </li> <li>8.1. Uso de pipes comunes: date, currency, json.</li> <li>8.2. Creaci\u00f3n de pipes personalizados.</li> <li>8.3. Optimizaci\u00f3n de rendimiento con pipes puros e impuros.</li> </ol>"},{"location":"ut3-introduccionaangular/ideasejs/","title":"Ideasejs","text":"<p>Aqu\u00ed tienes 10 ideas de ejercicios enfocados en la creaci\u00f3n de componentes con Angular, utilizando <code>*ngIf</code>, <code>*ngFor</code>, y servicios (<code>services</code>). Estos ejercicios est\u00e1n dise\u00f1ados para que los estudiantes practiquen c\u00f3mo crear componentes, gestionar el estado de la aplicaci\u00f3n, y manipular datos mediante directivas estructurales y servicios.</p>"},{"location":"ut3-introduccionaangular/ideasejs/#ejercicios-para-practicar-componentes-ngif-ngfor-y-servicios","title":"Ejercicios para Practicar Componentes, <code>*ngIf</code>, <code>*ngFor</code>, y Servicios","text":"<ol> <li>Lista de Tareas Pendientes (To-Do List):</li> <li>Objetivo: Crear una aplicaci\u00f3n de lista de tareas donde se puedan a\u00f1adir, mostrar y eliminar tareas.</li> <li> <p>Detalles:</p> <ul> <li>Crear un componente para la lista de tareas y otro para a\u00f1adir nuevas tareas.</li> <li>Utilizar <code>*ngFor</code> para mostrar la lista de tareas y <code>*ngIf</code> para mostrar un mensaje si la lista est\u00e1 vac\u00eda.</li> <li>Crear un servicio para gestionar las tareas (a\u00f1adir, obtener y eliminar).</li> </ul> </li> <li> <p>Galer\u00eda de Im\u00e1genes Din\u00e1mica:</p> </li> <li>Objetivo: Mostrar una galer\u00eda de im\u00e1genes obtenida desde un servicio.</li> <li> <p>Detalles:</p> <ul> <li>Crear un servicio que devuelva un array de URLs de im\u00e1genes.</li> <li>Utilizar <code>*ngFor</code> para mostrar las im\u00e1genes y <code>*ngIf</code> para mostrar un mensaje cuando no haya im\u00e1genes.</li> <li>A\u00f1adir funcionalidad para ocultar o mostrar im\u00e1genes utilizando <code>*ngIf</code>.</li> </ul> </li> <li> <p>Gestor de Productos de una Tienda:</p> </li> <li>Objetivo: Crear un componente para gestionar productos de una tienda con opciones para a\u00f1adir y eliminar productos.</li> <li> <p>Detalles:</p> <ul> <li>Crear un servicio que gestione los productos (simular una API).</li> <li>Usar <code>*ngFor</code> para mostrar la lista de productos y <code>*ngIf</code> para mostrar un mensaje de \"No hay productos\" cuando la lista est\u00e9 vac\u00eda.</li> <li>A\u00f1adir botones para a\u00f1adir nuevos productos y eliminarlos.</li> </ul> </li> <li> <p>Tabla de Usuarios con Filtro:</p> </li> <li>Objetivo: Crear una tabla de usuarios que permita filtrar los datos obtenidos de un servicio.</li> <li> <p>Detalles:</p> <ul> <li>Crear un servicio que devuelva un listado de usuarios.</li> <li>Usar <code>*ngFor</code> para renderizar los usuarios en una tabla.</li> <li>Utilizar <code>*ngIf</code> para mostrar u ocultar filas basadas en un filtro de b\u00fasqueda.</li> </ul> </li> <li> <p>Componentes de Comentarios con Respuestas:</p> </li> <li>Objetivo: Crear un sistema de comentarios donde cada comentario puede tener respuestas anidadas.</li> <li> <p>Detalles:</p> <ul> <li>Usar <code>*ngFor</code> para mostrar comentarios y subcomentarios.</li> <li>Crear un servicio que gestione los comentarios y respuestas.</li> <li>Usar <code>*ngIf</code> para mostrar un formulario de respuesta debajo de cada comentario.</li> </ul> </li> <li> <p>Panel de Control de Visibilidad de Elementos:</p> </li> <li>Objetivo: Crear un panel que permita alternar la visibilidad de diferentes secciones.</li> <li> <p>Detalles:</p> <ul> <li>Crear varios componentes (como estad\u00edsticas, gr\u00e1ficos, reportes).</li> <li>Utilizar <code>*ngIf</code> para mostrar u ocultar cada secci\u00f3n seg\u00fan las opciones seleccionadas en el panel de control.</li> <li>Gestionar el estado de visibilidad con un servicio.</li> </ul> </li> <li> <p>Encuesta Din\u00e1mica:</p> </li> <li>Objetivo: Desarrollar un componente de encuesta donde las preguntas y opciones se gestionen mediante servicios.</li> <li> <p>Detalles:</p> <ul> <li>Crear un servicio que proporcione las preguntas y opciones.</li> <li>Usar <code>*ngFor</code> para mostrar cada pregunta con sus opciones.</li> <li>Mostrar un mensaje con <code>*ngIf</code> cuando la encuesta est\u00e9 completada.</li> </ul> </li> <li> <p>Cartera de Inversiones:</p> </li> <li>Objetivo: Crear un componente para mostrar una cartera de inversiones con datos obtenidos de un servicio.</li> <li> <p>Detalles:</p> <ul> <li>Utilizar un servicio para obtener la lista de inversiones.</li> <li>Mostrar los datos de inversiones con <code>*ngFor</code>.</li> <li>Utilizar <code>*ngIf</code> para mostrar mensajes como \"No hay inversiones activas\".</li> </ul> </li> <li> <p>Listado de Eventos con Detalles:</p> </li> <li>Objetivo: Mostrar un listado de eventos y permitir ver m\u00e1s detalles de cada evento.</li> <li> <p>Detalles:</p> <ul> <li>Crear un servicio que devuelva eventos (nombre, fecha, descripci\u00f3n).</li> <li>Usar <code>*ngFor</code> para mostrar los eventos y <code>*ngIf</code> para mostrar los detalles cuando se selecciona un evento espec\u00edfico.</li> <li>Agregar funcionalidad para ocultar o mostrar detalles utilizando <code>*ngIf</code>.</li> </ul> </li> <li> <p>Cat\u00e1logo de Libros:</p> <ul> <li>Objetivo: Desarrollar un cat\u00e1logo de libros donde se muestren los libros disponibles y se puedan agregar nuevos.</li> <li>Detalles:</li> <li>Crear un servicio para gestionar los libros (obtener, a\u00f1adir y eliminar).</li> <li>Mostrar los libros con <code>*ngFor</code> y utilizar <code>*ngIf</code> para mostrar un mensaje si no hay libros disponibles.</li> <li>Implementar botones para eliminar libros y formularios para agregar nuevos.</li> </ul> </li> </ol> <p>Estos ejercicios son excelentes para que los estudiantes practiquen la creaci\u00f3n y manipulaci\u00f3n de componentes en Angular, adem\u00e1s de la interacci\u00f3n con servicios y la utilizaci\u00f3n de <code>*ngIf</code> y <code>*ngFor</code> para gestionar la visualizaci\u00f3n de datos en la interfaz.</p>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/","title":"Proyecto: Parque de Dinosaurios - API para Gesti\u00f3n de Parque Tem\u00e1tico de Dinosaurios","text":""},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#descripcion-general","title":"Descripci\u00f3n General","text":"<p>Este proyecto est\u00e1 inspirado en juegos como Jurassic World Evolution y permite a los usuarios gestionar su propio parque tem\u00e1tico de dinosaurios. Los usuarios deben cuidar de diferentes especies, construir recintos adecuados, y atraer visitantes al parque. La API facilita operaciones como el registro e inicio de sesi\u00f3n, la gesti\u00f3n de recursos del parque, la compra de dinosaurios y recintos, y la respuesta a situaciones de emergencia.</p>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#objetivo-del-proyecto","title":"Objetivo del Proyecto","text":"<p>Desarrollar una API en Node.js con Express que permita a los usuarios realizar las siguientes acciones: 1. Administrar su propio parque de dinosaurios. 2. Comprar y desbloquear diferentes especies de dinosaurios y construir recintos espec\u00edficos para cada tipo. 3. Gestionar situaciones de emergencia dentro del parque. 4. Visualizar la evoluci\u00f3n y progreso del parque mediante un sistema de clicks que desbloquea mejoras con cada acci\u00f3n.</p>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#funcionalidades-principales","title":"Funcionalidades Principales","text":""},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#autenticacion-de-usuario","title":"Autenticaci\u00f3n de Usuario","text":"<ul> <li>Registro e inicio de sesi\u00f3n: Los usuarios deben poder registrarse y luego autenticarse para gestionar su parque de manera segura.</li> <li>Personalizaci\u00f3n del parque: Cada usuario tiene un parque \u00fanico con su propio progreso, especies compradas y recintos construidos.</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#gestion-del-parque","title":"Gesti\u00f3n del Parque","text":"<ul> <li>Informaci\u00f3n general del parque: Consultar el estado actual del parque, que incluye:</li> <li>N\u00famero y tipo de dinosaurios descubiertos.</li> <li>N\u00famero de visitantes actuales en el parque.</li> <li>Recintos construidos y recursos disponibles.</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#sistema-de-compra-y-evolucion","title":"Sistema de Compra y Evoluci\u00f3n","text":"<ul> <li>Dinero y monedas: Los usuarios ganan monedas seg\u00fan su actividad y pueden usarlas para comprar dinosaurios y construir recintos.</li> <li>Desbloqueo por clicks: Cada cierto n\u00famero de clicks se desbloquean nuevas especies de dinosaurios o recintos.</li> <li>Monedas y recursos: El costo de cada dinosaurio y recinto aumenta de forma escalonada a medida que el usuario progresa.</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#estructura-de-datos","title":"Estructura de Datos","text":"<p>Para almacenar los datos necesarios, se utilizan varios archivos JSON: 1. <code>users.json</code>: Almacena la informaci\u00f3n de los usuarios (ID, correo, contrase\u00f1a). 2. <code>parks.json</code>: Informaci\u00f3n sobre el estado de los parques, incluyendo dinosaurios comprados, recintos construidos, y monedas acumuladas. 3. <code>dinosaurs.json</code>: Detalles de las especies de dinosaurios disponibles para compra. 4. <code>recintos.json</code>: Informaci\u00f3n sobre los tipos de recintos disponibles para construcci\u00f3n. 5. <code>emergencies.json</code>: Lista de posibles situaciones de emergencia que pueden afectar al parque.</p>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#endpoints-de-la-api","title":"Endpoints de la API","text":""},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#autenticacion-auth","title":"Autenticaci\u00f3n (<code>/auth</code>)","text":"<ul> <li>POST <code>/auth/register</code>: Registrar un nuevo usuario.</li> <li>POST <code>/auth/login</code>: Iniciar sesi\u00f3n y obtener un token de autenticaci\u00f3n.</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#gestion-del-parque-park","title":"Gesti\u00f3n del Parque (<code>/park</code>)","text":"<ul> <li>GET <code>/park/status</code>: Consultar el estado actual del parque.</li> <li>POST <code>/park/update</code>: Actualizar los datos del parque (compra de dinosaurios, construcci\u00f3n de recintos, monedas disponibles).</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#dinosaurios-y-recintos-dinosaurs-y-recintos","title":"Dinosaurios y Recintos (<code>/dinosaurs</code> y <code>/recintos</code>)","text":"<ul> <li>GET <code>/dinosaurs</code>: Obtener informaci\u00f3n sobre los dinosaurios disponibles para compra.</li> <li>GET <code>/recintos</code>: Obtener informaci\u00f3n sobre los recintos.</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#uso-de-jwt-json-web-tokens","title":"Uso de JWT (JSON Web Tokens)","text":"<p>Para mantener segura la sesi\u00f3n de los usuarios, esta API utiliza JWT (JSON Web Tokens) para la autenticaci\u00f3n. JWT es un est\u00e1ndar de seguridad que permite crear tokens de acceso que contienen informaci\u00f3n verificable sin necesidad de acceder al servidor. </p>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#que-es-un-jwt","title":"\u00bfQu\u00e9 es un JWT?","text":"<p>Un JWT es un token que se genera tras la autenticaci\u00f3n de un usuario. Este token contiene informaci\u00f3n codificada que puede verificarse y descifrarse usando una clave secreta. En el contexto de esta API, el token se env\u00eda al cliente cuando el usuario inicia sesi\u00f3n y, a partir de ese momento, el cliente debe incluir el token en las cabeceras de cada solicitud para demostrar que est\u00e1 autenticado.</p>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#ejemplo-de-uso-del-token-jwt","title":"Ejemplo de Uso del Token JWT","text":"<p>Al iniciar sesi\u00f3n, el token JWT devuelto debe almacenarse en el navegador (por ejemplo, en <code>localStorage</code>) para que pueda reutilizarse en futuras solicitudes.</p>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#ejemplo-en-una-aplicacion-angular","title":"Ejemplo en una aplicaci\u00f3n Angular:","text":"<pre><code>import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ParkService {\n\n  constructor(private http: HttpClient) {}\n\n  getParkStatus(): Observable&lt;any&gt; {\n    // Obtener el token desde localStorage\n    const token = localStorage.getItem('token');\n\n    // Configurar la cabecera de autorizaci\u00f3n con el token\n    const headers = {\n      headers: new HttpHeaders({\n        \"Authorization\": `Bearer ${token}`\n      })\n    };\n\n    // Realizar la solicitud GET al endpoint del estado del parque\n    return this.http.get('http://localhost:3000/park/status', headers);\n  }\n}\n</code></pre>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#explicacion-de-los-pasos","title":"Explicaci\u00f3n de los Pasos:","text":"<ol> <li>Obtener el Token: Se accede a <code>localStorage</code> para recuperar el token de autenticaci\u00f3n guardado despu\u00e9s del login.</li> <li>Configurar Cabecera de Autorizaci\u00f3n: Se crea una cabecera HTTP que incluye el token en el formato <code>Bearer &lt;token&gt;</code>.</li> <li>Realizar la Solicitud HTTP: Utilizando el servicio <code>HttpClient</code> de Angular, se env\u00eda una solicitud GET al endpoint de la API, incluyendo las cabeceras de autorizaci\u00f3n.</li> </ol>"},{"location":"ut3-introduccionaangular/proyectos/jurassicworld/enunciado/#uso-en-componentes-de-angular","title":"Uso en Componentes de Angular","text":"<p>Desde un componente Angular, el token JWT puede utilizarse inyectando el servicio que gestiona las solicitudes autenticadas. A continuaci\u00f3n, se muestra un ejemplo de c\u00f3mo suscribirse a la respuesta de la API:</p> <pre><code>import { Component, OnInit } from '@angular/core';\nimport { ParkService } from './park.service';\n\n@Component({\n  selector: 'app-park-status',\n  templateUrl: './park-status.component.html'\n})\nexport class ParkStatusComponent implements OnInit {\n\n  parkStatus: any;\n\n  constructor(private parkService: ParkService) {}\n\n  ngOnInit(): void {\n    this.parkService.getParkStatus().subscribe(\n      data =&gt; {\n        this.parkStatus = data;\n        console.log('Estado del parque:', this.parkStatus);\n      },\n      error =&gt; {\n        console.error('Error al obtener el estado del parque:', error);\n      }\n    );\n  }\n}\n</code></pre> <p>Con este esquema, los usuarios podr\u00e1n acceder de forma segura a su parque y gestionar los recursos sin necesidad de autenticarse en cada solicitud, gracias al token JWT almacenado.</p>"},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/","title":"Enunciado","text":""},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/#ejercicio-lista-de-reproduccion-de-musica","title":"Ejercicio: Lista de Reproducci\u00f3n de M\u00fasica \ud83c\udfb5","text":"<p>En este ejercicio, desarrollar\u00e1s una lista de reproducci\u00f3n de m\u00fasica similar a una lista de tareas, pero con canciones en lugar de tareas. Los usuarios podr\u00e1n agregar canciones a la lista, ver las canciones actuales y marcar canciones como \"reproducidas\". Trabajar\u00e1s con componentes personalizados y un servicio que proporcionar\u00e1 los datos de las canciones utilizando un observable.</p>"},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/#objetivos","title":"Objetivos:","text":"<ol> <li>Crear un componente personalizado para manejar la lista de reproducci\u00f3n.</li> <li>Crear un servicio que provea las canciones mediante un observable.</li> <li>Implementar un formulario para agregar nuevas canciones a la lista usando binding.</li> <li>Permitir que los usuarios marquen canciones como \"reproducidas\".</li> <li>Renderizar la lista de canciones de forma din\u00e1mica.</li> </ol>"},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<ol> <li> <p>Componente de Lista de Reproducci\u00f3n: El componente <code>MusicPlaylistComponent</code> ser\u00e1 el responsable de manejar la lista de reproducci\u00f3n de canciones, permitiendo a los usuarios agregar nuevas canciones y marcar canciones como reproducidas.</p> </li> <li> <p>Modelo de Canci\u00f3n: La interfaz <code>Song</code> definir\u00e1 la estructura de las canciones en la lista de reproducci\u00f3n. Cada canci\u00f3n tendr\u00e1 un t\u00edtulo, un ID \u00fanico y un estado que indicar\u00e1 si ha sido reproducida o no.</p> </li> <li> <p>Servicio de M\u00fasica: El servicio <code>MusicService</code> proporcionar\u00e1 la lista de canciones mediante un observable y permitir\u00e1 agregar nuevas canciones. Este servicio simular\u00e1 la obtenci\u00f3n de datos desde una fuente externa.</p> </li> </ol>"},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/#1-componente-musicplaylistcomponent","title":"1. Componente: MusicPlaylistComponent","text":"<p>Debes crear un componente que:</p> <ul> <li>Contenga un formulario que permita a los usuarios agregar una nueva canci\u00f3n a la lista.</li> <li>Renderice una lista de canciones.</li> <li>Permita marcar canciones como \"reproducidas\".</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/#2-plantilla-html","title":"2. Plantilla HTML","text":"<p>La plantilla HTML debe contener:</p> <ul> <li>Un campo de texto y un bot\u00f3n para que el usuario pueda a\u00f1adir una nueva canci\u00f3n a la lista.</li> <li>Una lista que muestre las canciones actuales.</li> <li>Un checkbox al lado de cada canci\u00f3n para marcarla como reproducida.</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/#3-modelo-song","title":"3. Modelo: Song","text":"<p>Debes crear una interfaz <code>Song</code> que incluya:</p> <ul> <li><code>id</code>: Un n\u00famero \u00fanico para identificar la canci\u00f3n.</li> <li><code>title</code>: El t\u00edtulo de la canci\u00f3n.</li> <li><code>played</code>: Un valor booleano que indique si la canci\u00f3n ha sido reproducida o no.</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/#4-servicio-musicservice","title":"4. Servicio: MusicService","text":"<p>Crea un servicio que:</p> <ul> <li>Proporcione una lista inicial de canciones.</li> <li>Permita agregar nuevas canciones a la lista.</li> <li>Utilice un observable para devolver la lista de canciones y cualquier cambio que se haga en ella.</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/#funcionalidades-clave","title":"Funcionalidades Clave:","text":"<ol> <li>A\u00f1adir canciones: Los usuarios deben poder agregar nuevas canciones a la lista a trav\u00e9s de un formulario.</li> <li>Marcar canciones como reproducidas: Los usuarios podr\u00e1n marcar las canciones como reproducidas usando un checkbox.</li> <li>Renderizado din\u00e1mico: La lista de canciones debe actualizarse autom\u00e1ticamente cuando se a\u00f1adan nuevas canciones o se marquen como reproducidas.</li> </ol>"},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/#desafios-adicionales","title":"Desaf\u00edos Adicionales:","text":"<ol> <li>Filtrar canciones: Implementa una funcionalidad para filtrar las canciones reproducidas o no reproducidas.</li> <li>Eliminar canciones: A\u00f1ade la posibilidad de eliminar canciones de la lista.</li> </ol>"},{"location":"ut3-introduccionaangular/proyectos/music-playlist/enunciado/#diagrama-de-aclaratorio","title":"Diagrama de aclaratorio","text":"<pre><code>graph TD;\n    A[MusicPlaylistComponent] --&gt; B[MusicService];\n    B --&gt; C[Song Model];\n    A --&gt;|Llama| B;\n    B --&gt;|Usa| C;</code></pre>"},{"location":"ut3-introduccionaangular/proyectos/routing/enunciado/","title":"Plataforma de Cursos Online con Routing en Angular","text":""},{"location":"ut3-introduccionaangular/proyectos/routing/enunciado/#descripcion-del-proyecto","title":"Descripci\u00f3n del Proyecto","text":"<p>El objetivo de este proyecto es crear una plataforma de cursos online utilizando Angular. En esta plataforma, los usuarios pueden ver una lista de cursos, navegar entre los detalles de cada curso, e inscribirse en ellos. El proyecto har\u00e1 uso de Angular Routing para gestionar la navegaci\u00f3n entre diferentes vistas, como la lista de cursos, el perfil del usuario, la p\u00e1gina de detalles de un curso, y la p\u00e1gina de inscripci\u00f3n.</p>"},{"location":"ut3-introduccionaangular/proyectos/routing/enunciado/#funcionalidades-del-proyecto","title":"Funcionalidades del Proyecto","text":"<ol> <li>Home (P\u00e1gina Principal): La p\u00e1gina principal muestra un listado general de los cursos disponibles.</li> <li>Detalles del Curso: Al hacer clic en un curso, se navega a una p\u00e1gina de detalles que muestra informaci\u00f3n m\u00e1s detallada del curso seleccionado.</li> <li>Perfil del Usuario: Una p\u00e1gina que muestra el perfil del usuario registrado, donde puede ver su informaci\u00f3n personal y los cursos en los que est\u00e1 inscrito.</li> <li>Inscripci\u00f3n al Curso: Un formulario donde el usuario puede inscribirse en un curso.</li> <li>P\u00e1ginas de Error: Manejo de rutas no existentes con una p\u00e1gina de error 404 personalizada.</li> </ol>"},{"location":"ut3-introduccionaangular/proyectos/routing/enunciado/#estructura-de-rutas-en-el-proyecto","title":"Estructura de Rutas en el Proyecto","text":"<p>Aqu\u00ed se define c\u00f3mo se estructuran las rutas utilizando el Angular Router.</p> <ol> <li>Rutas principales:<ul> <li><code>/home</code>: Muestra la lista de cursos.</li> <li><code>/courses</code>: Muestra la lista de cursos.</li> <li><code>/courses/:id</code>: Muestra los detalles del curso espec\u00edfico usando un par\u00e1metro din\u00e1mico (ID del curso).</li> <li><code>/profile</code>: Muestra el perfil del usuario registrado.</li> <li><code>/enroll/:id</code>: Muestra el formulario de inscripci\u00f3n para el curso con el ID especificado.</li> <li><code>**</code>: Ruta comod\u00edn para mostrar una p\u00e1gina de error 404 cuando se intenta acceder a una ruta que no existe.</li> </ul> </li> </ol>"},{"location":"ut3-introduccionaangular/proyectos/users-table/enunciado/","title":"Gesti\u00f3n de Usuarios con Formulario Reactivo y Comunicaci\u00f3n entre Componentes","text":""},{"location":"ut3-introduccionaangular/proyectos/users-table/enunciado/#descripcion-del-proyecto","title":"Descripci\u00f3n del Proyecto:","text":"<p>Este proyecto consiste en crear una aplicaci\u00f3n b\u00e1sica en Angular para la gesti\u00f3n de usuarios. El objetivo principal es aprender a utilizar Reactive Forms para gestionar un formulario de registro y, adem\u00e1s, manejar la comunicaci\u00f3n entre componentes (padre-hijo) para pasar datos del formulario desde el componente hijo (donde se rellena) al componente padre (donde se muestra la lista de usuarios registrados).</p>"},{"location":"ut3-introduccionaangular/proyectos/users-table/enunciado/#objetivos","title":"Objetivos:","text":"<ol> <li>Implementar un formulario reactivo con validaciones usando <code>ReactiveFormsModule</code>.</li> <li>Realizar la comunicaci\u00f3n entre componentes:</li> <li>El componente hijo se encargar\u00e1 de contener el formulario reactivo.</li> <li>El componente padre mostrar\u00e1 una lista de usuarios registrados, obtenidos desde el componente hijo.</li> <li>Utilizar <code>@Input()</code> y <code>@Output()</code> para el intercambio de datos entre los componentes.</li> <li>Manejar validaciones de formulario tanto de campos obligatorios como de reglas espec\u00edficas (ej. longitud m\u00ednima de la contrase\u00f1a).</li> </ol>"},{"location":"ut3-introduccionaangular/proyectos/users-table/enunciado/#requisitos","title":"Requisitos:","text":"<ul> <li>Crear dos componentes:</li> <li>Componente Padre (<code>UserListComponent</code>): Muestra una lista de los usuarios registrados.</li> <li> <p>Componente Hijo (<code>UserFormComponent</code>): Contiene el formulario de registro de usuarios.</p> </li> <li> <p>El formulario tendr\u00e1 los siguientes campos:</p> </li> <li>Nombre: campo obligatorio, m\u00ednimo 3 caracteres.</li> <li>Correo electr\u00f3nico: campo obligatorio, debe seguir el formato de un correo v\u00e1lido.</li> <li> <p>Contrase\u00f1a: campo obligatorio, m\u00ednimo 6 caracteres.</p> </li> <li> <p>El formulario estar\u00e1 deshabilitado hasta que todos los campos sean v\u00e1lidos.</p> </li> <li>Una vez el formulario se env\u00ede correctamente, se enviar\u00e1n los datos del nuevo usuario al componente padre para que se agregue a la lista de usuarios.</li> </ul>"},{"location":"ut3-introduccionaangular/proyectos/users-table/enunciado/#flujo-del-proyecto","title":"Flujo del Proyecto:","text":"<ol> <li>El usuario rellena el formulario en el componente hijo (<code>UserFormComponent</code>).</li> <li>Al enviar el formulario, los datos del usuario se pasan al componente padre (<code>UserListComponent</code>) mediante un evento personalizado (<code>@Output</code>).</li> <li>El componente padre recibe los datos y los agrega a una lista visible en la interfaz.</li> </ol>"},{"location":"ut4-angular-ionic/1introduccion/","title":"Introducci\u00f3n a IONIC con Angular 18 \ud83c\udf10","text":"<p>IONIC es un framework de desarrollo de aplicaciones h\u00edbridas que permite crear aplicaciones m\u00f3viles y web con una \u00fanica base de c\u00f3digo. Ideal para desarrolladores que buscan eficiencia y rapidez, IONIC utiliza tecnolog\u00edas como HTML, CSS y JavaScript para generar aplicaciones multiplataforma. Al combinar IONIC con Angular 18, conseguimos una sinergia poderosa que permite crear aplicaciones r\u00e1pidas, interactivas y escalables.</p>"},{"location":"ut4-angular-ionic/1introduccion/#que-es-ionic","title":"\u00bfQu\u00e9 es IONIC? \ud83e\udd14","text":"<p>IONIC naci\u00f3 con el prop\u00f3sito de simplificar el desarrollo de aplicaciones m\u00f3viles que puedan funcionar en iOS, Android y en la web. Esto se logra mediante una base de c\u00f3digo \u00fanica que se adapta a cada plataforma, lo cual reduce significativamente el tiempo y el esfuerzo necesarios para lanzar una aplicaci\u00f3n en m\u00faltiples dispositivos. Con una amplia colecci\u00f3n de componentes listos para usar y herramientas de personalizaci\u00f3n, IONIC facilita la creaci\u00f3n de aplicaciones que no solo son funcionales sino tambi\u00e9n est\u00e9ticamente atractivas.</p>"},{"location":"ut4-angular-ionic/1introduccion/#ventajas-de-usar-ionic-con-angular-18","title":"Ventajas de Usar IONIC con Angular 18 \u26a1","text":"<p>Angular 18 se destaca por sus mejoras en la eficiencia y su robusta estructura modular, lo que lo convierte en el compa\u00f1ero perfecto para IONIC. Algunas de las ventajas clave de esta combinaci\u00f3n son:</p> <ul> <li>Desarrollo R\u00e1pido: IONIC y Angular 18 permiten crear interfaces de usuario de manera \u00e1gil, con componentes predefinidos y modulares.</li> <li>Experiencia de Usuario Consistente: Gracias a los componentes de IONIC y la estructura de Angular, es posible mantener una apariencia y una experiencia consistentes en diferentes plataformas.</li> <li>Escalabilidad: Con Angular, las aplicaciones pueden escalar de forma eficaz, facilitando el mantenimiento a largo plazo.</li> <li>Community y Soporte: Tanto IONIC como Angular cuentan con una amplia comunidad y documentaci\u00f3n exhaustiva, ofreciendo soporte a desarrolladores de todos los niveles.</li> </ul>"},{"location":"ut4-angular-ionic/1introduccion/#capacitor-el-puente-hacia-las-funcionalidades-nativas","title":"Capacitor: El Puente hacia las Funcionalidades Nativas \ud83d\udd0c","text":"<p>Capacitor es una herramienta fundamental en el ecosistema de Ionic que permite a las aplicaciones h\u00edbridas acceder a las funcionalidades nativas de los dispositivos. Desarrollado por el equipo de Ionic, Capacitor act\u00faa como un \"puente\" entre el c\u00f3digo JavaScript y las APIs nativas, permitiendo que nuestras aplicaciones usen funcionalidades avanzadas del dispositivo, como la c\u00e1mara, el GPS, el sistema de archivos y m\u00e1s.</p>"},{"location":"ut4-angular-ionic/1introduccion/#ventajas-de-capacitor","title":"Ventajas de Capacitor \ud83d\udcf1","text":"<ul> <li>Acceso a APIs Nativas: Capacitor proporciona acceso directo a muchas funcionalidades de dispositivos, haciendo que las apps h\u00edbridas con Ionic se comporten de manera similar a las aplicaciones nativas.</li> <li>Desarrollo Multiplataforma Simplificado: Capacitor gestiona las diferencias entre iOS, Android y web, permitiendo que una \u00fanica API funcione en todas estas plataformas.</li> <li>Soporte para PWA: Capacitor es compatible con aplicaciones web progresivas (PWA), facilitando el despliegue en navegadores y dispositivos m\u00f3viles con la misma experiencia de usuario.</li> </ul> <p>Con Capacitor, podemos escribir c\u00f3digo una vez y ejecutarlo en m\u00faltiples plataformas, optimizando los recursos de desarrollo sin perder acceso a funcionalidades avanzadas.</p>"},{"location":"ut4-angular-ionic/1introduccion/#aplicaciones-hibridas-flexibilidad-y-eficiencia","title":"Aplicaciones H\u00edbridas: Flexibilidad y Eficiencia \ud83c\udf0d","text":"<p>A diferencia de las aplicaciones nativas, que requieren desarrollo espec\u00edfico para cada plataforma, IONIC permite el desarrollo h\u00edbrido, lo que significa que puedes construir una vez y desplegar en m\u00faltiples plataformas. Con Angular 18, esta experiencia se enriquece a\u00fan m\u00e1s, ya que la estructura de Angular permite gestionar de forma eficiente el flujo de datos y la l\u00f3gica de negocio.</p>"},{"location":"ut4-angular-ionic/1introduccion/#para-quien-es-ionic","title":"\u00bfPara Qui\u00e9n es IONIC? \ud83c\udfaf","text":"<p>IONIC es ideal para:</p> <ul> <li>Desarrolladores de JavaScript y Angular que buscan extender sus aplicaciones web a plataformas m\u00f3viles.</li> <li>Startups y peque\u00f1as empresas que necesitan aplicaciones de calidad en el menor tiempo posible.</li> <li>Proyectos con presupuesto limitado que no pueden permitirse un desarrollo nativo para cada plataforma.</li> <li>Empresas que priorizan la rapidez de despliegue y desean mantener una \u00fanica base de c\u00f3digo para reducir costes de mantenimiento.</li> </ul>"},{"location":"ut4-angular-ionic/1introduccion/#conclusion","title":"Conclusi\u00f3n \ud83d\udccc","text":"<p>IONIC y Angular 18, junto con la potencia de Capacitor, son la combinaci\u00f3n perfecta para crear aplicaciones m\u00f3viles y web con rapidez, escalabilidad y acceso a funcionalidades avanzadas de dispositivos. Esta combinaci\u00f3n no solo optimiza el proceso de desarrollo, sino que garantiza una experiencia de usuario optimizada y consistente en todos los dispositivos.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/21creaciondelaappeinicializaci%C3%B3n/","title":"\u00a1Tu Primera App con Ionic y Angular 18! \ud83d\ude80","text":"<p>Ionic nos permite construir aplicaciones para cualquier plataforma (iOS, Android y web) desde una sola base de c\u00f3digo utilizando HTML, CSS y JavaScript. En este tutorial, te guiaremos paso a paso para crear una aplicaci\u00f3n de galer\u00eda de fotos, explorando los fundamentos del desarrollo con Ionic y Angular.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/21creaciondelaappeinicializaci%C3%B3n/#que-vamos-a-construir","title":"\u00bfQu\u00e9 Vamos a Construir? \ud83d\uddbc\ufe0f\ud83d\udcf8","text":"<p>Crearemos una app de Galer\u00eda de Fotos que permita:</p> <ul> <li>Tomar fotos con la c\u00e1mara del dispositivo.</li> <li>Mostrar las fotos en una cuadr\u00edcula.</li> <li>Guardarlas de manera permanente en el dispositivo.</li> </ul> <p>La aplicaci\u00f3n ser\u00e1 capaz de correr en la web, iOS y Android gracias a los componentes de Ionic y Capacitor, el runtime nativo oficial de Ionic.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/21creaciondelaappeinicializaci%C3%B3n/#descarga-de-herramientas-necesarias","title":"Descarga de Herramientas Necesarias \ud83d\udee0\ufe0f","text":"<p>Antes de empezar, instala las siguientes herramientas para garantizar una experiencia \u00f3ptima en el desarrollo con Ionic:</p> <ul> <li>Node.js: Necesario para interactuar con el ecosistema de Ionic.</li> <li>Editor de c\u00f3digo: Como Visual Studio Code, para escribir y gestionar el c\u00f3digo.</li> <li>Interfaz de l\u00ednea de comandos (CLI): Para usuarios de Windows, recomendamos usar PowerShell o cmd en modo Administrador; en Mac/Linux, cualquier terminal es suficiente.</li> </ul>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/21creaciondelaappeinicializaci%C3%B3n/#instalacion-de-las-herramientas-de-ionic","title":"Instalaci\u00f3n de las Herramientas de Ionic \ud83d\ude80","text":"<p>En la terminal, instala el CLI de Ionic junto con herramientas adicionales necesarias para ejecutar y generar iconos nativos:</p> <pre><code>npm install -g @ionic/cli native-run cordova-res\n</code></pre> <p>Nota: La opci\u00f3n <code>-g</code> indica que se instalar\u00e1n globalmente. Si experimentas errores de permisos, revisa la configuraci\u00f3n global de <code>npm</code>.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/21creaciondelaappeinicializaci%C3%B3n/#crear-una-nueva-app-en-ionic","title":"Crear una Nueva App en Ionic \ud83d\udcf1","text":"<p>Vamos a iniciar una app de Ionic Angular utilizando la plantilla \u201cTabs\u201d y a\u00f1adiendo Capacitor para la funcionalidad nativa.</p> <pre><code>ionic start photo-gallery tabs --type=angular --capacitor\n</code></pre> <p>Nota: Selecciona la opci\u00f3n <code>NgModules</code> cuando se te pregunte entre <code>NgModules</code> y <code>Standalone</code>.</p> <p>Una vez creada la aplicaci\u00f3n, accede a la carpeta de tu proyecto:</p> <pre><code>cd photo-gallery\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/21creaciondelaappeinicializaci%C3%B3n/#agregar-plugins-de-capacitor","title":"Agregar Plugins de Capacitor \ud83d\udd0c","text":"<p>Para habilitar las funcionalidades nativas (como el uso de la c\u00e1mara), instala los plugins necesarios:</p> <pre><code>npm install @capacitor/camera @capacitor/preferences @capacitor/filesystem\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/21creaciondelaappeinicializaci%C3%B3n/#ionic-pwa-elements","title":"Ionic PWA Elements \u2699\ufe0f","text":"<p>Algunos plugins de Capacitor, como el de la c\u00e1mara, requieren la librer\u00eda Ionic PWA Elements para funcionar en la web. Inst\u00e1lala de la siguiente forma:</p> <pre><code>npm install @ionic/pwa-elements\n</code></pre> <p>Luego, importa esta dependencia en <code>src/main.ts</code> para que est\u00e9 disponible en tu app:</p> <pre><code>import { defineCustomElements } from '@ionic/pwa-elements/loader';\ndefineCustomElements(window);\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/21creaciondelaappeinicializaci%C3%B3n/#ejecuta-la-app","title":"Ejecuta la App \ud83d\ude80","text":"<p>\u00a1Hora de ver la app en acci\u00f3n! Ejecuta el siguiente comando para iniciar la app en tu navegador web:</p> <pre><code>ionic serve\n</code></pre> <p>\u00a1Y voil\u00e0! Ver\u00e1s tu aplicaci\u00f3n Ionic en el navegador, lista para ser probada y editada.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/21creaciondelaappeinicializaci%C3%B3n/#construyendo-la-galeria-de-fotos","title":"Construyendo la Galer\u00eda de Fotos \ud83d\udcf8","text":"<ol> <li>Configuraci\u00f3n de la Interfaz: La aplicaci\u00f3n incluye tres pesta\u00f1as por defecto. Navega a la pesta\u00f1a \u201cTab2\u201d para usarla como nuestra galer\u00eda de fotos.</li> <li>Actualizaci\u00f3n del T\u00edtulo: Cambia el t\u00edtulo de esta pesta\u00f1a para reflejar su prop\u00f3sito. Navega al archivo <code>/src/app/tab2/tab2.page.html</code> y cambia <code>&lt;ion-title&gt;</code> a \u201cPhoto Gallery\u201d.    <pre><code>&lt;ion-title&gt;Photo Gallery&lt;/ion-title&gt;\n</code></pre></li> <li>Agregar el Bot\u00f3n de C\u00e1mara: Para abrir la c\u00e1mara, agrega un bot\u00f3n de acci\u00f3n flotante (FAB) en el contenido de la p\u00e1gina. Este bot\u00f3n usar\u00e1 un \u00edcono de c\u00e1mara que aparecer\u00e1 en la parte inferior de la pantalla.    <pre><code>&lt;ion-content&gt;\n  &lt;ion-fab vertical=\"bottom\" horizontal=\"center\" slot=\"fixed\"&gt;\n    &lt;ion-fab-button&gt;\n      &lt;ion-icon name=\"camera\"&gt;&lt;/ion-icon&gt;\n    &lt;/ion-fab-button&gt;\n  &lt;/ion-fab&gt;\n&lt;/ion-content&gt;\n</code></pre></li> <li>Actualizaci\u00f3n de la Barra de Navegaci\u00f3n: Cambia el \u00edcono y la etiqueta de la pesta\u00f1a. En el archivo <code>src/app/tabs/tabs.page.html</code>, cambia la etiqueta a \u201cPhotos\u201d y el nombre del \u00edcono a \u201cimages\u201d.    <pre><code>&lt;ion-tab-button tab=\"tab2\"&gt;\n  &lt;ion-icon name=\"images\"&gt;&lt;/ion-icon&gt;\n  &lt;ion-label&gt;Photos&lt;/ion-label&gt;\n&lt;/ion-tab-button&gt;\n</code></pre> Guarda todos los cambios y observa c\u00f3mo se aplican autom\u00e1ticamente en el navegador gracias a la funci\u00f3n de recarga en vivo (Live Reload) de Ionic.</li> </ol>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/21creaciondelaappeinicializaci%C3%B3n/#conclusion","title":"Conclusi\u00f3n \ud83c\udfc1","text":"<p>Acabamos de crear la base de una app de galer\u00eda de fotos en Ionic con Angular 18. Esta es solo la introducci\u00f3n a las m\u00faltiples capacidades de Ionic y Angular en el desarrollo de aplicaciones h\u00edbridas. Ahora puedes seguir explorando y construyendo nuevas funcionalidades para transformar esta galer\u00eda en una experiencia completa y robusta.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/22tomadefotos/","title":"Tomando Fotos con la C\u00e1mara en Ionic y Angular 18 \ud83d\udcf8","text":"<p>Ahora pasaremos a la parte divertida: a\u00f1adir la capacidad de tomar fotos con la c\u00e1mara del dispositivo usando la API de C\u00e1mara de Capacitor. Comenzaremos configurando la funcionalidad para la web y haremos algunos ajustes para que tambi\u00e9n funcione en dispositivos m\u00f3viles (iOS y Android).</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/22tomadefotos/#servicio-de-fotos","title":"Servicio de Fotos \ud83d\udcf7","text":"<p>Para encapsular toda la l\u00f3gica de Capacitor (uso de la c\u00e1mara y otras caracter\u00edsticas nativas), crearemos una clase de servicio. Este servicio, llamado PhotoService, manejar\u00e1 toda la interacci\u00f3n con la c\u00e1mara y el almacenamiento de las fotos.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/22tomadefotos/#creacion-del-servicio-de-fotos","title":"Creaci\u00f3n del Servicio de Fotos","text":"<p>Usa el siguiente comando en la terminal para generar el servicio:</p> <pre><code>ionic g service services/photo\n</code></pre> <p>Esto crear\u00e1 el archivo <code>photo.service.ts</code> en la carpeta <code>services</code>. Ahora, abramos este archivo y a\u00f1adamos la l\u00f3gica que habilitar\u00e1 la funcionalidad de la c\u00e1mara.</p> <ol> <li>Importar Dependencias de Capacitor: Comenzamos importando las dependencias necesarias de Capacitor para interactuar con la c\u00e1mara, el sistema de archivos y las preferencias de almacenamiento.    <pre><code>import { Camera, CameraResultType, CameraSource, Photo } from '@capacitor/camera';\nimport { Filesystem, Directory } from '@capacitor/filesystem';\nimport { Preferences } from '@capacitor/preferences';\n</code></pre></li> <li>M\u00e9todo <code>addNewToGallery</code>: Creamos el m\u00e9todo <code>addNewToGallery</code> en la clase <code>PhotoService</code>. Este m\u00e9todo contendr\u00e1 la l\u00f3gica principal para abrir la c\u00e1mara del dispositivo, tomar una foto y guardarla en el sistema de archivos.    <pre><code>public async addNewToGallery() {\n  const capturedPhoto = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n    source: CameraSource.Camera,\n    quality: 100\n  });\n}\n</code></pre> <p>\u26a0\ufe0f Nota: Con la API de C\u00e1mara de Capacitor, no necesitamos escribir c\u00f3digo espec\u00edfico para cada plataforma (web, iOS o Android). Simplemente llamamos a <code>Camera.getPhoto()</code> para abrir la c\u00e1mara del dispositivo.</p> </li> </ol>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/22tomadefotos/#integracion-del-servicio-de-fotos-en-la-interfaz","title":"Integraci\u00f3n del Servicio de Fotos en la Interfaz \ud83d\udcf2","text":"<p>Para conectar este servicio con la interfaz de usuario, agregaremos un bot\u00f3n que active la c\u00e1mara y capture la imagen.</p> <ol> <li>Importar el Servicio en <code>tab2.page.ts</code>: Primero, importamos <code>PhotoService</code> y lo llamamos cuando el usuario quiera tomar una foto.    <pre><code>import { PhotoService } from '../services/photo.service';\n\nconstructor(public photoService: PhotoService) { }\n\naddPhotoToGallery() {\n  this.photoService.addNewToGallery();\n}\n</code></pre></li> <li>Asociar el Bot\u00f3n de C\u00e1mara: Abre el archivo <code>tab2.page.html</code> y agrega el siguiente bot\u00f3n de acci\u00f3n flotante (FAB) para activar la c\u00e1mara al hacer clic:    <pre><code>&lt;ion-content&gt;\n  &lt;ion-fab vertical=\"bottom\" horizontal=\"center\" slot=\"fixed\"&gt;\n    &lt;ion-fab-button (click)=\"addPhotoToGallery()\"&gt;\n      &lt;ion-icon name=\"camera\"&gt;&lt;/ion-icon&gt;\n    &lt;/ion-fab-button&gt;\n  &lt;/ion-fab&gt;\n&lt;/ion-content&gt;\n</code></pre> Guarda los cambios y reinicia el servidor de desarrollo con <code>ionic serve</code>. Ahora, en la pesta\u00f1a de Galer\u00eda de Fotos, haz clic en el bot\u00f3n de c\u00e1mara. Si tu computadora tiene una c\u00e1mara, se abrir\u00e1 una ventana para tomar una selfie. </li> </ol>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/22tomadefotos/#mostrando-las-fotos-en-la-galeria","title":"Mostrando las Fotos en la Galer\u00eda \ud83c\udf04","text":"<p>Despu\u00e9s de tomar una foto, vamos a mostrarla en la app y guardarla para futuras referencias.</p> <ol> <li>Definir el Modelo <code>UserPhoto</code>: En la parte inferior del archivo <code>photo.service.ts</code>, define una interfaz <code>UserPhoto</code> para almacenar la metadata de cada foto:    <pre><code>export interface UserPhoto {\n  filepath: string;\n  webviewPath?: string;\n}\n</code></pre></li> <li>Agregar Fotos al array: En <code>PhotoService</code>, definimos un array <code>photos</code> que contendr\u00e1 cada foto capturada. Agregaremos cada nueva foto al principio de este array.    <pre><code>export class PhotoService {\n  public photos: UserPhoto[] = [];\n\n  public async addNewToGallery() {\n    const capturedPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n\n    this.photos.unshift({\n      filepath: \"soon...\",\n      webviewPath: capturedPhoto.webPath!\n    });\n  }\n}\n</code></pre></li> <li>Mostrar las Fotos en la Interfaz: En <code>tab2.page.html</code>, a\u00f1ade un componente <code>ion-grid</code> para organizar las fotos en una cuadr\u00edcula. Luego, recorre el array <code>photos</code> en <code>PhotoService</code> y agrega un componente <code>&lt;ion-img&gt;</code> para cada foto.    <pre><code>&lt;ion-content&gt;\n  &lt;ion-grid&gt;\n    &lt;ion-row&gt;\n      &lt;ion-col size=\"6\" *ngFor=\"let photo of photoService.photos; index as position\"&gt;\n        &lt;ion-img [src]=\"photo.webviewPath\"&gt;&lt;/ion-img&gt;\n      &lt;/ion-col&gt;\n    &lt;/ion-row&gt;\n  &lt;/ion-grid&gt;\n\n  &lt;!-- Bot\u00f3n de c\u00e1mara --&gt;\n&lt;/ion-content&gt;\n</code></pre></li> </ol> <p>Guarda todos los archivos y actualiza la aplicaci\u00f3n en el navegador. Ahora, cuando tomes una foto, se mostrar\u00e1 en la Galer\u00eda de Fotos.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/22tomadefotos/#proximos-pasos","title":"Pr\u00f3ximos Pasos \u23e9","text":"<p>\u00a1Ya tienes la galer\u00eda funcional en Ionic y Angular 18! En los pr\u00f3ximos pasos, podr\u00edas a\u00f1adir soporte para guardar las fotos en el sistema de archivos del dispositivo, permitiendo que se guarden de forma persistente. \u00a1Contin\u00faa explorando y mejorando tu app de Galer\u00eda de Fotos!</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/23guardadodefotos/","title":"Guardando Fotos en el Sistema de Archivos \ud83d\uddc4\ufe0f","text":"<p>Ahora que tenemos la capacidad de tomar m\u00faltiples fotos y mostrarlas en una galer\u00eda en la segunda pesta\u00f1a de nuestra aplicaci\u00f3n, el siguiente paso es hacer que estas fotos se almacenen de manera permanente. Actualmente, las fotos no se guardan, por lo que se pierden al cerrar la app.</p> <p>Con la API de Sistema de Archivos de Capacitor, podemos almacenar las fotos en el dispositivo en unos pocos pasos, permitiendo su acceso incluso despu\u00e9s de reiniciar la aplicaci\u00f3n.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/23guardadodefotos/#uso-de-la-api-de-sistema-de-archivos","title":"Uso de la API de Sistema de Archivos \ud83d\udcc2","text":"<p>Para empezar, vamos a crear un nuevo m\u00e9todo en la clase <code>PhotoService</code> llamado <code>savePicture()</code>. Este m\u00e9todo se encargar\u00e1 de recibir la foto capturada y guardarla en el sistema de archivos del dispositivo.</p> <ol> <li>Creaci\u00f3n del M\u00e9todo <code>savePicture</code>: Abre <code>src/app/services/photo.service.ts</code> y define el m\u00e9todo <code>savePicture()</code>. Este m\u00e9todo aceptar\u00e1 el objeto de la foto como par\u00e1metro.    <pre><code>private async savePicture(photo: Photo) { }\n</code></pre></li> <li>Llamar a <code>savePicture</code> en <code>addNewToGallery</code>: Ahora, dentro de <code>addNewToGallery()</code>, vamos a llamar al m\u00e9todo <code>savePicture</code> para guardar la foto y a\u00f1adirla a la colecci\u00f3n de fotos.    <pre><code>public async addNewToGallery() {\n  const capturedPhoto = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n    source: CameraSource.Camera,\n    quality: 100\n  });\n\n  const savedImageFile = await this.savePicture(capturedPhoto);\n  this.photos.unshift(savedImageFile);\n}\n</code></pre></li> </ol>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/23guardadodefotos/#guardar-la-foto-en-base64","title":"Guardar la Foto en Base64 \ud83d\uddbc\ufe0f","text":"<p>Para guardar la foto en el sistema de archivos, primero necesitamos convertirla al formato base64, que es compatible con la API de Sistema de Archivos.</p> <ol> <li> <p>Conversi\u00f3n a Base64: Dentro de <code>savePicture</code>, utiliza el m\u00e9todo <code>readAsBase64()</code> (que definiremos m\u00e1s adelante) para convertir la foto al formato base64.</p> </li> <li> <p>Escritura en el Directorio de Datos: Una vez convertida, utiliza la funci\u00f3n <code>writeFile</code> de <code>Filesystem</code> para escribir el archivo en el sistema.    <pre><code>private async savePicture(photo: Photo) {\n  const base64Data = await this.readAsBase64(photo);\n\n  const fileName = Date.now() + '.jpeg';\n  const savedFile = await Filesystem.writeFile({\n    path: fileName,\n    data: base64Data,\n    directory: Directory.Data\n  });\n\n  return {\n    filepath: fileName,\n    webviewPath: photo.webPath\n  };\n}\n</code></pre></p> <p>Nota: Usamos la propiedad <code>webviewPath</code> en lugar del dato base64 para mostrar la imagen en la app, ya que ya est\u00e1 cargada en la memoria.</p> </li> </ol>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/23guardadodefotos/#funcion-de-conversion-readasbase64","title":"Funci\u00f3n de Conversi\u00f3n <code>readAsBase64</code> \ud83d\udee0\ufe0f","text":"<p><code>readAsBase64</code> es una funci\u00f3n auxiliar que convierte la imagen capturada a base64. Esto implica un poco de l\u00f3gica espec\u00edfica para la plataforma, ya que los m\u00e9todos de manejo de archivos var\u00edan entre la web y dispositivos m\u00f3viles.</p> <ol> <li>Definici\u00f3n de <code>readAsBase64</code>: Esta funci\u00f3n utiliza el m\u00e9todo <code>fetch()</code> para leer el archivo como un blob, luego lo convierte a base64 usando el m\u00e9todo <code>FileReader</code>.    <pre><code>private async readAsBase64(photo: Photo) {\n  const response = await fetch(photo.webPath!);\n  const blob = await response.blob();\n\n  return await this.convertBlobToBase64(blob) as string;\n}\n</code></pre></li> <li>Funci\u00f3n <code>convertBlobToBase64</code>: Define <code>convertBlobToBase64</code> para convertir el blob en una cadena base64, usando el m\u00e9todo <code>readAsDataURL()</code> de <code>FileReader</code>.    <pre><code>private convertBlobToBase64 = (blob: Blob) =&gt; new Promise((resolve, reject) =&gt; {\n  const reader = new FileReader();\n  reader.onerror = reject;\n  reader.onload = () =&gt; {\n      resolve(reader.result);\n  };\n  reader.readAsDataURL(blob);\n});\n</code></pre></li> </ol> <p>Esta configuraci\u00f3n permite que las fotos se conviertan a base64 de manera eficiente, especialmente en la web, donde se utiliza <code>fetch()</code> y <code>FileReader</code> para realizar esta conversi\u00f3n.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/23guardadodefotos/#conclusion","title":"Conclusi\u00f3n \ud83d\udccc","text":"<p>Cada vez que se toma una nueva foto, se guarda autom\u00e1ticamente en el sistema de archivos del dispositivo, lo que permite conservarla entre sesiones. \u00a1As\u00ed, logramos una galer\u00eda de fotos persistente y funcional en Ionic y Angular 18!</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/24cargadefotosdelsistema/","title":"Cargando Fotos desde el Sistema de Archivos \ud83d\uddbc\ufe0f","text":"<p>Hasta ahora hemos implementado la captura de fotos y su almacenamiento en el sistema de archivos del dispositivo. Sin embargo, falta una \u00faltima pieza: cargar las fotos almacenadas para mostrarlas nuevamente en la galer\u00eda de fotos cada vez que el usuario abre la app. Para lograr esto, utilizaremos la API de Preferencias de Capacitor para guardar referencias a cada archivo, permitiendo que las fotos persistan en la galer\u00eda incluso despu\u00e9s de cerrar la aplicaci\u00f3n.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/24cargadefotosdelsistema/#uso-de-la-api-de-preferencias-de-capacitor","title":"Uso de la API de Preferencias de Capacitor \ud83d\uddc3\ufe0f","text":"<p>La API de Preferencias permite almacenar datos en un formato de clave-valor. Usaremos esta funcionalidad para guardar el arreglo de fotos, de modo que podamos recuperarlo cuando la app se vuelva a abrir.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/24cargadefotosdelsistema/#1-definir-la-clave-para-el-almacenamiento","title":"1. Definir la Clave para el Almacenamiento","text":"<p>Empezamos definiendo una constante que actuar\u00e1 como la clave de almacenamiento en la clase <code>PhotoService</code>:</p> <pre><code>export class PhotoService {\n  public photos: UserPhoto[] = [];\n  private PHOTO_STORAGE: string = 'photos';\n\n  // c\u00f3digo adicional\n}\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/24cargadefotosdelsistema/#2-guardar-el-arreglo-de-fotos-en-addnewtogallery","title":"2. Guardar el Arreglo de Fotos en <code>addNewToGallery</code>","text":"<p>En el m\u00e9todo <code>addNewToGallery</code>, a\u00f1adimos una llamada a <code>Preferences.set()</code> al final. Con esto, el arreglo de fotos se guardar\u00e1 en el almacenamiento cada vez que se tome una nueva foto, asegurando la persistencia de los datos.</p> <pre><code>public async addNewToGallery() {\n  const capturedPhoto = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n    source: CameraSource.Camera,\n    quality: 100\n  });\n\n  const savedImageFile = await this.savePicture(capturedPhoto);\n  this.photos.unshift(savedImageFile);\n\n  Preferences.set({\n    key: this.PHOTO_STORAGE,\n    value: JSON.stringify(this.photos),\n  });\n}\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/24cargadefotosdelsistema/#3-crear-el-metodo-loadsaved-para-recuperar-las-fotos","title":"3. Crear el M\u00e9todo <code>loadSaved</code> para Recuperar las Fotos","text":"<p>Para cargar las fotos guardadas, creamos el m\u00e9todo <code>loadSaved()</code>, que recuperar\u00e1 el arreglo de fotos almacenado en formato JSON y lo convertir\u00e1 nuevamente en un arreglo.</p> <pre><code>public async loadSaved() {\n  const { value } = await Preferences.get({ key: this.PHOTO_STORAGE });\n  this.photos = (value ? JSON.parse(value) : []) as UserPhoto[];\n\n  // C\u00f3digo adicional para cargar las im\u00e1genes en la plataforma web...\n}\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/24cargadefotosdelsistema/#4-mostrar-las-fotos-en-la-galeria-compatibilidad-web","title":"4. Mostrar las Fotos en la Galer\u00eda (Compatibilidad Web) \ud83c\udf10","text":"<p>En dispositivos m\u00f3viles, se puede cargar cada foto directamente desde el sistema de archivos. Sin embargo, en la web, las fotos necesitan ser convertidas a formato base64 debido a que la API de sistema de archivos usa IndexedDB en segundo plano. Por ello, en <code>loadSaved()</code>, agregamos el siguiente c\u00f3digo para leer cada foto guardada y convertirla a base64, de modo que pueda mostrarse correctamente en la web.</p> <pre><code>for (let photo of this.photos) {\n  const readFile = await Filesystem.readFile({\n    path: photo.filepath,\n    directory: Directory.Data,\n  });\n\n  // Solo para la plataforma web: cargar la foto en formato base64\n  photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n}\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/24cargadefotosdelsistema/#llamar-a-loadsaved-en-la-interfaz","title":"Llamar a <code>loadSaved</code> en la Interfaz \ud83d\udcf2","text":"<p>Para que las fotos se carguen autom\u00e1ticamente cuando el usuario acceda a la galer\u00eda, invocamos el m\u00e9todo <code>loadSaved()</code> cuando se carga la pesta\u00f1a de galer\u00eda de fotos.</p> <ol> <li>Abre <code>tab2.page.ts</code> y llama al m\u00e9todo <code>loadSaved()</code> en el ciclo de vida <code>ngOnInit</code> para cargar las fotos al abrir la galer\u00eda.</li> </ol> <pre><code>async ngOnInit() {\n  await this.photoService.loadSaved();\n}\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/24cargadefotosdelsistema/#conclusion","title":"Conclusi\u00f3n \ud83d\udccc","text":"<p>\u00a1Y listo! Ahora hemos completado una galer\u00eda de fotos funcional en Ionic y Angular que guarda y carga las fotos desde el sistema de archivos usando Capacitor. Cada vez que se abre la app, las fotos guardadas se cargan autom\u00e1ticamente y se muestran en la galer\u00eda. El siguiente paso ser\u00eda compilar la aplicaci\u00f3n para iOS y Android, \u00a1llevando nuestra galer\u00eda a dispositivos m\u00f3viles!</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/25versionmovil/","title":"A\u00f1adiendo Compatibilidad M\u00f3vil a Nuestra Galer\u00eda de Fotos \ud83d\udcf2","text":"<p>Nuestra app de galer\u00eda de fotos a\u00fan no est\u00e1 completa hasta que pueda ejecutarse en iOS, Android y la web con una \u00fanica base de c\u00f3digo. Con algunos cambios de l\u00f3gica espec\u00edficos para plataformas y la instalaci\u00f3n de herramientas nativas, podremos desplegar la app en dispositivos m\u00f3viles. \u00a1Vamos a ello!</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/25versionmovil/#importacion-de-la-api-de-platform-de-ionic","title":"Importaci\u00f3n de la API de Platform de Ionic \ud83c\udf10","text":"<p>Empezaremos haciendo unos peque\u00f1os cambios en el c\u00f3digo para detectar la plataforma en la que se ejecuta la aplicaci\u00f3n (web o m\u00f3vil). Esto nos ayudar\u00e1 a adaptar la l\u00f3gica en funci\u00f3n del dispositivo.</p> <ol> <li>Importar la API de Platform: En <code>photo.service.ts</code>, importamos <code>Platform</code> para identificar el tipo de dispositivo en el que se ejecuta la app y adaptamos el constructor de <code>PhotoService</code> para usar esta plataforma.</li> </ol> <pre><code>import { Platform } from '@ionic/angular';\n\nexport class PhotoService {\n  public photos: UserPhoto[] = [];\n  private PHOTO_STORAGE: string = 'photos';\n  private platform: Platform;\n\n  constructor(platform: Platform) {\n    this.platform = platform;\n  }\n}\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/25versionmovil/#logica-especifica-para-cada-plataforma","title":"L\u00f3gica Espec\u00edfica para Cada Plataforma \ud83d\udcf2","text":""},{"location":"ut4-angular-ionic/2creacionprimeraapp/25versionmovil/#1-actualizar-la-funcion-readasbase64","title":"1. Actualizar la Funci\u00f3n <code>readAsBase64</code>","text":"<p>La funci\u00f3n <code>readAsBase64</code> se encarga de convertir las fotos a formato base64. Modificaremos esta funci\u00f3n para que use el m\u00e9todo <code>Filesystem.readFile()</code> en dispositivos m\u00f3viles (donde la plataforma es \"hybrid\") y <code>fetch()</code> en la web.</p> <pre><code>private async readAsBase64(photo: Photo) {\n  if (this.platform.is('hybrid')) {\n    const file = await Filesystem.readFile({\n      path: photo.path!\n    });\n\n    return file.data;\n  } else {\n    const response = await fetch(photo.webPath!);\n    const blob = await response.blob();\n\n    return await this.convertBlobToBase64(blob) as string;\n  }\n}\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/25versionmovil/#2-actualizar-la-funcion-savepicture","title":"2. Actualizar la Funci\u00f3n <code>savePicture</code>","text":"<p>En el m\u00e9todo <code>savePicture</code>, cuando la app corre en un dispositivo m\u00f3vil, configuramos <code>filepath</code> como el resultado de <code>writeFile()</code> y <code>webviewPath</code> usando <code>Capacitor.convertFileSrc()</code>. En la web, mantenemos el uso de <code>webPath</code>.</p> <pre><code>private async savePicture(photo: Photo) {\n  const base64Data = await this.readAsBase64(photo);\n\n  const fileName = Date.now() + '.jpeg';\n  const savedFile = await Filesystem.writeFile({\n    path: fileName,\n    data: base64Data,\n    directory: Directory.Data\n  });\n\n  if (this.platform.is('hybrid')) {\n    return {\n      filepath: savedFile.uri,\n      webviewPath: Capacitor.convertFileSrc(savedFile.uri),\n    };\n  } else {\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath\n    };\n  }\n}\n</code></pre> <p>Nota: <code>Capacitor.convertFileSrc()</code> convierte el URI de archivo en un URI compatible con webview, esencial para mostrar im\u00e1genes en dispositivos m\u00f3viles.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/25versionmovil/#3-actualizar-la-funcion-loadsaved","title":"3. Actualizar la Funci\u00f3n <code>loadSaved</code>","text":"<p>En dispositivos m\u00f3viles, podemos configurar directamente el atributo <code>src</code> de las im\u00e1genes, por lo que no necesitamos convertirlas a base64. En la web, continuamos usando la l\u00f3gica de <code>Filesystem.readFile()</code> para cargar las im\u00e1genes en base64. </p> <pre><code>public async loadSaved() {\n  const { value } = await Preferences.get({ key: this.PHOTO_STORAGE });\n  this.photos = (value ? JSON.parse(value) : []) as UserPhoto[];\n\n  if (!this.platform.is('hybrid')) {\n    for (let photo of this.photos) {\n      const readFile = await Filesystem.readFile({\n        path: photo.filepath,\n        directory: Directory.Data\n      });\n\n      photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n    }\n  }\n}\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/25versionmovil/#conclusion","title":"Conclusi\u00f3n \ud83d\udccc","text":"<p>Con estos cambios, nuestra galer\u00eda de fotos ahora puede ejecutarse en web, Android y iOS desde un solo c\u00f3digo base. Hemos ajustado la l\u00f3gica para que las fotos se almacenen y se muestren correctamente en cada plataforma, ya sea en base64 para la web o mediante rutas nativas en dispositivos m\u00f3viles. </p> <p>El siguiente paso es desplegar la aplicaci\u00f3n en un dispositivo m\u00f3vil y ver nuestra galer\u00eda en acci\u00f3n en Android y iOS. \u00a1Vamos a por ello! \ud83c\udf89</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/26despligueandroidyios/","title":"Desplegando la Aplicaci\u00f3n en iOS y Android \ud83d\udcf2","text":"<p>Ya que a\u00f1adimos Capacitor a nuestro proyecto desde el inicio, \u00a1solo faltan unos pocos pasos para desplegar la aplicaci\u00f3n de galer\u00eda de fotos en dispositivos iOS y Android! A continuaci\u00f3n, te guiaremos en la configuraci\u00f3n y el despliegue de la app en dispositivos m\u00f3viles.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/26despligueandroidyios/#configuracion-de-capacitor","title":"Configuraci\u00f3n de Capacitor \ud83d\udd0c","text":"<p>Capacitor es el runtime oficial de Ionic que permite desplegar aplicaciones web en plataformas nativas como iOS y Android. Si a\u00fan est\u00e1s ejecutando <code>ionic serve</code> en la terminal, canc\u00e9lalo para realizar una nueva compilaci\u00f3n de tu proyecto Ionic:</p> <pre><code>ionic build\n</code></pre> <p>A continuaci\u00f3n, crea los proyectos nativos para iOS y Android:</p> <pre><code>ionic cap add ios\nionic cap add android\n</code></pre> <p>Estos comandos crean las carpetas <code>ios</code> y <code>android</code> en la ra\u00edz del proyecto. Cada una es un proyecto nativo independiente, que debe considerarse como parte de tu app de Ionic (puedes gestionarlos con herramientas nativas y agregarlos al control de versiones).</p> <p>Cada vez que realices un <code>ionic build</code> que actualice el directorio <code>www</code>, es necesario copiar esos cambios a los proyectos nativos:</p> <pre><code>ionic cap copy\n</code></pre> <p>Nota: Si realizas cambios en el c\u00f3digo nativo (por ejemplo, a\u00f1adiendo un nuevo plugin), usa el comando <code>sync</code> en lugar de <code>copy</code>:</p> <pre><code>ionic cap sync\n</code></pre>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/26despligueandroidyios/#despliegue-en-ios","title":"Despliegue en iOS \ud83c\udf4e","text":"<p>Nota: Para crear y ejecutar una app en iOS, es necesario utilizar una computadora Mac.</p> <p>Las aplicaciones de Capacitor para iOS se configuran y gestionan a trav\u00e9s de Xcode, y las dependencias se manejan mediante CocoaPods. Sigue estos pasos para abrir el proyecto en Xcode y configurarlo:</p> <ol> <li>Abrir el Proyecto en Xcode:</li> </ol> <pre><code>ionic cap open ios\n</code></pre> <ol> <li> <p>Configurar Permisos para la C\u00e1mara: </p> </li> <li> <p>En Info.plist, a\u00f1ade la clave <code>NSCameraUsageDescription</code> y establece su valor con un mensaje que describa por qu\u00e9 la app necesita acceso a la c\u00e1mara, como \"Para tomar fotos\".</p> </li> <li> <p>A\u00f1ade tambi\u00e9n <code>NSPhotoLibraryAddUsageDescription</code> y <code>NSPhotoLibraryUsageDescription</code> para habilitar el acceso a la galer\u00eda.</p> </li> <li> <p>Seleccionar Equipo de Desarrollo:</p> </li> <li> <p>Haz clic en \"App\" en el Project Navigator y selecciona tu Development Team en la secci\u00f3n Signing &amp; Capabilities.</p> </li> <li> <p>Probar la App en un Dispositivo Real:</p> </li> <li>Conecta un dispositivo iOS a tu computadora Mac, selecciona el dispositivo en Xcode y haz clic en el bot\u00f3n Build para compilar e instalar la app.</li> </ol> <p>Cuando ejecutes la app en el dispositivo, se mostrar\u00e1 un mensaje solicitando permiso para acceder a la c\u00e1mara al pulsar el bot\u00f3n de c\u00e1mara en la pesta\u00f1a de galer\u00eda de fotos. Despu\u00e9s de conceder el permiso, podr\u00e1s tomar una foto y verla en la app.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/26despligueandroidyios/#despliegue-en-android","title":"Despliegue en Android \ud83e\udd16","text":"<p>Las aplicaciones de Capacitor para Android se gestionan y configuran a trav\u00e9s de Android Studio. Para preparar la app y ejecutarla en un dispositivo Android, sigue estos pasos:</p> <ol> <li>Abrir el Proyecto en Android Studio:</li> </ol> <pre><code>ionic cap open android\n</code></pre> <ol> <li>Configurar Permisos para la C\u00e1mara:</li> <li> <p>En AndroidManifest.xml, aseg\u00farate de que se incluyan los permisos para leer y escribir en el almacenamiento externo:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;\n&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n</code></pre> </li> <li> <p>Probar la App en un Dispositivo Real:</p> </li> <li>Conecta un dispositivo Android a tu computadora. En Android Studio, haz clic en el bot\u00f3n Run, selecciona el dispositivo y confirma para compilar e instalar la app.</li> </ol> <p>Cuando ejecutes la app en el dispositivo Android, al pulsar el bot\u00f3n de c\u00e1mara en la pesta\u00f1a de galer\u00eda de fotos, se solicitar\u00e1 permiso para acceder a la c\u00e1mara. Despu\u00e9s de conceder el permiso, podr\u00e1s tomar una foto y verla en la app.</p>"},{"location":"ut4-angular-ionic/2creacionprimeraapp/26despligueandroidyios/#nuestra-app-de-galeria-de-fotos-ya-esta-en-ios-y-android","title":"\u00a1Nuestra App de Galer\u00eda de Fotos ya est\u00e1 en iOS y Android! \ud83c\udf89","text":"<p>Con estos pasos, hemos desplegado exitosamente la aplicaci\u00f3n en dispositivos iOS y Android, utilizando una \u00fanica base de c\u00f3digo. En el pr\u00f3ximo paso, implementaremos la funcionalidad para eliminar fotos, completando as\u00ed nuestra caracter\u00edstica de galer\u00eda de fotos. \u00a1Adelante!</p>"}]}